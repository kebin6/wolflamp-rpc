// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
	"github.com/kebin6/wolflamp-rpc/ent/round"
	"github.com/kebin6/wolflamp-rpc/ent/roundinvest"
	"github.com/kebin6/wolflamp-rpc/ent/roundlambfold"
)

// RoundUpdate is the builder for updating Round entities.
type RoundUpdate struct {
	config
	hooks    []Hook
	mutation *RoundMutation
}

// Where appends a list predicates to the RoundUpdate builder.
func (ru *RoundUpdate) Where(ps ...predicate.Round) *RoundUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoundUpdate) SetUpdatedAt(t time.Time) *RoundUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetStatus sets the "status" field.
func (ru *RoundUpdate) SetStatus(u uint8) *RoundUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(u)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableStatus(u *uint8) *RoundUpdate {
	if u != nil {
		ru.SetStatus(*u)
	}
	return ru
}

// AddStatus adds u to the "status" field.
func (ru *RoundUpdate) AddStatus(u int8) *RoundUpdate {
	ru.mutation.AddStatus(u)
	return ru
}

// ClearStatus clears the value of the "status" field.
func (ru *RoundUpdate) ClearStatus() *RoundUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetTotalRoundCount sets the "total_round_count" field.
func (ru *RoundUpdate) SetTotalRoundCount(u uint64) *RoundUpdate {
	ru.mutation.ResetTotalRoundCount()
	ru.mutation.SetTotalRoundCount(u)
	return ru
}

// SetNillableTotalRoundCount sets the "total_round_count" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableTotalRoundCount(u *uint64) *RoundUpdate {
	if u != nil {
		ru.SetTotalRoundCount(*u)
	}
	return ru
}

// AddTotalRoundCount adds u to the "total_round_count" field.
func (ru *RoundUpdate) AddTotalRoundCount(u int64) *RoundUpdate {
	ru.mutation.AddTotalRoundCount(u)
	return ru
}

// ClearTotalRoundCount clears the value of the "total_round_count" field.
func (ru *RoundUpdate) ClearTotalRoundCount() *RoundUpdate {
	ru.mutation.ClearTotalRoundCount()
	return ru
}

// SetSelectedFold sets the "selected_fold" field.
func (ru *RoundUpdate) SetSelectedFold(u uint32) *RoundUpdate {
	ru.mutation.ResetSelectedFold()
	ru.mutation.SetSelectedFold(u)
	return ru
}

// SetNillableSelectedFold sets the "selected_fold" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableSelectedFold(u *uint32) *RoundUpdate {
	if u != nil {
		ru.SetSelectedFold(*u)
	}
	return ru
}

// AddSelectedFold adds u to the "selected_fold" field.
func (ru *RoundUpdate) AddSelectedFold(u int32) *RoundUpdate {
	ru.mutation.AddSelectedFold(u)
	return ru
}

// AddFoldIDs adds the "fold" edge to the RoundLambFold entity by IDs.
func (ru *RoundUpdate) AddFoldIDs(ids ...uint64) *RoundUpdate {
	ru.mutation.AddFoldIDs(ids...)
	return ru
}

// AddFold adds the "fold" edges to the RoundLambFold entity.
func (ru *RoundUpdate) AddFold(r ...*RoundLambFold) *RoundUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddFoldIDs(ids...)
}

// AddInvestIDs adds the "invest" edge to the RoundInvest entity by IDs.
func (ru *RoundUpdate) AddInvestIDs(ids ...uint64) *RoundUpdate {
	ru.mutation.AddInvestIDs(ids...)
	return ru
}

// AddInvest adds the "invest" edges to the RoundInvest entity.
func (ru *RoundUpdate) AddInvest(r ...*RoundInvest) *RoundUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddInvestIDs(ids...)
}

// Mutation returns the RoundMutation object of the builder.
func (ru *RoundUpdate) Mutation() *RoundMutation {
	return ru.mutation
}

// ClearFold clears all "fold" edges to the RoundLambFold entity.
func (ru *RoundUpdate) ClearFold() *RoundUpdate {
	ru.mutation.ClearFold()
	return ru
}

// RemoveFoldIDs removes the "fold" edge to RoundLambFold entities by IDs.
func (ru *RoundUpdate) RemoveFoldIDs(ids ...uint64) *RoundUpdate {
	ru.mutation.RemoveFoldIDs(ids...)
	return ru
}

// RemoveFold removes "fold" edges to RoundLambFold entities.
func (ru *RoundUpdate) RemoveFold(r ...*RoundLambFold) *RoundUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveFoldIDs(ids...)
}

// ClearInvest clears all "invest" edges to the RoundInvest entity.
func (ru *RoundUpdate) ClearInvest() *RoundUpdate {
	ru.mutation.ClearInvest()
	return ru
}

// RemoveInvestIDs removes the "invest" edge to RoundInvest entities by IDs.
func (ru *RoundUpdate) RemoveInvestIDs(ids ...uint64) *RoundUpdate {
	ru.mutation.RemoveInvestIDs(ids...)
	return ru
}

// RemoveInvest removes "invest" edges to RoundInvest entities.
func (ru *RoundUpdate) RemoveInvest(r ...*RoundInvest) *RoundUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveInvestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoundUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoundUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoundUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoundUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoundUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := round.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

func (ru *RoundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(round.Table, round.Columns, sqlgraph.NewFieldSpec(round.FieldID, field.TypeUint64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(round.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(round.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.AddField(round.FieldStatus, field.TypeUint8, value)
	}
	if ru.mutation.StatusCleared() {
		_spec.ClearField(round.FieldStatus, field.TypeUint8)
	}
	if value, ok := ru.mutation.TotalRoundCount(); ok {
		_spec.SetField(round.FieldTotalRoundCount, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedTotalRoundCount(); ok {
		_spec.AddField(round.FieldTotalRoundCount, field.TypeUint64, value)
	}
	if ru.mutation.TotalRoundCountCleared() {
		_spec.ClearField(round.FieldTotalRoundCount, field.TypeUint64)
	}
	if value, ok := ru.mutation.SelectedFold(); ok {
		_spec.SetField(round.FieldSelectedFold, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.AddedSelectedFold(); ok {
		_spec.AddField(round.FieldSelectedFold, field.TypeUint32, value)
	}
	if ru.mutation.FoldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.FoldTable,
			Columns: []string{round.FoldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedFoldIDs(); len(nodes) > 0 && !ru.mutation.FoldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.FoldTable,
			Columns: []string{round.FoldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FoldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.FoldTable,
			Columns: []string{round.FoldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.InvestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.InvestTable,
			Columns: []string{round.InvestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundinvest.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedInvestIDs(); len(nodes) > 0 && !ru.mutation.InvestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.InvestTable,
			Columns: []string{round.InvestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundinvest.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.InvestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.InvestTable,
			Columns: []string{round.InvestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundinvest.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{round.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoundUpdateOne is the builder for updating a single Round entity.
type RoundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoundMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoundUpdateOne) SetUpdatedAt(t time.Time) *RoundUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RoundUpdateOne) SetStatus(u uint8) *RoundUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(u)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableStatus(u *uint8) *RoundUpdateOne {
	if u != nil {
		ruo.SetStatus(*u)
	}
	return ruo
}

// AddStatus adds u to the "status" field.
func (ruo *RoundUpdateOne) AddStatus(u int8) *RoundUpdateOne {
	ruo.mutation.AddStatus(u)
	return ruo
}

// ClearStatus clears the value of the "status" field.
func (ruo *RoundUpdateOne) ClearStatus() *RoundUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetTotalRoundCount sets the "total_round_count" field.
func (ruo *RoundUpdateOne) SetTotalRoundCount(u uint64) *RoundUpdateOne {
	ruo.mutation.ResetTotalRoundCount()
	ruo.mutation.SetTotalRoundCount(u)
	return ruo
}

// SetNillableTotalRoundCount sets the "total_round_count" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableTotalRoundCount(u *uint64) *RoundUpdateOne {
	if u != nil {
		ruo.SetTotalRoundCount(*u)
	}
	return ruo
}

// AddTotalRoundCount adds u to the "total_round_count" field.
func (ruo *RoundUpdateOne) AddTotalRoundCount(u int64) *RoundUpdateOne {
	ruo.mutation.AddTotalRoundCount(u)
	return ruo
}

// ClearTotalRoundCount clears the value of the "total_round_count" field.
func (ruo *RoundUpdateOne) ClearTotalRoundCount() *RoundUpdateOne {
	ruo.mutation.ClearTotalRoundCount()
	return ruo
}

// SetSelectedFold sets the "selected_fold" field.
func (ruo *RoundUpdateOne) SetSelectedFold(u uint32) *RoundUpdateOne {
	ruo.mutation.ResetSelectedFold()
	ruo.mutation.SetSelectedFold(u)
	return ruo
}

// SetNillableSelectedFold sets the "selected_fold" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableSelectedFold(u *uint32) *RoundUpdateOne {
	if u != nil {
		ruo.SetSelectedFold(*u)
	}
	return ruo
}

// AddSelectedFold adds u to the "selected_fold" field.
func (ruo *RoundUpdateOne) AddSelectedFold(u int32) *RoundUpdateOne {
	ruo.mutation.AddSelectedFold(u)
	return ruo
}

// AddFoldIDs adds the "fold" edge to the RoundLambFold entity by IDs.
func (ruo *RoundUpdateOne) AddFoldIDs(ids ...uint64) *RoundUpdateOne {
	ruo.mutation.AddFoldIDs(ids...)
	return ruo
}

// AddFold adds the "fold" edges to the RoundLambFold entity.
func (ruo *RoundUpdateOne) AddFold(r ...*RoundLambFold) *RoundUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddFoldIDs(ids...)
}

// AddInvestIDs adds the "invest" edge to the RoundInvest entity by IDs.
func (ruo *RoundUpdateOne) AddInvestIDs(ids ...uint64) *RoundUpdateOne {
	ruo.mutation.AddInvestIDs(ids...)
	return ruo
}

// AddInvest adds the "invest" edges to the RoundInvest entity.
func (ruo *RoundUpdateOne) AddInvest(r ...*RoundInvest) *RoundUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddInvestIDs(ids...)
}

// Mutation returns the RoundMutation object of the builder.
func (ruo *RoundUpdateOne) Mutation() *RoundMutation {
	return ruo.mutation
}

// ClearFold clears all "fold" edges to the RoundLambFold entity.
func (ruo *RoundUpdateOne) ClearFold() *RoundUpdateOne {
	ruo.mutation.ClearFold()
	return ruo
}

// RemoveFoldIDs removes the "fold" edge to RoundLambFold entities by IDs.
func (ruo *RoundUpdateOne) RemoveFoldIDs(ids ...uint64) *RoundUpdateOne {
	ruo.mutation.RemoveFoldIDs(ids...)
	return ruo
}

// RemoveFold removes "fold" edges to RoundLambFold entities.
func (ruo *RoundUpdateOne) RemoveFold(r ...*RoundLambFold) *RoundUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveFoldIDs(ids...)
}

// ClearInvest clears all "invest" edges to the RoundInvest entity.
func (ruo *RoundUpdateOne) ClearInvest() *RoundUpdateOne {
	ruo.mutation.ClearInvest()
	return ruo
}

// RemoveInvestIDs removes the "invest" edge to RoundInvest entities by IDs.
func (ruo *RoundUpdateOne) RemoveInvestIDs(ids ...uint64) *RoundUpdateOne {
	ruo.mutation.RemoveInvestIDs(ids...)
	return ruo
}

// RemoveInvest removes "invest" edges to RoundInvest entities.
func (ruo *RoundUpdateOne) RemoveInvest(r ...*RoundInvest) *RoundUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveInvestIDs(ids...)
}

// Where appends a list predicates to the RoundUpdate builder.
func (ruo *RoundUpdateOne) Where(ps ...predicate.Round) *RoundUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoundUpdateOne) Select(field string, fields ...string) *RoundUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Round entity.
func (ruo *RoundUpdateOne) Save(ctx context.Context) (*Round, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoundUpdateOne) SaveX(ctx context.Context) *Round {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoundUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoundUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoundUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := round.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

func (ruo *RoundUpdateOne) sqlSave(ctx context.Context) (_node *Round, err error) {
	_spec := sqlgraph.NewUpdateSpec(round.Table, round.Columns, sqlgraph.NewFieldSpec(round.FieldID, field.TypeUint64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Round.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, round.FieldID)
		for _, f := range fields {
			if !round.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != round.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(round.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(round.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.AddField(round.FieldStatus, field.TypeUint8, value)
	}
	if ruo.mutation.StatusCleared() {
		_spec.ClearField(round.FieldStatus, field.TypeUint8)
	}
	if value, ok := ruo.mutation.TotalRoundCount(); ok {
		_spec.SetField(round.FieldTotalRoundCount, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedTotalRoundCount(); ok {
		_spec.AddField(round.FieldTotalRoundCount, field.TypeUint64, value)
	}
	if ruo.mutation.TotalRoundCountCleared() {
		_spec.ClearField(round.FieldTotalRoundCount, field.TypeUint64)
	}
	if value, ok := ruo.mutation.SelectedFold(); ok {
		_spec.SetField(round.FieldSelectedFold, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.AddedSelectedFold(); ok {
		_spec.AddField(round.FieldSelectedFold, field.TypeUint32, value)
	}
	if ruo.mutation.FoldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.FoldTable,
			Columns: []string{round.FoldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedFoldIDs(); len(nodes) > 0 && !ruo.mutation.FoldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.FoldTable,
			Columns: []string{round.FoldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FoldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.FoldTable,
			Columns: []string{round.FoldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.InvestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.InvestTable,
			Columns: []string{round.InvestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundinvest.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedInvestIDs(); len(nodes) > 0 && !ruo.mutation.InvestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.InvestTable,
			Columns: []string{round.InvestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundinvest.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.InvestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.InvestTable,
			Columns: []string{round.InvestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roundinvest.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Round{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{round.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
