// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/kebin6/wolflamp-rpc/ent/banner"
	"github.com/kebin6/wolflamp-rpc/ent/file"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
)

// BannerUpdate is the builder for updating Banner entities.
type BannerUpdate struct {
	config
	hooks    []Hook
	mutation *BannerMutation
}

// Where appends a list predicates to the BannerUpdate builder.
func (bu *BannerUpdate) Where(ps ...predicate.Banner) *BannerUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BannerUpdate) SetUpdatedAt(t time.Time) *BannerUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetStatus sets the "status" field.
func (bu *BannerUpdate) SetStatus(u uint8) *BannerUpdate {
	bu.mutation.ResetStatus()
	bu.mutation.SetStatus(u)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableStatus(u *uint8) *BannerUpdate {
	if u != nil {
		bu.SetStatus(*u)
	}
	return bu
}

// AddStatus adds u to the "status" field.
func (bu *BannerUpdate) AddStatus(u int8) *BannerUpdate {
	bu.mutation.AddStatus(u)
	return bu
}

// ClearStatus clears the value of the "status" field.
func (bu *BannerUpdate) ClearStatus() *BannerUpdate {
	bu.mutation.ClearStatus()
	return bu
}

// SetEndpoint sets the "endpoint" field.
func (bu *BannerUpdate) SetEndpoint(s string) *BannerUpdate {
	bu.mutation.SetEndpoint(s)
	return bu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableEndpoint(s *string) *BannerUpdate {
	if s != nil {
		bu.SetEndpoint(*s)
	}
	return bu
}

// SetModule sets the "module" field.
func (bu *BannerUpdate) SetModule(s string) *BannerUpdate {
	bu.mutation.SetModule(s)
	return bu
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableModule(s *string) *BannerUpdate {
	if s != nil {
		bu.SetModule(*s)
	}
	return bu
}

// SetFileType sets the "file_type" field.
func (bu *BannerUpdate) SetFileType(u uint8) *BannerUpdate {
	bu.mutation.ResetFileType()
	bu.mutation.SetFileType(u)
	return bu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableFileType(u *uint8) *BannerUpdate {
	if u != nil {
		bu.SetFileType(*u)
	}
	return bu
}

// AddFileType adds u to the "file_type" field.
func (bu *BannerUpdate) AddFileType(u int8) *BannerUpdate {
	bu.mutation.AddFileType(u)
	return bu
}

// SetPath sets the "path" field.
func (bu *BannerUpdate) SetPath(s string) *BannerUpdate {
	bu.mutation.SetPath(s)
	return bu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (bu *BannerUpdate) SetNillablePath(s *string) *BannerUpdate {
	if s != nil {
		bu.SetPath(*s)
	}
	return bu
}

// SetJumpURL sets the "jump_url" field.
func (bu *BannerUpdate) SetJumpURL(s string) *BannerUpdate {
	bu.mutation.SetJumpURL(s)
	return bu
}

// SetNillableJumpURL sets the "jump_url" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableJumpURL(s *string) *BannerUpdate {
	if s != nil {
		bu.SetJumpURL(*s)
	}
	return bu
}

// ClearJumpURL clears the value of the "jump_url" field.
func (bu *BannerUpdate) ClearJumpURL() *BannerUpdate {
	bu.mutation.ClearJumpURL()
	return bu
}

// SetFileID sets the "file" edge to the File entity by ID.
func (bu *BannerUpdate) SetFileID(id uuid.UUID) *BannerUpdate {
	bu.mutation.SetFileID(id)
	return bu
}

// SetFile sets the "file" edge to the File entity.
func (bu *BannerUpdate) SetFile(f *File) *BannerUpdate {
	return bu.SetFileID(f.ID)
}

// Mutation returns the BannerMutation object of the builder.
func (bu *BannerUpdate) Mutation() *BannerMutation {
	return bu.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (bu *BannerUpdate) ClearFile() *BannerUpdate {
	bu.mutation.ClearFile()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BannerUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BannerUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BannerUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BannerUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BannerUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := banner.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BannerUpdate) check() error {
	if _, ok := bu.mutation.FileID(); bu.mutation.FileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Banner.file"`)
	}
	return nil
}

func (bu *BannerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(banner.Table, banner.Columns, sqlgraph.NewFieldSpec(banner.FieldID, field.TypeUint64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(banner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := bu.mutation.AddedStatus(); ok {
		_spec.AddField(banner.FieldStatus, field.TypeUint8, value)
	}
	if bu.mutation.StatusCleared() {
		_spec.ClearField(banner.FieldStatus, field.TypeUint8)
	}
	if value, ok := bu.mutation.Endpoint(); ok {
		_spec.SetField(banner.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := bu.mutation.Module(); ok {
		_spec.SetField(banner.FieldModule, field.TypeString, value)
	}
	if value, ok := bu.mutation.FileType(); ok {
		_spec.SetField(banner.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := bu.mutation.AddedFileType(); ok {
		_spec.AddField(banner.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := bu.mutation.Path(); ok {
		_spec.SetField(banner.FieldPath, field.TypeString, value)
	}
	if value, ok := bu.mutation.JumpURL(); ok {
		_spec.SetField(banner.FieldJumpURL, field.TypeString, value)
	}
	if bu.mutation.JumpURLCleared() {
		_spec.ClearField(banner.FieldJumpURL, field.TypeString)
	}
	if bu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   banner.FileTable,
			Columns: []string{banner.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   banner.FileTable,
			Columns: []string{banner.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BannerUpdateOne is the builder for updating a single Banner entity.
type BannerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BannerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BannerUpdateOne) SetUpdatedAt(t time.Time) *BannerUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetStatus sets the "status" field.
func (buo *BannerUpdateOne) SetStatus(u uint8) *BannerUpdateOne {
	buo.mutation.ResetStatus()
	buo.mutation.SetStatus(u)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableStatus(u *uint8) *BannerUpdateOne {
	if u != nil {
		buo.SetStatus(*u)
	}
	return buo
}

// AddStatus adds u to the "status" field.
func (buo *BannerUpdateOne) AddStatus(u int8) *BannerUpdateOne {
	buo.mutation.AddStatus(u)
	return buo
}

// ClearStatus clears the value of the "status" field.
func (buo *BannerUpdateOne) ClearStatus() *BannerUpdateOne {
	buo.mutation.ClearStatus()
	return buo
}

// SetEndpoint sets the "endpoint" field.
func (buo *BannerUpdateOne) SetEndpoint(s string) *BannerUpdateOne {
	buo.mutation.SetEndpoint(s)
	return buo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableEndpoint(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetEndpoint(*s)
	}
	return buo
}

// SetModule sets the "module" field.
func (buo *BannerUpdateOne) SetModule(s string) *BannerUpdateOne {
	buo.mutation.SetModule(s)
	return buo
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableModule(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetModule(*s)
	}
	return buo
}

// SetFileType sets the "file_type" field.
func (buo *BannerUpdateOne) SetFileType(u uint8) *BannerUpdateOne {
	buo.mutation.ResetFileType()
	buo.mutation.SetFileType(u)
	return buo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableFileType(u *uint8) *BannerUpdateOne {
	if u != nil {
		buo.SetFileType(*u)
	}
	return buo
}

// AddFileType adds u to the "file_type" field.
func (buo *BannerUpdateOne) AddFileType(u int8) *BannerUpdateOne {
	buo.mutation.AddFileType(u)
	return buo
}

// SetPath sets the "path" field.
func (buo *BannerUpdateOne) SetPath(s string) *BannerUpdateOne {
	buo.mutation.SetPath(s)
	return buo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillablePath(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetPath(*s)
	}
	return buo
}

// SetJumpURL sets the "jump_url" field.
func (buo *BannerUpdateOne) SetJumpURL(s string) *BannerUpdateOne {
	buo.mutation.SetJumpURL(s)
	return buo
}

// SetNillableJumpURL sets the "jump_url" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableJumpURL(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetJumpURL(*s)
	}
	return buo
}

// ClearJumpURL clears the value of the "jump_url" field.
func (buo *BannerUpdateOne) ClearJumpURL() *BannerUpdateOne {
	buo.mutation.ClearJumpURL()
	return buo
}

// SetFileID sets the "file" edge to the File entity by ID.
func (buo *BannerUpdateOne) SetFileID(id uuid.UUID) *BannerUpdateOne {
	buo.mutation.SetFileID(id)
	return buo
}

// SetFile sets the "file" edge to the File entity.
func (buo *BannerUpdateOne) SetFile(f *File) *BannerUpdateOne {
	return buo.SetFileID(f.ID)
}

// Mutation returns the BannerMutation object of the builder.
func (buo *BannerUpdateOne) Mutation() *BannerMutation {
	return buo.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (buo *BannerUpdateOne) ClearFile() *BannerUpdateOne {
	buo.mutation.ClearFile()
	return buo
}

// Where appends a list predicates to the BannerUpdate builder.
func (buo *BannerUpdateOne) Where(ps ...predicate.Banner) *BannerUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BannerUpdateOne) Select(field string, fields ...string) *BannerUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Banner entity.
func (buo *BannerUpdateOne) Save(ctx context.Context) (*Banner, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BannerUpdateOne) SaveX(ctx context.Context) *Banner {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BannerUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BannerUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BannerUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := banner.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BannerUpdateOne) check() error {
	if _, ok := buo.mutation.FileID(); buo.mutation.FileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Banner.file"`)
	}
	return nil
}

func (buo *BannerUpdateOne) sqlSave(ctx context.Context) (_node *Banner, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(banner.Table, banner.Columns, sqlgraph.NewFieldSpec(banner.FieldID, field.TypeUint64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Banner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, banner.FieldID)
		for _, f := range fields {
			if !banner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != banner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(banner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := buo.mutation.AddedStatus(); ok {
		_spec.AddField(banner.FieldStatus, field.TypeUint8, value)
	}
	if buo.mutation.StatusCleared() {
		_spec.ClearField(banner.FieldStatus, field.TypeUint8)
	}
	if value, ok := buo.mutation.Endpoint(); ok {
		_spec.SetField(banner.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := buo.mutation.Module(); ok {
		_spec.SetField(banner.FieldModule, field.TypeString, value)
	}
	if value, ok := buo.mutation.FileType(); ok {
		_spec.SetField(banner.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := buo.mutation.AddedFileType(); ok {
		_spec.AddField(banner.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := buo.mutation.Path(); ok {
		_spec.SetField(banner.FieldPath, field.TypeString, value)
	}
	if value, ok := buo.mutation.JumpURL(); ok {
		_spec.SetField(banner.FieldJumpURL, field.TypeString, value)
	}
	if buo.mutation.JumpURLCleared() {
		_spec.ClearField(banner.FieldJumpURL, field.TypeString)
	}
	if buo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   banner.FileTable,
			Columns: []string{banner.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   banner.FileTable,
			Columns: []string{banner.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Banner{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
