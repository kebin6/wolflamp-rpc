// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kebin6/wolflamp-rpc/ent/player"
)

// 玩家表
type Player struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// player name | 用户名称
	Name string `json:"name,omitempty"`
	// email | 邮箱
	Email string `json:"email,omitempty"`
	// password | 密码
	Password string `json:"password,omitempty"`
	// transaction password | 交易密码
	TransactionPassword string `json:"transaction_password,omitempty"`
	// coin lamb | 小羊余额
	CoinLamb float32 `json:"coin_lamb,omitempty"`
	// token lamb | 小羊余额
	TokenLamb float32 `json:"token_lamb,omitempty"`
	// rank | 代理等级
	Rank uint32 `json:"rank,omitempty"`
	// amount | 账户余额
	Amount float64 `json:"amount,omitempty"`
	// deposit address | 充值地址
	DepositAddress string `json:"deposit_address,omitempty"`
	// invite people | 代理发展人数
	InvitedNum uint32 `json:"invited_num,omitempty"`
	// total income | 代理总收益
	TotalIncome float64 `json:"total_income,omitempty"`
	// profit and loss | 总盈亏数
	ProfitAndLoss float32 `json:"profit_and_loss,omitempty"`
	// invite code | 邀请码
	InviteCode string `json:"invite_code,omitempty"`
	// the inviter id | 邀请人ID
	InviterID uint64 `json:"inviter_id,omitempty"`
	// the inviter 's invite code | 邀请人邀请码
	InvitedCode string `json:"invited_code,omitempty"`
	// system commission percent | 平台收益分成比例
	SystemCommission float32 `json:"system_commission,omitempty"`
	// the user id of gcics system
	GcicsUserID uint64 `json:"gcics_user_id,omitempty"`
	// user game token from gcics system
	GcicsToken string `json:"gcics_token,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerQuery when eager-loading is set.
	Edges        PlayerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlayerEdges holds the relations/edges for other nodes in the graph.
type PlayerEdges struct {
	// Inviter holds the value of the inviter edge.
	Inviter *Player `json:"inviter,omitempty"`
	// Invitees holds the value of the invitees edge.
	Invitees []*Player `json:"invitees,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InviterOrErr returns the Inviter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerEdges) InviterOrErr() (*Player, error) {
	if e.Inviter != nil {
		return e.Inviter, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: player.Label}
	}
	return nil, &NotLoadedError{edge: "inviter"}
}

// InviteesOrErr returns the Invitees value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerEdges) InviteesOrErr() ([]*Player, error) {
	if e.loadedTypes[1] {
		return e.Invitees, nil
	}
	return nil, &NotLoadedError{edge: "invitees"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Player) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case player.FieldCoinLamb, player.FieldTokenLamb, player.FieldAmount, player.FieldTotalIncome, player.FieldProfitAndLoss, player.FieldSystemCommission:
			values[i] = new(sql.NullFloat64)
		case player.FieldID, player.FieldStatus, player.FieldRank, player.FieldInvitedNum, player.FieldInviterID, player.FieldGcicsUserID:
			values[i] = new(sql.NullInt64)
		case player.FieldName, player.FieldEmail, player.FieldPassword, player.FieldTransactionPassword, player.FieldDepositAddress, player.FieldInviteCode, player.FieldInvitedCode, player.FieldGcicsToken:
			values[i] = new(sql.NullString)
		case player.FieldCreatedAt, player.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Player fields.
func (pl *Player) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case player.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = uint64(value.Int64)
		case player.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case player.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case player.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pl.Status = uint8(value.Int64)
			}
		case player.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case player.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pl.Email = value.String
			}
		case player.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				pl.Password = value.String
			}
		case player.FieldTransactionPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_password", values[i])
			} else if value.Valid {
				pl.TransactionPassword = value.String
			}
		case player.FieldCoinLamb:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field coin_lamb", values[i])
			} else if value.Valid {
				pl.CoinLamb = float32(value.Float64)
			}
		case player.FieldTokenLamb:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field token_lamb", values[i])
			} else if value.Valid {
				pl.TokenLamb = float32(value.Float64)
			}
		case player.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				pl.Rank = uint32(value.Int64)
			}
		case player.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pl.Amount = value.Float64
			}
		case player.FieldDepositAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_address", values[i])
			} else if value.Valid {
				pl.DepositAddress = value.String
			}
		case player.FieldInvitedNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invited_num", values[i])
			} else if value.Valid {
				pl.InvitedNum = uint32(value.Int64)
			}
		case player.FieldTotalIncome:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_income", values[i])
			} else if value.Valid {
				pl.TotalIncome = value.Float64
			}
		case player.FieldProfitAndLoss:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field profit_and_loss", values[i])
			} else if value.Valid {
				pl.ProfitAndLoss = float32(value.Float64)
			}
		case player.FieldInviteCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invite_code", values[i])
			} else if value.Valid {
				pl.InviteCode = value.String
			}
		case player.FieldInviterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inviter_id", values[i])
			} else if value.Valid {
				pl.InviterID = uint64(value.Int64)
			}
		case player.FieldInvitedCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invited_code", values[i])
			} else if value.Valid {
				pl.InvitedCode = value.String
			}
		case player.FieldSystemCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field system_commission", values[i])
			} else if value.Valid {
				pl.SystemCommission = float32(value.Float64)
			}
		case player.FieldGcicsUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gcics_user_id", values[i])
			} else if value.Valid {
				pl.GcicsUserID = uint64(value.Int64)
			}
		case player.FieldGcicsToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gcics_token", values[i])
			} else if value.Valid {
				pl.GcicsToken = value.String
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Player.
// This includes values selected through modifiers, order, etc.
func (pl *Player) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryInviter queries the "inviter" edge of the Player entity.
func (pl *Player) QueryInviter() *PlayerQuery {
	return NewPlayerClient(pl.config).QueryInviter(pl)
}

// QueryInvitees queries the "invitees" edge of the Player entity.
func (pl *Player) QueryInvitees() *PlayerQuery {
	return NewPlayerClient(pl.config).QueryInvitees(pl)
}

// Update returns a builder for updating this Player.
// Note that you need to call Player.Unwrap() before calling this method if this Player
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Player) Update() *PlayerUpdateOne {
	return NewPlayerClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Player entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Player) Unwrap() *Player {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Player is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Player) String() string {
	var builder strings.Builder
	builder.WriteString("Player(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pl.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pl.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(pl.Password)
	builder.WriteString(", ")
	builder.WriteString("transaction_password=")
	builder.WriteString(pl.TransactionPassword)
	builder.WriteString(", ")
	builder.WriteString("coin_lamb=")
	builder.WriteString(fmt.Sprintf("%v", pl.CoinLamb))
	builder.WriteString(", ")
	builder.WriteString("token_lamb=")
	builder.WriteString(fmt.Sprintf("%v", pl.TokenLamb))
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", pl.Rank))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pl.Amount))
	builder.WriteString(", ")
	builder.WriteString("deposit_address=")
	builder.WriteString(pl.DepositAddress)
	builder.WriteString(", ")
	builder.WriteString("invited_num=")
	builder.WriteString(fmt.Sprintf("%v", pl.InvitedNum))
	builder.WriteString(", ")
	builder.WriteString("total_income=")
	builder.WriteString(fmt.Sprintf("%v", pl.TotalIncome))
	builder.WriteString(", ")
	builder.WriteString("profit_and_loss=")
	builder.WriteString(fmt.Sprintf("%v", pl.ProfitAndLoss))
	builder.WriteString(", ")
	builder.WriteString("invite_code=")
	builder.WriteString(pl.InviteCode)
	builder.WriteString(", ")
	builder.WriteString("inviter_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.InviterID))
	builder.WriteString(", ")
	builder.WriteString("invited_code=")
	builder.WriteString(pl.InvitedCode)
	builder.WriteString(", ")
	builder.WriteString("system_commission=")
	builder.WriteString(fmt.Sprintf("%v", pl.SystemCommission))
	builder.WriteString(", ")
	builder.WriteString("gcics_user_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.GcicsUserID))
	builder.WriteString(", ")
	builder.WriteString("gcics_token=")
	builder.WriteString(pl.GcicsToken)
	builder.WriteByte(')')
	return builder.String()
}

// Players is a parsable slice of Player.
type Players []*Player
