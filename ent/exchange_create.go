// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/exchange"
)

// ExchangeCreate is the builder for creating a Exchange entity.
type ExchangeCreate struct {
	config
	mutation *ExchangeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ec *ExchangeCreate) SetCreatedAt(t time.Time) *ExchangeCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableCreatedAt(t *time.Time) *ExchangeCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *ExchangeCreate) SetUpdatedAt(t time.Time) *ExchangeCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableUpdatedAt(t *time.Time) *ExchangeCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *ExchangeCreate) SetStatus(u uint8) *ExchangeCreate {
	ec.mutation.SetStatus(u)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableStatus(u *uint8) *ExchangeCreate {
	if u != nil {
		ec.SetStatus(*u)
	}
	return ec
}

// SetPlayerID sets the "player_id" field.
func (ec *ExchangeCreate) SetPlayerID(u uint64) *ExchangeCreate {
	ec.mutation.SetPlayerID(u)
	return ec
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillablePlayerID(u *uint64) *ExchangeCreate {
	if u != nil {
		ec.SetPlayerID(*u)
	}
	return ec
}

// SetTransactionID sets the "transaction_id" field.
func (ec *ExchangeCreate) SetTransactionID(s string) *ExchangeCreate {
	ec.mutation.SetTransactionID(s)
	return ec
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableTransactionID(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetTransactionID(*s)
	}
	return ec
}

// SetMode sets the "mode" field.
func (ec *ExchangeCreate) SetMode(s string) *ExchangeCreate {
	ec.mutation.SetMode(s)
	return ec
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableMode(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetMode(*s)
	}
	return ec
}

// SetType sets the "type" field.
func (ec *ExchangeCreate) SetType(u uint32) *ExchangeCreate {
	ec.mutation.SetType(u)
	return ec
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableType(u *uint32) *ExchangeCreate {
	if u != nil {
		ec.SetType(*u)
	}
	return ec
}

// SetCoinNum sets the "coin_num" field.
func (ec *ExchangeCreate) SetCoinNum(u uint32) *ExchangeCreate {
	ec.mutation.SetCoinNum(u)
	return ec
}

// SetNillableCoinNum sets the "coin_num" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableCoinNum(u *uint32) *ExchangeCreate {
	if u != nil {
		ec.SetCoinNum(*u)
	}
	return ec
}

// SetLampNum sets the "lamp_num" field.
func (ec *ExchangeCreate) SetLampNum(u uint32) *ExchangeCreate {
	ec.mutation.SetLampNum(u)
	return ec
}

// SetNillableLampNum sets the "lamp_num" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableLampNum(u *uint32) *ExchangeCreate {
	if u != nil {
		ec.SetLampNum(*u)
	}
	return ec
}

// SetGcicsOrderID sets the "gcics_order_id" field.
func (ec *ExchangeCreate) SetGcicsOrderID(s string) *ExchangeCreate {
	ec.mutation.SetGcicsOrderID(s)
	return ec
}

// SetNillableGcicsOrderID sets the "gcics_order_id" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableGcicsOrderID(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetGcicsOrderID(*s)
	}
	return ec
}

// SetRemark sets the "remark" field.
func (ec *ExchangeCreate) SetRemark(s string) *ExchangeCreate {
	ec.mutation.SetRemark(s)
	return ec
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableRemark(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetRemark(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExchangeCreate) SetID(u uint64) *ExchangeCreate {
	ec.mutation.SetID(u)
	return ec
}

// Mutation returns the ExchangeMutation object of the builder.
func (ec *ExchangeCreate) Mutation() *ExchangeMutation {
	return ec.mutation
}

// Save creates the Exchange in the database.
func (ec *ExchangeCreate) Save(ctx context.Context) (*Exchange, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExchangeCreate) SaveX(ctx context.Context) *Exchange {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExchangeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExchangeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExchangeCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := exchange.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := exchange.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := exchange.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.PlayerID(); !ok {
		v := exchange.DefaultPlayerID
		ec.mutation.SetPlayerID(v)
	}
	if _, ok := ec.mutation.TransactionID(); !ok {
		v := exchange.DefaultTransactionID
		ec.mutation.SetTransactionID(v)
	}
	if _, ok := ec.mutation.Mode(); !ok {
		v := exchange.DefaultMode
		ec.mutation.SetMode(v)
	}
	if _, ok := ec.mutation.GetType(); !ok {
		v := exchange.DefaultType
		ec.mutation.SetType(v)
	}
	if _, ok := ec.mutation.CoinNum(); !ok {
		v := exchange.DefaultCoinNum
		ec.mutation.SetCoinNum(v)
	}
	if _, ok := ec.mutation.LampNum(); !ok {
		v := exchange.DefaultLampNum
		ec.mutation.SetLampNum(v)
	}
	if _, ok := ec.mutation.GcicsOrderID(); !ok {
		v := exchange.DefaultGcicsOrderID
		ec.mutation.SetGcicsOrderID(v)
	}
	if _, ok := ec.mutation.Remark(); !ok {
		v := exchange.DefaultRemark
		ec.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExchangeCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Exchange.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Exchange.updated_at"`)}
	}
	if _, ok := ec.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player_id", err: errors.New(`ent: missing required field "Exchange.player_id"`)}
	}
	if _, ok := ec.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "transaction_id", err: errors.New(`ent: missing required field "Exchange.transaction_id"`)}
	}
	if _, ok := ec.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "Exchange.mode"`)}
	}
	if _, ok := ec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Exchange.type"`)}
	}
	if _, ok := ec.mutation.CoinNum(); !ok {
		return &ValidationError{Name: "coin_num", err: errors.New(`ent: missing required field "Exchange.coin_num"`)}
	}
	if _, ok := ec.mutation.LampNum(); !ok {
		return &ValidationError{Name: "lamp_num", err: errors.New(`ent: missing required field "Exchange.lamp_num"`)}
	}
	if _, ok := ec.mutation.GcicsOrderID(); !ok {
		return &ValidationError{Name: "gcics_order_id", err: errors.New(`ent: missing required field "Exchange.gcics_order_id"`)}
	}
	if _, ok := ec.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Exchange.remark"`)}
	}
	return nil
}

func (ec *ExchangeCreate) sqlSave(ctx context.Context) (*Exchange, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExchangeCreate) createSpec() (*Exchange, *sqlgraph.CreateSpec) {
	var (
		_node = &Exchange{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(exchange.Table, sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(exchange.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(exchange.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(exchange.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.PlayerID(); ok {
		_spec.SetField(exchange.FieldPlayerID, field.TypeUint64, value)
		_node.PlayerID = value
	}
	if value, ok := ec.mutation.TransactionID(); ok {
		_spec.SetField(exchange.FieldTransactionID, field.TypeString, value)
		_node.TransactionID = value
	}
	if value, ok := ec.mutation.Mode(); ok {
		_spec.SetField(exchange.FieldMode, field.TypeString, value)
		_node.Mode = value
	}
	if value, ok := ec.mutation.GetType(); ok {
		_spec.SetField(exchange.FieldType, field.TypeUint32, value)
		_node.Type = value
	}
	if value, ok := ec.mutation.CoinNum(); ok {
		_spec.SetField(exchange.FieldCoinNum, field.TypeUint32, value)
		_node.CoinNum = value
	}
	if value, ok := ec.mutation.LampNum(); ok {
		_spec.SetField(exchange.FieldLampNum, field.TypeUint32, value)
		_node.LampNum = value
	}
	if value, ok := ec.mutation.GcicsOrderID(); ok {
		_spec.SetField(exchange.FieldGcicsOrderID, field.TypeString, value)
		_node.GcicsOrderID = value
	}
	if value, ok := ec.mutation.Remark(); ok {
		_spec.SetField(exchange.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// ExchangeCreateBulk is the builder for creating many Exchange entities in bulk.
type ExchangeCreateBulk struct {
	config
	err      error
	builders []*ExchangeCreate
}

// Save creates the Exchange entities in the database.
func (ecb *ExchangeCreateBulk) Save(ctx context.Context) ([]*Exchange, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exchange, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExchangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExchangeCreateBulk) SaveX(ctx context.Context) []*Exchange {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExchangeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExchangeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
