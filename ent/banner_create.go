// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/kebin6/wolflamp-rpc/ent/banner"
	"github.com/kebin6/wolflamp-rpc/ent/file"
)

// BannerCreate is the builder for creating a Banner entity.
type BannerCreate struct {
	config
	mutation *BannerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BannerCreate) SetCreatedAt(t time.Time) *BannerCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BannerCreate) SetNillableCreatedAt(t *time.Time) *BannerCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BannerCreate) SetUpdatedAt(t time.Time) *BannerCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BannerCreate) SetNillableUpdatedAt(t *time.Time) *BannerCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BannerCreate) SetStatus(u uint8) *BannerCreate {
	bc.mutation.SetStatus(u)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BannerCreate) SetNillableStatus(u *uint8) *BannerCreate {
	if u != nil {
		bc.SetStatus(*u)
	}
	return bc
}

// SetEndpoint sets the "endpoint" field.
func (bc *BannerCreate) SetEndpoint(s string) *BannerCreate {
	bc.mutation.SetEndpoint(s)
	return bc
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (bc *BannerCreate) SetNillableEndpoint(s *string) *BannerCreate {
	if s != nil {
		bc.SetEndpoint(*s)
	}
	return bc
}

// SetModule sets the "module" field.
func (bc *BannerCreate) SetModule(s string) *BannerCreate {
	bc.mutation.SetModule(s)
	return bc
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (bc *BannerCreate) SetNillableModule(s *string) *BannerCreate {
	if s != nil {
		bc.SetModule(*s)
	}
	return bc
}

// SetFileType sets the "file_type" field.
func (bc *BannerCreate) SetFileType(u uint8) *BannerCreate {
	bc.mutation.SetFileType(u)
	return bc
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (bc *BannerCreate) SetNillableFileType(u *uint8) *BannerCreate {
	if u != nil {
		bc.SetFileType(*u)
	}
	return bc
}

// SetPath sets the "path" field.
func (bc *BannerCreate) SetPath(s string) *BannerCreate {
	bc.mutation.SetPath(s)
	return bc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (bc *BannerCreate) SetNillablePath(s *string) *BannerCreate {
	if s != nil {
		bc.SetPath(*s)
	}
	return bc
}

// SetJumpURL sets the "jump_url" field.
func (bc *BannerCreate) SetJumpURL(s string) *BannerCreate {
	bc.mutation.SetJumpURL(s)
	return bc
}

// SetNillableJumpURL sets the "jump_url" field if the given value is not nil.
func (bc *BannerCreate) SetNillableJumpURL(s *string) *BannerCreate {
	if s != nil {
		bc.SetJumpURL(*s)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BannerCreate) SetID(u uint64) *BannerCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetFileID sets the "file" edge to the File entity by ID.
func (bc *BannerCreate) SetFileID(id uuid.UUID) *BannerCreate {
	bc.mutation.SetFileID(id)
	return bc
}

// SetFile sets the "file" edge to the File entity.
func (bc *BannerCreate) SetFile(f *File) *BannerCreate {
	return bc.SetFileID(f.ID)
}

// Mutation returns the BannerMutation object of the builder.
func (bc *BannerCreate) Mutation() *BannerMutation {
	return bc.mutation
}

// Save creates the Banner in the database.
func (bc *BannerCreate) Save(ctx context.Context) (*Banner, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BannerCreate) SaveX(ctx context.Context) *Banner {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BannerCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BannerCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BannerCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := banner.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := banner.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.Status(); !ok {
		v := banner.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.Endpoint(); !ok {
		v := banner.DefaultEndpoint
		bc.mutation.SetEndpoint(v)
	}
	if _, ok := bc.mutation.Module(); !ok {
		v := banner.DefaultModule
		bc.mutation.SetModule(v)
	}
	if _, ok := bc.mutation.FileType(); !ok {
		v := banner.DefaultFileType
		bc.mutation.SetFileType(v)
	}
	if _, ok := bc.mutation.Path(); !ok {
		v := banner.DefaultPath
		bc.mutation.SetPath(v)
	}
	if _, ok := bc.mutation.JumpURL(); !ok {
		v := banner.DefaultJumpURL
		bc.mutation.SetJumpURL(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BannerCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Banner.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Banner.updated_at"`)}
	}
	if _, ok := bc.mutation.Endpoint(); !ok {
		return &ValidationError{Name: "endpoint", err: errors.New(`ent: missing required field "Banner.endpoint"`)}
	}
	if _, ok := bc.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`ent: missing required field "Banner.module"`)}
	}
	if _, ok := bc.mutation.FileType(); !ok {
		return &ValidationError{Name: "file_type", err: errors.New(`ent: missing required field "Banner.file_type"`)}
	}
	if _, ok := bc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Banner.path"`)}
	}
	if _, ok := bc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "Banner.file"`)}
	}
	return nil
}

func (bc *BannerCreate) sqlSave(ctx context.Context) (*Banner, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BannerCreate) createSpec() (*Banner, *sqlgraph.CreateSpec) {
	var (
		_node = &Banner{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(banner.Table, sqlgraph.NewFieldSpec(banner.FieldID, field.TypeUint64))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(banner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(banner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.Endpoint(); ok {
		_spec.SetField(banner.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := bc.mutation.Module(); ok {
		_spec.SetField(banner.FieldModule, field.TypeString, value)
		_node.Module = value
	}
	if value, ok := bc.mutation.FileType(); ok {
		_spec.SetField(banner.FieldFileType, field.TypeUint8, value)
		_node.FileType = value
	}
	if value, ok := bc.mutation.Path(); ok {
		_spec.SetField(banner.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := bc.mutation.JumpURL(); ok {
		_spec.SetField(banner.FieldJumpURL, field.TypeString, value)
		_node.JumpURL = value
	}
	if nodes := bc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   banner.FileTable,
			Columns: []string{banner.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BannerCreateBulk is the builder for creating many Banner entities in bulk.
type BannerCreateBulk struct {
	config
	err      error
	builders []*BannerCreate
}

// Save creates the Banner entities in the database.
func (bcb *BannerCreateBulk) Save(ctx context.Context) ([]*Banner, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Banner, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BannerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BannerCreateBulk) SaveX(ctx context.Context) []*Banner {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BannerCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BannerCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
