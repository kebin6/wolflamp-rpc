// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kebin6/wolflamp-rpc/ent/pool"
)

// 资金池表
type Pool struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// 回合ID
	RoundID uint64 `json:"round_id,omitempty"`
	// mode | 交易币种：coin,token
	Mode string `json:"mode,omitempty"`
	// type | 池类型：1=机器人资金池；2=奖金蓄水池；3=其他
	Type uint32 `json:"type,omitempty"`
	// lamp amount | 羊数量
	LambNum float64 `json:"lamb_num,omitempty"`
	// 备注
	Remark       string `json:"remark,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pool) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pool.FieldLambNum:
			values[i] = new(sql.NullFloat64)
		case pool.FieldID, pool.FieldStatus, pool.FieldRoundID, pool.FieldType:
			values[i] = new(sql.NullInt64)
		case pool.FieldMode, pool.FieldRemark:
			values[i] = new(sql.NullString)
		case pool.FieldCreatedAt, pool.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pool fields.
func (po *Pool) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pool.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = uint64(value.Int64)
		case pool.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case pool.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case pool.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				po.Status = uint8(value.Int64)
			}
		case pool.FieldRoundID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field round_id", values[i])
			} else if value.Valid {
				po.RoundID = uint64(value.Int64)
			}
		case pool.FieldMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mode", values[i])
			} else if value.Valid {
				po.Mode = value.String
			}
		case pool.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				po.Type = uint32(value.Int64)
			}
		case pool.FieldLambNum:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lamb_num", values[i])
			} else if value.Valid {
				po.LambNum = value.Float64
			}
		case pool.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				po.Remark = value.String
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pool.
// This includes values selected through modifiers, order, etc.
func (po *Pool) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// Update returns a builder for updating this Pool.
// Note that you need to call Pool.Unwrap() before calling this method if this Pool
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Pool) Update() *PoolUpdateOne {
	return NewPoolClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Pool entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Pool) Unwrap() *Pool {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pool is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Pool) String() string {
	var builder strings.Builder
	builder.WriteString("Pool(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", po.Status))
	builder.WriteString(", ")
	builder.WriteString("round_id=")
	builder.WriteString(fmt.Sprintf("%v", po.RoundID))
	builder.WriteString(", ")
	builder.WriteString("mode=")
	builder.WriteString(po.Mode)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", po.Type))
	builder.WriteString(", ")
	builder.WriteString("lamb_num=")
	builder.WriteString(fmt.Sprintf("%v", po.LambNum))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(po.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// Pools is a parsable slice of Pool.
type Pools []*Pool
