// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
	"github.com/kebin6/wolflamp-rpc/ent/reward"
)

// RewardUpdate is the builder for updating Reward entities.
type RewardUpdate struct {
	config
	hooks    []Hook
	mutation *RewardMutation
}

// Where appends a list predicates to the RewardUpdate builder.
func (ru *RewardUpdate) Where(ps ...predicate.Reward) *RewardUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RewardUpdate) SetUpdatedAt(t time.Time) *RewardUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetStatus sets the "status" field.
func (ru *RewardUpdate) SetStatus(u uint8) *RewardUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(u)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableStatus(u *uint8) *RewardUpdate {
	if u != nil {
		ru.SetStatus(*u)
	}
	return ru
}

// AddStatus adds u to the "status" field.
func (ru *RewardUpdate) AddStatus(u int8) *RewardUpdate {
	ru.mutation.AddStatus(u)
	return ru
}

// ClearStatus clears the value of the "status" field.
func (ru *RewardUpdate) ClearStatus() *RewardUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetToID sets the "to_id" field.
func (ru *RewardUpdate) SetToID(u uint64) *RewardUpdate {
	ru.mutation.ResetToID()
	ru.mutation.SetToID(u)
	return ru
}

// SetNillableToID sets the "to_id" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableToID(u *uint64) *RewardUpdate {
	if u != nil {
		ru.SetToID(*u)
	}
	return ru
}

// AddToID adds u to the "to_id" field.
func (ru *RewardUpdate) AddToID(u int64) *RewardUpdate {
	ru.mutation.AddToID(u)
	return ru
}

// SetContributorID sets the "contributor_id" field.
func (ru *RewardUpdate) SetContributorID(u uint64) *RewardUpdate {
	ru.mutation.ResetContributorID()
	ru.mutation.SetContributorID(u)
	return ru
}

// SetNillableContributorID sets the "contributor_id" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableContributorID(u *uint64) *RewardUpdate {
	if u != nil {
		ru.SetContributorID(*u)
	}
	return ru
}

// AddContributorID adds u to the "contributor_id" field.
func (ru *RewardUpdate) AddContributorID(u int64) *RewardUpdate {
	ru.mutation.AddContributorID(u)
	return ru
}

// SetContributorEmail sets the "contributor_email" field.
func (ru *RewardUpdate) SetContributorEmail(s string) *RewardUpdate {
	ru.mutation.SetContributorEmail(s)
	return ru
}

// SetNillableContributorEmail sets the "contributor_email" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableContributorEmail(s *string) *RewardUpdate {
	if s != nil {
		ru.SetContributorEmail(*s)
	}
	return ru
}

// SetContributorLevel sets the "contributor_level" field.
func (ru *RewardUpdate) SetContributorLevel(u uint32) *RewardUpdate {
	ru.mutation.ResetContributorLevel()
	ru.mutation.SetContributorLevel(u)
	return ru
}

// SetNillableContributorLevel sets the "contributor_level" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableContributorLevel(u *uint32) *RewardUpdate {
	if u != nil {
		ru.SetContributorLevel(*u)
	}
	return ru
}

// AddContributorLevel adds u to the "contributor_level" field.
func (ru *RewardUpdate) AddContributorLevel(u int32) *RewardUpdate {
	ru.mutation.AddContributorLevel(u)
	return ru
}

// SetNum sets the "num" field.
func (ru *RewardUpdate) SetNum(f float32) *RewardUpdate {
	ru.mutation.ResetNum()
	ru.mutation.SetNum(f)
	return ru
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableNum(f *float32) *RewardUpdate {
	if f != nil {
		ru.SetNum(*f)
	}
	return ru
}

// AddNum adds f to the "num" field.
func (ru *RewardUpdate) AddNum(f float32) *RewardUpdate {
	ru.mutation.AddNum(f)
	return ru
}

// SetFormula sets the "formula" field.
func (ru *RewardUpdate) SetFormula(s string) *RewardUpdate {
	ru.mutation.SetFormula(s)
	return ru
}

// SetNillableFormula sets the "formula" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableFormula(s *string) *RewardUpdate {
	if s != nil {
		ru.SetFormula(*s)
	}
	return ru
}

// SetRemark sets the "remark" field.
func (ru *RewardUpdate) SetRemark(s string) *RewardUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableRemark(s *string) *RewardUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// Mutation returns the RewardMutation object of the builder.
func (ru *RewardUpdate) Mutation() *RewardMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RewardUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RewardUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RewardUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RewardUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RewardUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := reward.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

func (ru *RewardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reward.Table, reward.Columns, sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(reward.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(reward.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.AddField(reward.FieldStatus, field.TypeUint8, value)
	}
	if ru.mutation.StatusCleared() {
		_spec.ClearField(reward.FieldStatus, field.TypeUint8)
	}
	if value, ok := ru.mutation.ToID(); ok {
		_spec.SetField(reward.FieldToID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedToID(); ok {
		_spec.AddField(reward.FieldToID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.ContributorID(); ok {
		_spec.SetField(reward.FieldContributorID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedContributorID(); ok {
		_spec.AddField(reward.FieldContributorID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.ContributorEmail(); ok {
		_spec.SetField(reward.FieldContributorEmail, field.TypeString, value)
	}
	if value, ok := ru.mutation.ContributorLevel(); ok {
		_spec.SetField(reward.FieldContributorLevel, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.AddedContributorLevel(); ok {
		_spec.AddField(reward.FieldContributorLevel, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.Num(); ok {
		_spec.SetField(reward.FieldNum, field.TypeFloat32, value)
	}
	if value, ok := ru.mutation.AddedNum(); ok {
		_spec.AddField(reward.FieldNum, field.TypeFloat32, value)
	}
	if value, ok := ru.mutation.Formula(); ok {
		_spec.SetField(reward.FieldFormula, field.TypeString, value)
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.SetField(reward.FieldRemark, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RewardUpdateOne is the builder for updating a single Reward entity.
type RewardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RewardMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RewardUpdateOne) SetUpdatedAt(t time.Time) *RewardUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RewardUpdateOne) SetStatus(u uint8) *RewardUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(u)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableStatus(u *uint8) *RewardUpdateOne {
	if u != nil {
		ruo.SetStatus(*u)
	}
	return ruo
}

// AddStatus adds u to the "status" field.
func (ruo *RewardUpdateOne) AddStatus(u int8) *RewardUpdateOne {
	ruo.mutation.AddStatus(u)
	return ruo
}

// ClearStatus clears the value of the "status" field.
func (ruo *RewardUpdateOne) ClearStatus() *RewardUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetToID sets the "to_id" field.
func (ruo *RewardUpdateOne) SetToID(u uint64) *RewardUpdateOne {
	ruo.mutation.ResetToID()
	ruo.mutation.SetToID(u)
	return ruo
}

// SetNillableToID sets the "to_id" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableToID(u *uint64) *RewardUpdateOne {
	if u != nil {
		ruo.SetToID(*u)
	}
	return ruo
}

// AddToID adds u to the "to_id" field.
func (ruo *RewardUpdateOne) AddToID(u int64) *RewardUpdateOne {
	ruo.mutation.AddToID(u)
	return ruo
}

// SetContributorID sets the "contributor_id" field.
func (ruo *RewardUpdateOne) SetContributorID(u uint64) *RewardUpdateOne {
	ruo.mutation.ResetContributorID()
	ruo.mutation.SetContributorID(u)
	return ruo
}

// SetNillableContributorID sets the "contributor_id" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableContributorID(u *uint64) *RewardUpdateOne {
	if u != nil {
		ruo.SetContributorID(*u)
	}
	return ruo
}

// AddContributorID adds u to the "contributor_id" field.
func (ruo *RewardUpdateOne) AddContributorID(u int64) *RewardUpdateOne {
	ruo.mutation.AddContributorID(u)
	return ruo
}

// SetContributorEmail sets the "contributor_email" field.
func (ruo *RewardUpdateOne) SetContributorEmail(s string) *RewardUpdateOne {
	ruo.mutation.SetContributorEmail(s)
	return ruo
}

// SetNillableContributorEmail sets the "contributor_email" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableContributorEmail(s *string) *RewardUpdateOne {
	if s != nil {
		ruo.SetContributorEmail(*s)
	}
	return ruo
}

// SetContributorLevel sets the "contributor_level" field.
func (ruo *RewardUpdateOne) SetContributorLevel(u uint32) *RewardUpdateOne {
	ruo.mutation.ResetContributorLevel()
	ruo.mutation.SetContributorLevel(u)
	return ruo
}

// SetNillableContributorLevel sets the "contributor_level" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableContributorLevel(u *uint32) *RewardUpdateOne {
	if u != nil {
		ruo.SetContributorLevel(*u)
	}
	return ruo
}

// AddContributorLevel adds u to the "contributor_level" field.
func (ruo *RewardUpdateOne) AddContributorLevel(u int32) *RewardUpdateOne {
	ruo.mutation.AddContributorLevel(u)
	return ruo
}

// SetNum sets the "num" field.
func (ruo *RewardUpdateOne) SetNum(f float32) *RewardUpdateOne {
	ruo.mutation.ResetNum()
	ruo.mutation.SetNum(f)
	return ruo
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableNum(f *float32) *RewardUpdateOne {
	if f != nil {
		ruo.SetNum(*f)
	}
	return ruo
}

// AddNum adds f to the "num" field.
func (ruo *RewardUpdateOne) AddNum(f float32) *RewardUpdateOne {
	ruo.mutation.AddNum(f)
	return ruo
}

// SetFormula sets the "formula" field.
func (ruo *RewardUpdateOne) SetFormula(s string) *RewardUpdateOne {
	ruo.mutation.SetFormula(s)
	return ruo
}

// SetNillableFormula sets the "formula" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableFormula(s *string) *RewardUpdateOne {
	if s != nil {
		ruo.SetFormula(*s)
	}
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *RewardUpdateOne) SetRemark(s string) *RewardUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableRemark(s *string) *RewardUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// Mutation returns the RewardMutation object of the builder.
func (ruo *RewardUpdateOne) Mutation() *RewardMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RewardUpdate builder.
func (ruo *RewardUpdateOne) Where(ps ...predicate.Reward) *RewardUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RewardUpdateOne) Select(field string, fields ...string) *RewardUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reward entity.
func (ruo *RewardUpdateOne) Save(ctx context.Context) (*Reward, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RewardUpdateOne) SaveX(ctx context.Context) *Reward {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RewardUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RewardUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RewardUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := reward.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

func (ruo *RewardUpdateOne) sqlSave(ctx context.Context) (_node *Reward, err error) {
	_spec := sqlgraph.NewUpdateSpec(reward.Table, reward.Columns, sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reward.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reward.FieldID)
		for _, f := range fields {
			if !reward.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reward.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(reward.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(reward.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.AddField(reward.FieldStatus, field.TypeUint8, value)
	}
	if ruo.mutation.StatusCleared() {
		_spec.ClearField(reward.FieldStatus, field.TypeUint8)
	}
	if value, ok := ruo.mutation.ToID(); ok {
		_spec.SetField(reward.FieldToID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedToID(); ok {
		_spec.AddField(reward.FieldToID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.ContributorID(); ok {
		_spec.SetField(reward.FieldContributorID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedContributorID(); ok {
		_spec.AddField(reward.FieldContributorID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.ContributorEmail(); ok {
		_spec.SetField(reward.FieldContributorEmail, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ContributorLevel(); ok {
		_spec.SetField(reward.FieldContributorLevel, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.AddedContributorLevel(); ok {
		_spec.AddField(reward.FieldContributorLevel, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.Num(); ok {
		_spec.SetField(reward.FieldNum, field.TypeFloat32, value)
	}
	if value, ok := ruo.mutation.AddedNum(); ok {
		_spec.AddField(reward.FieldNum, field.TypeFloat32, value)
	}
	if value, ok := ruo.mutation.Formula(); ok {
		_spec.SetField(reward.FieldFormula, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.SetField(reward.FieldRemark, field.TypeString, value)
	}
	_node = &Reward{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
