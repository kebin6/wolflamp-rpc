// Code generated by ent, DO NOT EDIT.

package roundlambfold

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the roundlambfold type in the database.
	Label = "round_lamb_fold"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFoldNo holds the string denoting the fold_no field in the database.
	FieldFoldNo = "fold_no"
	// FieldLambNum holds the string denoting the lamb_num field in the database.
	FieldLambNum = "lamb_num"
	// FieldRoundID holds the string denoting the round_id field in the database.
	FieldRoundID = "round_id"
	// FieldProfitAndLoss holds the string denoting the profit_and_loss field in the database.
	FieldProfitAndLoss = "profit_and_loss"
	// FieldRoundCount holds the string denoting the round_count field in the database.
	FieldRoundCount = "round_count"
	// FieldTotalRoundCount holds the string denoting the total_round_count field in the database.
	FieldTotalRoundCount = "total_round_count"
	// EdgeRound holds the string denoting the round edge name in mutations.
	EdgeRound = "round"
	// Table holds the table name of the roundlambfold in the database.
	Table = "wl_round_lamb_fold"
	// RoundTable is the table that holds the round relation/edge.
	RoundTable = "wl_round_lamb_fold"
	// RoundInverseTable is the table name for the Round entity.
	// It exists in this package in order to avoid circular dependency with the "round" package.
	RoundInverseTable = "wl_round"
	// RoundColumn is the table column denoting the round relation/edge.
	RoundColumn = "round_id"
)

// Columns holds all SQL columns for roundlambfold fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFoldNo,
	FieldLambNum,
	FieldRoundID,
	FieldProfitAndLoss,
	FieldRoundCount,
	FieldTotalRoundCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultFoldNo holds the default value on creation for the "fold_no" field.
	DefaultFoldNo uint32
	// DefaultLambNum holds the default value on creation for the "lamb_num" field.
	DefaultLambNum uint32
	// DefaultRoundID holds the default value on creation for the "round_id" field.
	DefaultRoundID uint64
	// DefaultProfitAndLoss holds the default value on creation for the "profit_and_loss" field.
	DefaultProfitAndLoss float32
	// DefaultRoundCount holds the default value on creation for the "round_count" field.
	DefaultRoundCount uint32
	// DefaultTotalRoundCount holds the default value on creation for the "total_round_count" field.
	DefaultTotalRoundCount uint64
)

// OrderOption defines the ordering options for the RoundLambFold queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFoldNo orders the results by the fold_no field.
func ByFoldNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFoldNo, opts...).ToFunc()
}

// ByLambNum orders the results by the lamb_num field.
func ByLambNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLambNum, opts...).ToFunc()
}

// ByRoundID orders the results by the round_id field.
func ByRoundID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoundID, opts...).ToFunc()
}

// ByProfitAndLoss orders the results by the profit_and_loss field.
func ByProfitAndLoss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfitAndLoss, opts...).ToFunc()
}

// ByRoundCount orders the results by the round_count field.
func ByRoundCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoundCount, opts...).ToFunc()
}

// ByTotalRoundCount orders the results by the total_round_count field.
func ByTotalRoundCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalRoundCount, opts...).ToFunc()
}

// ByRoundField orders the results by round field.
func ByRoundField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoundStep(), sql.OrderByField(field, opts...))
	}
}
func newRoundStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoundInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoundTable, RoundColumn),
	)
}
