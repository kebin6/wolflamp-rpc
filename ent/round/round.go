// Code generated by ent, DO NOT EDIT.

package round

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the round type in the database.
	Label = "round"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRoundCount holds the string denoting the round_count field in the database.
	FieldRoundCount = "round_count"
	// FieldTotalRoundCount holds the string denoting the total_round_count field in the database.
	FieldTotalRoundCount = "total_round_count"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldOpenAt holds the string denoting the open_at field in the database.
	FieldOpenAt = "open_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldSelectedFold holds the string denoting the selected_fold field in the database.
	FieldSelectedFold = "selected_fold"
	// EdgeFold holds the string denoting the fold edge name in mutations.
	EdgeFold = "fold"
	// EdgeInvest holds the string denoting the invest edge name in mutations.
	EdgeInvest = "invest"
	// Table holds the table name of the round in the database.
	Table = "wl_round"
	// FoldTable is the table that holds the fold relation/edge.
	FoldTable = "wl_round_lamb_fold"
	// FoldInverseTable is the table name for the RoundLambFold entity.
	// It exists in this package in order to avoid circular dependency with the "roundlambfold" package.
	FoldInverseTable = "wl_round_lamb_fold"
	// FoldColumn is the table column denoting the fold relation/edge.
	FoldColumn = "round_id"
	// InvestTable is the table that holds the invest relation/edge.
	InvestTable = "wl_round_invest"
	// InvestInverseTable is the table name for the RoundInvest entity.
	// It exists in this package in order to avoid circular dependency with the "roundinvest" package.
	InvestInverseTable = "wl_round_invest"
	// InvestColumn is the table column denoting the invest relation/edge.
	InvestColumn = "round_id"
)

// Columns holds all SQL columns for round fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldRoundCount,
	FieldTotalRoundCount,
	FieldStartAt,
	FieldOpenAt,
	FieldEndAt,
	FieldSelectedFold,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultTotalRoundCount holds the default value on creation for the "total_round_count" field.
	DefaultTotalRoundCount uint64
	// DefaultSelectedFold holds the default value on creation for the "selected_fold" field.
	DefaultSelectedFold uint32
)

// OrderOption defines the ordering options for the Round queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRoundCount orders the results by the round_count field.
func ByRoundCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoundCount, opts...).ToFunc()
}

// ByTotalRoundCount orders the results by the total_round_count field.
func ByTotalRoundCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalRoundCount, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByOpenAt orders the results by the open_at field.
func ByOpenAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpenAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// BySelectedFold orders the results by the selected_fold field.
func BySelectedFold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelectedFold, opts...).ToFunc()
}

// ByFoldCount orders the results by fold count.
func ByFoldCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFoldStep(), opts...)
	}
}

// ByFold orders the results by fold terms.
func ByFold(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFoldStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvestCount orders the results by invest count.
func ByInvestCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvestStep(), opts...)
	}
}

// ByInvest orders the results by invest terms.
func ByInvest(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvestStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFoldStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FoldInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FoldTable, FoldColumn),
	)
}
func newInvestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvestTable, InvestColumn),
	)
}
