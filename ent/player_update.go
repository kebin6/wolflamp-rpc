// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/player"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
)

// PlayerUpdate is the builder for updating Player entities.
type PlayerUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerMutation
}

// Where appends a list predicates to the PlayerUpdate builder.
func (pu *PlayerUpdate) Where(ps ...predicate.Player) *PlayerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlayerUpdate) SetUpdatedAt(t time.Time) *PlayerUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetStatus sets the "status" field.
func (pu *PlayerUpdate) SetStatus(u uint8) *PlayerUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(u)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableStatus(u *uint8) *PlayerUpdate {
	if u != nil {
		pu.SetStatus(*u)
	}
	return pu
}

// AddStatus adds u to the "status" field.
func (pu *PlayerUpdate) AddStatus(u int8) *PlayerUpdate {
	pu.mutation.AddStatus(u)
	return pu
}

// ClearStatus clears the value of the "status" field.
func (pu *PlayerUpdate) ClearStatus() *PlayerUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// SetName sets the "name" field.
func (pu *PlayerUpdate) SetName(s string) *PlayerUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableName(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetEmail sets the "email" field.
func (pu *PlayerUpdate) SetEmail(s string) *PlayerUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableEmail(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// SetPassword sets the "password" field.
func (pu *PlayerUpdate) SetPassword(s string) *PlayerUpdate {
	pu.mutation.SetPassword(s)
	return pu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillablePassword(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetPassword(*s)
	}
	return pu
}

// SetTransactionPassword sets the "transaction_password" field.
func (pu *PlayerUpdate) SetTransactionPassword(s string) *PlayerUpdate {
	pu.mutation.SetTransactionPassword(s)
	return pu
}

// SetNillableTransactionPassword sets the "transaction_password" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableTransactionPassword(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetTransactionPassword(*s)
	}
	return pu
}

// SetCoinLamb sets the "coin_lamb" field.
func (pu *PlayerUpdate) SetCoinLamb(f float32) *PlayerUpdate {
	pu.mutation.ResetCoinLamb()
	pu.mutation.SetCoinLamb(f)
	return pu
}

// SetNillableCoinLamb sets the "coin_lamb" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableCoinLamb(f *float32) *PlayerUpdate {
	if f != nil {
		pu.SetCoinLamb(*f)
	}
	return pu
}

// AddCoinLamb adds f to the "coin_lamb" field.
func (pu *PlayerUpdate) AddCoinLamb(f float32) *PlayerUpdate {
	pu.mutation.AddCoinLamb(f)
	return pu
}

// SetTokenLamb sets the "token_lamb" field.
func (pu *PlayerUpdate) SetTokenLamb(f float32) *PlayerUpdate {
	pu.mutation.ResetTokenLamb()
	pu.mutation.SetTokenLamb(f)
	return pu
}

// SetNillableTokenLamb sets the "token_lamb" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableTokenLamb(f *float32) *PlayerUpdate {
	if f != nil {
		pu.SetTokenLamb(*f)
	}
	return pu
}

// AddTokenLamb adds f to the "token_lamb" field.
func (pu *PlayerUpdate) AddTokenLamb(f float32) *PlayerUpdate {
	pu.mutation.AddTokenLamb(f)
	return pu
}

// SetRank sets the "rank" field.
func (pu *PlayerUpdate) SetRank(u uint32) *PlayerUpdate {
	pu.mutation.ResetRank()
	pu.mutation.SetRank(u)
	return pu
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableRank(u *uint32) *PlayerUpdate {
	if u != nil {
		pu.SetRank(*u)
	}
	return pu
}

// AddRank adds u to the "rank" field.
func (pu *PlayerUpdate) AddRank(u int32) *PlayerUpdate {
	pu.mutation.AddRank(u)
	return pu
}

// SetAmount sets the "amount" field.
func (pu *PlayerUpdate) SetAmount(f float64) *PlayerUpdate {
	pu.mutation.ResetAmount()
	pu.mutation.SetAmount(f)
	return pu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableAmount(f *float64) *PlayerUpdate {
	if f != nil {
		pu.SetAmount(*f)
	}
	return pu
}

// AddAmount adds f to the "amount" field.
func (pu *PlayerUpdate) AddAmount(f float64) *PlayerUpdate {
	pu.mutation.AddAmount(f)
	return pu
}

// SetDepositAddress sets the "deposit_address" field.
func (pu *PlayerUpdate) SetDepositAddress(s string) *PlayerUpdate {
	pu.mutation.SetDepositAddress(s)
	return pu
}

// SetNillableDepositAddress sets the "deposit_address" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableDepositAddress(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetDepositAddress(*s)
	}
	return pu
}

// SetInvitedNum sets the "invited_num" field.
func (pu *PlayerUpdate) SetInvitedNum(u uint32) *PlayerUpdate {
	pu.mutation.ResetInvitedNum()
	pu.mutation.SetInvitedNum(u)
	return pu
}

// SetNillableInvitedNum sets the "invited_num" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableInvitedNum(u *uint32) *PlayerUpdate {
	if u != nil {
		pu.SetInvitedNum(*u)
	}
	return pu
}

// AddInvitedNum adds u to the "invited_num" field.
func (pu *PlayerUpdate) AddInvitedNum(u int32) *PlayerUpdate {
	pu.mutation.AddInvitedNum(u)
	return pu
}

// SetTotalIncome sets the "total_income" field.
func (pu *PlayerUpdate) SetTotalIncome(f float64) *PlayerUpdate {
	pu.mutation.ResetTotalIncome()
	pu.mutation.SetTotalIncome(f)
	return pu
}

// SetNillableTotalIncome sets the "total_income" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableTotalIncome(f *float64) *PlayerUpdate {
	if f != nil {
		pu.SetTotalIncome(*f)
	}
	return pu
}

// AddTotalIncome adds f to the "total_income" field.
func (pu *PlayerUpdate) AddTotalIncome(f float64) *PlayerUpdate {
	pu.mutation.AddTotalIncome(f)
	return pu
}

// SetProfitAndLoss sets the "profit_and_loss" field.
func (pu *PlayerUpdate) SetProfitAndLoss(f float32) *PlayerUpdate {
	pu.mutation.ResetProfitAndLoss()
	pu.mutation.SetProfitAndLoss(f)
	return pu
}

// SetNillableProfitAndLoss sets the "profit_and_loss" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableProfitAndLoss(f *float32) *PlayerUpdate {
	if f != nil {
		pu.SetProfitAndLoss(*f)
	}
	return pu
}

// AddProfitAndLoss adds f to the "profit_and_loss" field.
func (pu *PlayerUpdate) AddProfitAndLoss(f float32) *PlayerUpdate {
	pu.mutation.AddProfitAndLoss(f)
	return pu
}

// SetInviteCode sets the "invite_code" field.
func (pu *PlayerUpdate) SetInviteCode(s string) *PlayerUpdate {
	pu.mutation.SetInviteCode(s)
	return pu
}

// SetNillableInviteCode sets the "invite_code" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableInviteCode(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetInviteCode(*s)
	}
	return pu
}

// SetInviterID sets the "inviter_id" field.
func (pu *PlayerUpdate) SetInviterID(u uint64) *PlayerUpdate {
	pu.mutation.SetInviterID(u)
	return pu
}

// SetNillableInviterID sets the "inviter_id" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableInviterID(u *uint64) *PlayerUpdate {
	if u != nil {
		pu.SetInviterID(*u)
	}
	return pu
}

// ClearInviterID clears the value of the "inviter_id" field.
func (pu *PlayerUpdate) ClearInviterID() *PlayerUpdate {
	pu.mutation.ClearInviterID()
	return pu
}

// SetInvitedCode sets the "invited_code" field.
func (pu *PlayerUpdate) SetInvitedCode(s string) *PlayerUpdate {
	pu.mutation.SetInvitedCode(s)
	return pu
}

// SetNillableInvitedCode sets the "invited_code" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableInvitedCode(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetInvitedCode(*s)
	}
	return pu
}

// SetSystemCommission sets the "system_commission" field.
func (pu *PlayerUpdate) SetSystemCommission(f float32) *PlayerUpdate {
	pu.mutation.ResetSystemCommission()
	pu.mutation.SetSystemCommission(f)
	return pu
}

// SetNillableSystemCommission sets the "system_commission" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableSystemCommission(f *float32) *PlayerUpdate {
	if f != nil {
		pu.SetSystemCommission(*f)
	}
	return pu
}

// AddSystemCommission adds f to the "system_commission" field.
func (pu *PlayerUpdate) AddSystemCommission(f float32) *PlayerUpdate {
	pu.mutation.AddSystemCommission(f)
	return pu
}

// SetGcicsUserID sets the "gcics_user_id" field.
func (pu *PlayerUpdate) SetGcicsUserID(u uint64) *PlayerUpdate {
	pu.mutation.ResetGcicsUserID()
	pu.mutation.SetGcicsUserID(u)
	return pu
}

// SetNillableGcicsUserID sets the "gcics_user_id" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableGcicsUserID(u *uint64) *PlayerUpdate {
	if u != nil {
		pu.SetGcicsUserID(*u)
	}
	return pu
}

// AddGcicsUserID adds u to the "gcics_user_id" field.
func (pu *PlayerUpdate) AddGcicsUserID(u int64) *PlayerUpdate {
	pu.mutation.AddGcicsUserID(u)
	return pu
}

// SetGcicsToken sets the "gcics_token" field.
func (pu *PlayerUpdate) SetGcicsToken(s string) *PlayerUpdate {
	pu.mutation.SetGcicsToken(s)
	return pu
}

// SetNillableGcicsToken sets the "gcics_token" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableGcicsToken(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetGcicsToken(*s)
	}
	return pu
}

// SetGcicsReturnURL sets the "gcics_return_url" field.
func (pu *PlayerUpdate) SetGcicsReturnURL(s string) *PlayerUpdate {
	pu.mutation.SetGcicsReturnURL(s)
	return pu
}

// SetNillableGcicsReturnURL sets the "gcics_return_url" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableGcicsReturnURL(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetGcicsReturnURL(*s)
	}
	return pu
}

// SetInviter sets the "inviter" edge to the Player entity.
func (pu *PlayerUpdate) SetInviter(p *Player) *PlayerUpdate {
	return pu.SetInviterID(p.ID)
}

// AddInviteeIDs adds the "invitees" edge to the Player entity by IDs.
func (pu *PlayerUpdate) AddInviteeIDs(ids ...uint64) *PlayerUpdate {
	pu.mutation.AddInviteeIDs(ids...)
	return pu
}

// AddInvitees adds the "invitees" edges to the Player entity.
func (pu *PlayerUpdate) AddInvitees(p ...*Player) *PlayerUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddInviteeIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (pu *PlayerUpdate) Mutation() *PlayerMutation {
	return pu.mutation
}

// ClearInviter clears the "inviter" edge to the Player entity.
func (pu *PlayerUpdate) ClearInviter() *PlayerUpdate {
	pu.mutation.ClearInviter()
	return pu
}

// ClearInvitees clears all "invitees" edges to the Player entity.
func (pu *PlayerUpdate) ClearInvitees() *PlayerUpdate {
	pu.mutation.ClearInvitees()
	return pu
}

// RemoveInviteeIDs removes the "invitees" edge to Player entities by IDs.
func (pu *PlayerUpdate) RemoveInviteeIDs(ids ...uint64) *PlayerUpdate {
	pu.mutation.RemoveInviteeIDs(ids...)
	return pu
}

// RemoveInvitees removes "invitees" edges to Player entities.
func (pu *PlayerUpdate) RemoveInvitees(p ...*Player) *PlayerUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveInviteeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlayerUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlayerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlayerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlayerUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := player.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *PlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(player.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(player.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(player.FieldStatus, field.TypeUint8, value)
	}
	if pu.mutation.StatusCleared() {
		_spec.ClearField(player.FieldStatus, field.TypeUint8)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(player.FieldEmail, field.TypeString, value)
	}
	if value, ok := pu.mutation.Password(); ok {
		_spec.SetField(player.FieldPassword, field.TypeString, value)
	}
	if value, ok := pu.mutation.TransactionPassword(); ok {
		_spec.SetField(player.FieldTransactionPassword, field.TypeString, value)
	}
	if value, ok := pu.mutation.CoinLamb(); ok {
		_spec.SetField(player.FieldCoinLamb, field.TypeFloat32, value)
	}
	if value, ok := pu.mutation.AddedCoinLamb(); ok {
		_spec.AddField(player.FieldCoinLamb, field.TypeFloat32, value)
	}
	if value, ok := pu.mutation.TokenLamb(); ok {
		_spec.SetField(player.FieldTokenLamb, field.TypeFloat32, value)
	}
	if value, ok := pu.mutation.AddedTokenLamb(); ok {
		_spec.AddField(player.FieldTokenLamb, field.TypeFloat32, value)
	}
	if value, ok := pu.mutation.Rank(); ok {
		_spec.SetField(player.FieldRank, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.AddedRank(); ok {
		_spec.AddField(player.FieldRank, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.Amount(); ok {
		_spec.SetField(player.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAmount(); ok {
		_spec.AddField(player.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.DepositAddress(); ok {
		_spec.SetField(player.FieldDepositAddress, field.TypeString, value)
	}
	if value, ok := pu.mutation.InvitedNum(); ok {
		_spec.SetField(player.FieldInvitedNum, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.AddedInvitedNum(); ok {
		_spec.AddField(player.FieldInvitedNum, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.TotalIncome(); ok {
		_spec.SetField(player.FieldTotalIncome, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedTotalIncome(); ok {
		_spec.AddField(player.FieldTotalIncome, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.ProfitAndLoss(); ok {
		_spec.SetField(player.FieldProfitAndLoss, field.TypeFloat32, value)
	}
	if value, ok := pu.mutation.AddedProfitAndLoss(); ok {
		_spec.AddField(player.FieldProfitAndLoss, field.TypeFloat32, value)
	}
	if value, ok := pu.mutation.InviteCode(); ok {
		_spec.SetField(player.FieldInviteCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.InvitedCode(); ok {
		_spec.SetField(player.FieldInvitedCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.SystemCommission(); ok {
		_spec.SetField(player.FieldSystemCommission, field.TypeFloat32, value)
	}
	if value, ok := pu.mutation.AddedSystemCommission(); ok {
		_spec.AddField(player.FieldSystemCommission, field.TypeFloat32, value)
	}
	if value, ok := pu.mutation.GcicsUserID(); ok {
		_spec.SetField(player.FieldGcicsUserID, field.TypeUint64, value)
	}
	if value, ok := pu.mutation.AddedGcicsUserID(); ok {
		_spec.AddField(player.FieldGcicsUserID, field.TypeUint64, value)
	}
	if value, ok := pu.mutation.GcicsToken(); ok {
		_spec.SetField(player.FieldGcicsToken, field.TypeString, value)
	}
	if value, ok := pu.mutation.GcicsReturnURL(); ok {
		_spec.SetField(player.FieldGcicsReturnURL, field.TypeString, value)
	}
	if pu.mutation.InviterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.InviterTable,
			Columns: []string{player.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InviterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.InviterTable,
			Columns: []string{player.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.InviteesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.InviteesTable,
			Columns: []string{player.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedInviteesIDs(); len(nodes) > 0 && !pu.mutation.InviteesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.InviteesTable,
			Columns: []string{player.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InviteesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.InviteesTable,
			Columns: []string{player.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlayerUpdateOne is the builder for updating a single Player entity.
type PlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlayerUpdateOne) SetUpdatedAt(t time.Time) *PlayerUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetStatus sets the "status" field.
func (puo *PlayerUpdateOne) SetStatus(u uint8) *PlayerUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(u)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableStatus(u *uint8) *PlayerUpdateOne {
	if u != nil {
		puo.SetStatus(*u)
	}
	return puo
}

// AddStatus adds u to the "status" field.
func (puo *PlayerUpdateOne) AddStatus(u int8) *PlayerUpdateOne {
	puo.mutation.AddStatus(u)
	return puo
}

// ClearStatus clears the value of the "status" field.
func (puo *PlayerUpdateOne) ClearStatus() *PlayerUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// SetName sets the "name" field.
func (puo *PlayerUpdateOne) SetName(s string) *PlayerUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableName(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetEmail sets the "email" field.
func (puo *PlayerUpdateOne) SetEmail(s string) *PlayerUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableEmail(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// SetPassword sets the "password" field.
func (puo *PlayerUpdateOne) SetPassword(s string) *PlayerUpdateOne {
	puo.mutation.SetPassword(s)
	return puo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillablePassword(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetPassword(*s)
	}
	return puo
}

// SetTransactionPassword sets the "transaction_password" field.
func (puo *PlayerUpdateOne) SetTransactionPassword(s string) *PlayerUpdateOne {
	puo.mutation.SetTransactionPassword(s)
	return puo
}

// SetNillableTransactionPassword sets the "transaction_password" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableTransactionPassword(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetTransactionPassword(*s)
	}
	return puo
}

// SetCoinLamb sets the "coin_lamb" field.
func (puo *PlayerUpdateOne) SetCoinLamb(f float32) *PlayerUpdateOne {
	puo.mutation.ResetCoinLamb()
	puo.mutation.SetCoinLamb(f)
	return puo
}

// SetNillableCoinLamb sets the "coin_lamb" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableCoinLamb(f *float32) *PlayerUpdateOne {
	if f != nil {
		puo.SetCoinLamb(*f)
	}
	return puo
}

// AddCoinLamb adds f to the "coin_lamb" field.
func (puo *PlayerUpdateOne) AddCoinLamb(f float32) *PlayerUpdateOne {
	puo.mutation.AddCoinLamb(f)
	return puo
}

// SetTokenLamb sets the "token_lamb" field.
func (puo *PlayerUpdateOne) SetTokenLamb(f float32) *PlayerUpdateOne {
	puo.mutation.ResetTokenLamb()
	puo.mutation.SetTokenLamb(f)
	return puo
}

// SetNillableTokenLamb sets the "token_lamb" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableTokenLamb(f *float32) *PlayerUpdateOne {
	if f != nil {
		puo.SetTokenLamb(*f)
	}
	return puo
}

// AddTokenLamb adds f to the "token_lamb" field.
func (puo *PlayerUpdateOne) AddTokenLamb(f float32) *PlayerUpdateOne {
	puo.mutation.AddTokenLamb(f)
	return puo
}

// SetRank sets the "rank" field.
func (puo *PlayerUpdateOne) SetRank(u uint32) *PlayerUpdateOne {
	puo.mutation.ResetRank()
	puo.mutation.SetRank(u)
	return puo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableRank(u *uint32) *PlayerUpdateOne {
	if u != nil {
		puo.SetRank(*u)
	}
	return puo
}

// AddRank adds u to the "rank" field.
func (puo *PlayerUpdateOne) AddRank(u int32) *PlayerUpdateOne {
	puo.mutation.AddRank(u)
	return puo
}

// SetAmount sets the "amount" field.
func (puo *PlayerUpdateOne) SetAmount(f float64) *PlayerUpdateOne {
	puo.mutation.ResetAmount()
	puo.mutation.SetAmount(f)
	return puo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableAmount(f *float64) *PlayerUpdateOne {
	if f != nil {
		puo.SetAmount(*f)
	}
	return puo
}

// AddAmount adds f to the "amount" field.
func (puo *PlayerUpdateOne) AddAmount(f float64) *PlayerUpdateOne {
	puo.mutation.AddAmount(f)
	return puo
}

// SetDepositAddress sets the "deposit_address" field.
func (puo *PlayerUpdateOne) SetDepositAddress(s string) *PlayerUpdateOne {
	puo.mutation.SetDepositAddress(s)
	return puo
}

// SetNillableDepositAddress sets the "deposit_address" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableDepositAddress(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetDepositAddress(*s)
	}
	return puo
}

// SetInvitedNum sets the "invited_num" field.
func (puo *PlayerUpdateOne) SetInvitedNum(u uint32) *PlayerUpdateOne {
	puo.mutation.ResetInvitedNum()
	puo.mutation.SetInvitedNum(u)
	return puo
}

// SetNillableInvitedNum sets the "invited_num" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableInvitedNum(u *uint32) *PlayerUpdateOne {
	if u != nil {
		puo.SetInvitedNum(*u)
	}
	return puo
}

// AddInvitedNum adds u to the "invited_num" field.
func (puo *PlayerUpdateOne) AddInvitedNum(u int32) *PlayerUpdateOne {
	puo.mutation.AddInvitedNum(u)
	return puo
}

// SetTotalIncome sets the "total_income" field.
func (puo *PlayerUpdateOne) SetTotalIncome(f float64) *PlayerUpdateOne {
	puo.mutation.ResetTotalIncome()
	puo.mutation.SetTotalIncome(f)
	return puo
}

// SetNillableTotalIncome sets the "total_income" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableTotalIncome(f *float64) *PlayerUpdateOne {
	if f != nil {
		puo.SetTotalIncome(*f)
	}
	return puo
}

// AddTotalIncome adds f to the "total_income" field.
func (puo *PlayerUpdateOne) AddTotalIncome(f float64) *PlayerUpdateOne {
	puo.mutation.AddTotalIncome(f)
	return puo
}

// SetProfitAndLoss sets the "profit_and_loss" field.
func (puo *PlayerUpdateOne) SetProfitAndLoss(f float32) *PlayerUpdateOne {
	puo.mutation.ResetProfitAndLoss()
	puo.mutation.SetProfitAndLoss(f)
	return puo
}

// SetNillableProfitAndLoss sets the "profit_and_loss" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableProfitAndLoss(f *float32) *PlayerUpdateOne {
	if f != nil {
		puo.SetProfitAndLoss(*f)
	}
	return puo
}

// AddProfitAndLoss adds f to the "profit_and_loss" field.
func (puo *PlayerUpdateOne) AddProfitAndLoss(f float32) *PlayerUpdateOne {
	puo.mutation.AddProfitAndLoss(f)
	return puo
}

// SetInviteCode sets the "invite_code" field.
func (puo *PlayerUpdateOne) SetInviteCode(s string) *PlayerUpdateOne {
	puo.mutation.SetInviteCode(s)
	return puo
}

// SetNillableInviteCode sets the "invite_code" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableInviteCode(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetInviteCode(*s)
	}
	return puo
}

// SetInviterID sets the "inviter_id" field.
func (puo *PlayerUpdateOne) SetInviterID(u uint64) *PlayerUpdateOne {
	puo.mutation.SetInviterID(u)
	return puo
}

// SetNillableInviterID sets the "inviter_id" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableInviterID(u *uint64) *PlayerUpdateOne {
	if u != nil {
		puo.SetInviterID(*u)
	}
	return puo
}

// ClearInviterID clears the value of the "inviter_id" field.
func (puo *PlayerUpdateOne) ClearInviterID() *PlayerUpdateOne {
	puo.mutation.ClearInviterID()
	return puo
}

// SetInvitedCode sets the "invited_code" field.
func (puo *PlayerUpdateOne) SetInvitedCode(s string) *PlayerUpdateOne {
	puo.mutation.SetInvitedCode(s)
	return puo
}

// SetNillableInvitedCode sets the "invited_code" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableInvitedCode(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetInvitedCode(*s)
	}
	return puo
}

// SetSystemCommission sets the "system_commission" field.
func (puo *PlayerUpdateOne) SetSystemCommission(f float32) *PlayerUpdateOne {
	puo.mutation.ResetSystemCommission()
	puo.mutation.SetSystemCommission(f)
	return puo
}

// SetNillableSystemCommission sets the "system_commission" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableSystemCommission(f *float32) *PlayerUpdateOne {
	if f != nil {
		puo.SetSystemCommission(*f)
	}
	return puo
}

// AddSystemCommission adds f to the "system_commission" field.
func (puo *PlayerUpdateOne) AddSystemCommission(f float32) *PlayerUpdateOne {
	puo.mutation.AddSystemCommission(f)
	return puo
}

// SetGcicsUserID sets the "gcics_user_id" field.
func (puo *PlayerUpdateOne) SetGcicsUserID(u uint64) *PlayerUpdateOne {
	puo.mutation.ResetGcicsUserID()
	puo.mutation.SetGcicsUserID(u)
	return puo
}

// SetNillableGcicsUserID sets the "gcics_user_id" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableGcicsUserID(u *uint64) *PlayerUpdateOne {
	if u != nil {
		puo.SetGcicsUserID(*u)
	}
	return puo
}

// AddGcicsUserID adds u to the "gcics_user_id" field.
func (puo *PlayerUpdateOne) AddGcicsUserID(u int64) *PlayerUpdateOne {
	puo.mutation.AddGcicsUserID(u)
	return puo
}

// SetGcicsToken sets the "gcics_token" field.
func (puo *PlayerUpdateOne) SetGcicsToken(s string) *PlayerUpdateOne {
	puo.mutation.SetGcicsToken(s)
	return puo
}

// SetNillableGcicsToken sets the "gcics_token" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableGcicsToken(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetGcicsToken(*s)
	}
	return puo
}

// SetGcicsReturnURL sets the "gcics_return_url" field.
func (puo *PlayerUpdateOne) SetGcicsReturnURL(s string) *PlayerUpdateOne {
	puo.mutation.SetGcicsReturnURL(s)
	return puo
}

// SetNillableGcicsReturnURL sets the "gcics_return_url" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableGcicsReturnURL(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetGcicsReturnURL(*s)
	}
	return puo
}

// SetInviter sets the "inviter" edge to the Player entity.
func (puo *PlayerUpdateOne) SetInviter(p *Player) *PlayerUpdateOne {
	return puo.SetInviterID(p.ID)
}

// AddInviteeIDs adds the "invitees" edge to the Player entity by IDs.
func (puo *PlayerUpdateOne) AddInviteeIDs(ids ...uint64) *PlayerUpdateOne {
	puo.mutation.AddInviteeIDs(ids...)
	return puo
}

// AddInvitees adds the "invitees" edges to the Player entity.
func (puo *PlayerUpdateOne) AddInvitees(p ...*Player) *PlayerUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddInviteeIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (puo *PlayerUpdateOne) Mutation() *PlayerMutation {
	return puo.mutation
}

// ClearInviter clears the "inviter" edge to the Player entity.
func (puo *PlayerUpdateOne) ClearInviter() *PlayerUpdateOne {
	puo.mutation.ClearInviter()
	return puo
}

// ClearInvitees clears all "invitees" edges to the Player entity.
func (puo *PlayerUpdateOne) ClearInvitees() *PlayerUpdateOne {
	puo.mutation.ClearInvitees()
	return puo
}

// RemoveInviteeIDs removes the "invitees" edge to Player entities by IDs.
func (puo *PlayerUpdateOne) RemoveInviteeIDs(ids ...uint64) *PlayerUpdateOne {
	puo.mutation.RemoveInviteeIDs(ids...)
	return puo
}

// RemoveInvitees removes "invitees" edges to Player entities.
func (puo *PlayerUpdateOne) RemoveInvitees(p ...*Player) *PlayerUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveInviteeIDs(ids...)
}

// Where appends a list predicates to the PlayerUpdate builder.
func (puo *PlayerUpdateOne) Where(ps ...predicate.Player) *PlayerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlayerUpdateOne) Select(field string, fields ...string) *PlayerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Player entity.
func (puo *PlayerUpdateOne) Save(ctx context.Context) (*Player, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlayerUpdateOne) SaveX(ctx context.Context) *Player {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlayerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlayerUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := player.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *PlayerUpdateOne) sqlSave(ctx context.Context) (_node *Player, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Player.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, player.FieldID)
		for _, f := range fields {
			if !player.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != player.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(player.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(player.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(player.FieldStatus, field.TypeUint8, value)
	}
	if puo.mutation.StatusCleared() {
		_spec.ClearField(player.FieldStatus, field.TypeUint8)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(player.FieldEmail, field.TypeString, value)
	}
	if value, ok := puo.mutation.Password(); ok {
		_spec.SetField(player.FieldPassword, field.TypeString, value)
	}
	if value, ok := puo.mutation.TransactionPassword(); ok {
		_spec.SetField(player.FieldTransactionPassword, field.TypeString, value)
	}
	if value, ok := puo.mutation.CoinLamb(); ok {
		_spec.SetField(player.FieldCoinLamb, field.TypeFloat32, value)
	}
	if value, ok := puo.mutation.AddedCoinLamb(); ok {
		_spec.AddField(player.FieldCoinLamb, field.TypeFloat32, value)
	}
	if value, ok := puo.mutation.TokenLamb(); ok {
		_spec.SetField(player.FieldTokenLamb, field.TypeFloat32, value)
	}
	if value, ok := puo.mutation.AddedTokenLamb(); ok {
		_spec.AddField(player.FieldTokenLamb, field.TypeFloat32, value)
	}
	if value, ok := puo.mutation.Rank(); ok {
		_spec.SetField(player.FieldRank, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.AddedRank(); ok {
		_spec.AddField(player.FieldRank, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.Amount(); ok {
		_spec.SetField(player.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAmount(); ok {
		_spec.AddField(player.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.DepositAddress(); ok {
		_spec.SetField(player.FieldDepositAddress, field.TypeString, value)
	}
	if value, ok := puo.mutation.InvitedNum(); ok {
		_spec.SetField(player.FieldInvitedNum, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.AddedInvitedNum(); ok {
		_spec.AddField(player.FieldInvitedNum, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.TotalIncome(); ok {
		_spec.SetField(player.FieldTotalIncome, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedTotalIncome(); ok {
		_spec.AddField(player.FieldTotalIncome, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.ProfitAndLoss(); ok {
		_spec.SetField(player.FieldProfitAndLoss, field.TypeFloat32, value)
	}
	if value, ok := puo.mutation.AddedProfitAndLoss(); ok {
		_spec.AddField(player.FieldProfitAndLoss, field.TypeFloat32, value)
	}
	if value, ok := puo.mutation.InviteCode(); ok {
		_spec.SetField(player.FieldInviteCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.InvitedCode(); ok {
		_spec.SetField(player.FieldInvitedCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.SystemCommission(); ok {
		_spec.SetField(player.FieldSystemCommission, field.TypeFloat32, value)
	}
	if value, ok := puo.mutation.AddedSystemCommission(); ok {
		_spec.AddField(player.FieldSystemCommission, field.TypeFloat32, value)
	}
	if value, ok := puo.mutation.GcicsUserID(); ok {
		_spec.SetField(player.FieldGcicsUserID, field.TypeUint64, value)
	}
	if value, ok := puo.mutation.AddedGcicsUserID(); ok {
		_spec.AddField(player.FieldGcicsUserID, field.TypeUint64, value)
	}
	if value, ok := puo.mutation.GcicsToken(); ok {
		_spec.SetField(player.FieldGcicsToken, field.TypeString, value)
	}
	if value, ok := puo.mutation.GcicsReturnURL(); ok {
		_spec.SetField(player.FieldGcicsReturnURL, field.TypeString, value)
	}
	if puo.mutation.InviterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.InviterTable,
			Columns: []string{player.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InviterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.InviterTable,
			Columns: []string{player.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.InviteesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.InviteesTable,
			Columns: []string{player.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedInviteesIDs(); len(nodes) > 0 && !puo.mutation.InviteesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.InviteesTable,
			Columns: []string{player.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InviteesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.InviteesTable,
			Columns: []string{player.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Player{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
