// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/statement"
)

// StatementCreate is the builder for creating a Statement entity.
type StatementCreate struct {
	config
	mutation *StatementMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *StatementCreate) SetCreatedAt(t time.Time) *StatementCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCreatedAt(t *time.Time) *StatementCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StatementCreate) SetUpdatedAt(t time.Time) *StatementCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableUpdatedAt(t *time.Time) *StatementCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *StatementCreate) SetStatus(u uint8) *StatementCreate {
	sc.mutation.SetStatus(u)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *StatementCreate) SetNillableStatus(u *uint8) *StatementCreate {
	if u != nil {
		sc.SetStatus(*u)
	}
	return sc
}

// SetPlayerID sets the "player_id" field.
func (sc *StatementCreate) SetPlayerID(u uint64) *StatementCreate {
	sc.mutation.SetPlayerID(u)
	return sc
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillablePlayerID(u *uint64) *StatementCreate {
	if u != nil {
		sc.SetPlayerID(*u)
	}
	return sc
}

// SetModule sets the "module" field.
func (sc *StatementCreate) SetModule(u uint32) *StatementCreate {
	sc.mutation.SetModule(u)
	return sc
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (sc *StatementCreate) SetNillableModule(u *uint32) *StatementCreate {
	if u != nil {
		sc.SetModule(*u)
	}
	return sc
}

// SetCode sets the "code" field.
func (sc *StatementCreate) SetCode(s string) *StatementCreate {
	sc.mutation.SetCode(s)
	return sc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCode(s *string) *StatementCreate {
	if s != nil {
		sc.SetCode(*s)
	}
	return sc
}

// SetInoutType sets the "inout_type" field.
func (sc *StatementCreate) SetInoutType(u uint32) *StatementCreate {
	sc.mutation.SetInoutType(u)
	return sc
}

// SetNillableInoutType sets the "inout_type" field if the given value is not nil.
func (sc *StatementCreate) SetNillableInoutType(u *uint32) *StatementCreate {
	if u != nil {
		sc.SetInoutType(*u)
	}
	return sc
}

// SetAmount sets the "amount" field.
func (sc *StatementCreate) SetAmount(f float64) *StatementCreate {
	sc.mutation.SetAmount(f)
	return sc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sc *StatementCreate) SetNillableAmount(f *float64) *StatementCreate {
	if f != nil {
		sc.SetAmount(*f)
	}
	return sc
}

// SetReferID sets the "refer_id" field.
func (sc *StatementCreate) SetReferID(s string) *StatementCreate {
	sc.mutation.SetReferID(s)
	return sc
}

// SetNillableReferID sets the "refer_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableReferID(s *string) *StatementCreate {
	if s != nil {
		sc.SetReferID(*s)
	}
	return sc
}

// SetMode sets the "mode" field.
func (sc *StatementCreate) SetMode(s string) *StatementCreate {
	sc.mutation.SetMode(s)
	return sc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (sc *StatementCreate) SetNillableMode(s *string) *StatementCreate {
	if s != nil {
		sc.SetMode(*s)
	}
	return sc
}

// SetRemark sets the "remark" field.
func (sc *StatementCreate) SetRemark(s string) *StatementCreate {
	sc.mutation.SetRemark(s)
	return sc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sc *StatementCreate) SetNillableRemark(s *string) *StatementCreate {
	if s != nil {
		sc.SetRemark(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StatementCreate) SetID(u uint64) *StatementCreate {
	sc.mutation.SetID(u)
	return sc
}

// Mutation returns the StatementMutation object of the builder.
func (sc *StatementCreate) Mutation() *StatementMutation {
	return sc.mutation
}

// Save creates the Statement in the database.
func (sc *StatementCreate) Save(ctx context.Context) (*Statement, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatementCreate) SaveX(ctx context.Context) *Statement {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatementCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatementCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StatementCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := statement.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := statement.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := statement.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.PlayerID(); !ok {
		v := statement.DefaultPlayerID
		sc.mutation.SetPlayerID(v)
	}
	if _, ok := sc.mutation.Module(); !ok {
		v := statement.DefaultModule
		sc.mutation.SetModule(v)
	}
	if _, ok := sc.mutation.Code(); !ok {
		v := statement.DefaultCode
		sc.mutation.SetCode(v)
	}
	if _, ok := sc.mutation.InoutType(); !ok {
		v := statement.DefaultInoutType
		sc.mutation.SetInoutType(v)
	}
	if _, ok := sc.mutation.Amount(); !ok {
		v := statement.DefaultAmount
		sc.mutation.SetAmount(v)
	}
	if _, ok := sc.mutation.ReferID(); !ok {
		v := statement.DefaultReferID
		sc.mutation.SetReferID(v)
	}
	if _, ok := sc.mutation.Mode(); !ok {
		v := statement.DefaultMode
		sc.mutation.SetMode(v)
	}
	if _, ok := sc.mutation.Remark(); !ok {
		v := statement.DefaultRemark
		sc.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatementCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Statement.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Statement.updated_at"`)}
	}
	if _, ok := sc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player_id", err: errors.New(`ent: missing required field "Statement.player_id"`)}
	}
	if _, ok := sc.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`ent: missing required field "Statement.module"`)}
	}
	if _, ok := sc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Statement.code"`)}
	}
	if _, ok := sc.mutation.InoutType(); !ok {
		return &ValidationError{Name: "inout_type", err: errors.New(`ent: missing required field "Statement.inout_type"`)}
	}
	if _, ok := sc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Statement.amount"`)}
	}
	if _, ok := sc.mutation.ReferID(); !ok {
		return &ValidationError{Name: "refer_id", err: errors.New(`ent: missing required field "Statement.refer_id"`)}
	}
	if _, ok := sc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "Statement.mode"`)}
	}
	if _, ok := sc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Statement.remark"`)}
	}
	return nil
}

func (sc *StatementCreate) sqlSave(ctx context.Context) (*Statement, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StatementCreate) createSpec() (*Statement, *sqlgraph.CreateSpec) {
	var (
		_node = &Statement{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(statement.Table, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUint64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(statement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(statement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(statement.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.PlayerID(); ok {
		_spec.SetField(statement.FieldPlayerID, field.TypeUint64, value)
		_node.PlayerID = value
	}
	if value, ok := sc.mutation.Module(); ok {
		_spec.SetField(statement.FieldModule, field.TypeUint32, value)
		_node.Module = value
	}
	if value, ok := sc.mutation.Code(); ok {
		_spec.SetField(statement.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := sc.mutation.InoutType(); ok {
		_spec.SetField(statement.FieldInoutType, field.TypeUint32, value)
		_node.InoutType = value
	}
	if value, ok := sc.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := sc.mutation.ReferID(); ok {
		_spec.SetField(statement.FieldReferID, field.TypeString, value)
		_node.ReferID = value
	}
	if value, ok := sc.mutation.Mode(); ok {
		_spec.SetField(statement.FieldMode, field.TypeString, value)
		_node.Mode = value
	}
	if value, ok := sc.mutation.Remark(); ok {
		_spec.SetField(statement.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// StatementCreateBulk is the builder for creating many Statement entities in bulk.
type StatementCreateBulk struct {
	config
	err      error
	builders []*StatementCreate
}

// Save creates the Statement entities in the database.
func (scb *StatementCreateBulk) Save(ctx context.Context) ([]*Statement, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Statement, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatementCreateBulk) SaveX(ctx context.Context) []*Statement {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatementCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatementCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
