// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/round"
	"github.com/kebin6/wolflamp-rpc/ent/roundinvest"
)

// RoundInvestCreate is the builder for creating a RoundInvest entity.
type RoundInvestCreate struct {
	config
	mutation *RoundInvestMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ric *RoundInvestCreate) SetCreatedAt(t time.Time) *RoundInvestCreate {
	ric.mutation.SetCreatedAt(t)
	return ric
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillableCreatedAt(t *time.Time) *RoundInvestCreate {
	if t != nil {
		ric.SetCreatedAt(*t)
	}
	return ric
}

// SetUpdatedAt sets the "updated_at" field.
func (ric *RoundInvestCreate) SetUpdatedAt(t time.Time) *RoundInvestCreate {
	ric.mutation.SetUpdatedAt(t)
	return ric
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillableUpdatedAt(t *time.Time) *RoundInvestCreate {
	if t != nil {
		ric.SetUpdatedAt(*t)
	}
	return ric
}

// SetPlayerID sets the "player_id" field.
func (ric *RoundInvestCreate) SetPlayerID(u uint64) *RoundInvestCreate {
	ric.mutation.SetPlayerID(u)
	return ric
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillablePlayerID(u *uint64) *RoundInvestCreate {
	if u != nil {
		ric.SetPlayerID(*u)
	}
	return ric
}

// SetPlayerEmail sets the "player_email" field.
func (ric *RoundInvestCreate) SetPlayerEmail(s string) *RoundInvestCreate {
	ric.mutation.SetPlayerEmail(s)
	return ric
}

// SetNillablePlayerEmail sets the "player_email" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillablePlayerEmail(s *string) *RoundInvestCreate {
	if s != nil {
		ric.SetPlayerEmail(*s)
	}
	return ric
}

// SetFoldNo sets the "fold_no" field.
func (ric *RoundInvestCreate) SetFoldNo(u uint32) *RoundInvestCreate {
	ric.mutation.SetFoldNo(u)
	return ric
}

// SetNillableFoldNo sets the "fold_no" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillableFoldNo(u *uint32) *RoundInvestCreate {
	if u != nil {
		ric.SetFoldNo(*u)
	}
	return ric
}

// SetLambNum sets the "lamb_num" field.
func (ric *RoundInvestCreate) SetLambNum(u uint32) *RoundInvestCreate {
	ric.mutation.SetLambNum(u)
	return ric
}

// SetNillableLambNum sets the "lamb_num" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillableLambNum(u *uint32) *RoundInvestCreate {
	if u != nil {
		ric.SetLambNum(*u)
	}
	return ric
}

// SetProfitAndLoss sets the "profit_and_loss" field.
func (ric *RoundInvestCreate) SetProfitAndLoss(f float32) *RoundInvestCreate {
	ric.mutation.SetProfitAndLoss(f)
	return ric
}

// SetNillableProfitAndLoss sets the "profit_and_loss" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillableProfitAndLoss(f *float32) *RoundInvestCreate {
	if f != nil {
		ric.SetProfitAndLoss(*f)
	}
	return ric
}

// SetRoundID sets the "round_id" field.
func (ric *RoundInvestCreate) SetRoundID(u uint64) *RoundInvestCreate {
	ric.mutation.SetRoundID(u)
	return ric
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillableRoundID(u *uint64) *RoundInvestCreate {
	if u != nil {
		ric.SetRoundID(*u)
	}
	return ric
}

// SetRoundCount sets the "round_count" field.
func (ric *RoundInvestCreate) SetRoundCount(u uint32) *RoundInvestCreate {
	ric.mutation.SetRoundCount(u)
	return ric
}

// SetNillableRoundCount sets the "round_count" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillableRoundCount(u *uint32) *RoundInvestCreate {
	if u != nil {
		ric.SetRoundCount(*u)
	}
	return ric
}

// SetTotalRoundCount sets the "total_round_count" field.
func (ric *RoundInvestCreate) SetTotalRoundCount(u uint64) *RoundInvestCreate {
	ric.mutation.SetTotalRoundCount(u)
	return ric
}

// SetNillableTotalRoundCount sets the "total_round_count" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillableTotalRoundCount(u *uint64) *RoundInvestCreate {
	if u != nil {
		ric.SetTotalRoundCount(*u)
	}
	return ric
}

// SetMode sets the "mode" field.
func (ric *RoundInvestCreate) SetMode(s string) *RoundInvestCreate {
	ric.mutation.SetMode(s)
	return ric
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (ric *RoundInvestCreate) SetNillableMode(s *string) *RoundInvestCreate {
	if s != nil {
		ric.SetMode(*s)
	}
	return ric
}

// SetID sets the "id" field.
func (ric *RoundInvestCreate) SetID(u uint64) *RoundInvestCreate {
	ric.mutation.SetID(u)
	return ric
}

// SetRound sets the "round" edge to the Round entity.
func (ric *RoundInvestCreate) SetRound(r *Round) *RoundInvestCreate {
	return ric.SetRoundID(r.ID)
}

// Mutation returns the RoundInvestMutation object of the builder.
func (ric *RoundInvestCreate) Mutation() *RoundInvestMutation {
	return ric.mutation
}

// Save creates the RoundInvest in the database.
func (ric *RoundInvestCreate) Save(ctx context.Context) (*RoundInvest, error) {
	ric.defaults()
	return withHooks(ctx, ric.sqlSave, ric.mutation, ric.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ric *RoundInvestCreate) SaveX(ctx context.Context) *RoundInvest {
	v, err := ric.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ric *RoundInvestCreate) Exec(ctx context.Context) error {
	_, err := ric.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ric *RoundInvestCreate) ExecX(ctx context.Context) {
	if err := ric.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ric *RoundInvestCreate) defaults() {
	if _, ok := ric.mutation.CreatedAt(); !ok {
		v := roundinvest.DefaultCreatedAt()
		ric.mutation.SetCreatedAt(v)
	}
	if _, ok := ric.mutation.UpdatedAt(); !ok {
		v := roundinvest.DefaultUpdatedAt()
		ric.mutation.SetUpdatedAt(v)
	}
	if _, ok := ric.mutation.PlayerID(); !ok {
		v := roundinvest.DefaultPlayerID
		ric.mutation.SetPlayerID(v)
	}
	if _, ok := ric.mutation.PlayerEmail(); !ok {
		v := roundinvest.DefaultPlayerEmail
		ric.mutation.SetPlayerEmail(v)
	}
	if _, ok := ric.mutation.FoldNo(); !ok {
		v := roundinvest.DefaultFoldNo
		ric.mutation.SetFoldNo(v)
	}
	if _, ok := ric.mutation.LambNum(); !ok {
		v := roundinvest.DefaultLambNum
		ric.mutation.SetLambNum(v)
	}
	if _, ok := ric.mutation.ProfitAndLoss(); !ok {
		v := roundinvest.DefaultProfitAndLoss
		ric.mutation.SetProfitAndLoss(v)
	}
	if _, ok := ric.mutation.RoundID(); !ok {
		v := roundinvest.DefaultRoundID
		ric.mutation.SetRoundID(v)
	}
	if _, ok := ric.mutation.RoundCount(); !ok {
		v := roundinvest.DefaultRoundCount
		ric.mutation.SetRoundCount(v)
	}
	if _, ok := ric.mutation.TotalRoundCount(); !ok {
		v := roundinvest.DefaultTotalRoundCount
		ric.mutation.SetTotalRoundCount(v)
	}
	if _, ok := ric.mutation.Mode(); !ok {
		v := roundinvest.DefaultMode
		ric.mutation.SetMode(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ric *RoundInvestCreate) check() error {
	if _, ok := ric.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoundInvest.created_at"`)}
	}
	if _, ok := ric.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RoundInvest.updated_at"`)}
	}
	if _, ok := ric.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player_id", err: errors.New(`ent: missing required field "RoundInvest.player_id"`)}
	}
	if _, ok := ric.mutation.PlayerEmail(); !ok {
		return &ValidationError{Name: "player_email", err: errors.New(`ent: missing required field "RoundInvest.player_email"`)}
	}
	if _, ok := ric.mutation.FoldNo(); !ok {
		return &ValidationError{Name: "fold_no", err: errors.New(`ent: missing required field "RoundInvest.fold_no"`)}
	}
	if _, ok := ric.mutation.LambNum(); !ok {
		return &ValidationError{Name: "lamb_num", err: errors.New(`ent: missing required field "RoundInvest.lamb_num"`)}
	}
	if _, ok := ric.mutation.ProfitAndLoss(); !ok {
		return &ValidationError{Name: "profit_and_loss", err: errors.New(`ent: missing required field "RoundInvest.profit_and_loss"`)}
	}
	if _, ok := ric.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "RoundInvest.mode"`)}
	}
	return nil
}

func (ric *RoundInvestCreate) sqlSave(ctx context.Context) (*RoundInvest, error) {
	if err := ric.check(); err != nil {
		return nil, err
	}
	_node, _spec := ric.createSpec()
	if err := sqlgraph.CreateNode(ctx, ric.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ric.mutation.id = &_node.ID
	ric.mutation.done = true
	return _node, nil
}

func (ric *RoundInvestCreate) createSpec() (*RoundInvest, *sqlgraph.CreateSpec) {
	var (
		_node = &RoundInvest{config: ric.config}
		_spec = sqlgraph.NewCreateSpec(roundinvest.Table, sqlgraph.NewFieldSpec(roundinvest.FieldID, field.TypeUint64))
	)
	if id, ok := ric.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ric.mutation.CreatedAt(); ok {
		_spec.SetField(roundinvest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ric.mutation.UpdatedAt(); ok {
		_spec.SetField(roundinvest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ric.mutation.PlayerID(); ok {
		_spec.SetField(roundinvest.FieldPlayerID, field.TypeUint64, value)
		_node.PlayerID = value
	}
	if value, ok := ric.mutation.PlayerEmail(); ok {
		_spec.SetField(roundinvest.FieldPlayerEmail, field.TypeString, value)
		_node.PlayerEmail = value
	}
	if value, ok := ric.mutation.FoldNo(); ok {
		_spec.SetField(roundinvest.FieldFoldNo, field.TypeUint32, value)
		_node.FoldNo = value
	}
	if value, ok := ric.mutation.LambNum(); ok {
		_spec.SetField(roundinvest.FieldLambNum, field.TypeUint32, value)
		_node.LambNum = value
	}
	if value, ok := ric.mutation.ProfitAndLoss(); ok {
		_spec.SetField(roundinvest.FieldProfitAndLoss, field.TypeFloat32, value)
		_node.ProfitAndLoss = value
	}
	if value, ok := ric.mutation.RoundCount(); ok {
		_spec.SetField(roundinvest.FieldRoundCount, field.TypeUint32, value)
		_node.RoundCount = value
	}
	if value, ok := ric.mutation.TotalRoundCount(); ok {
		_spec.SetField(roundinvest.FieldTotalRoundCount, field.TypeUint64, value)
		_node.TotalRoundCount = value
	}
	if value, ok := ric.mutation.Mode(); ok {
		_spec.SetField(roundinvest.FieldMode, field.TypeString, value)
		_node.Mode = value
	}
	if nodes := ric.mutation.RoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roundinvest.RoundTable,
			Columns: []string{roundinvest.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoundID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoundInvestCreateBulk is the builder for creating many RoundInvest entities in bulk.
type RoundInvestCreateBulk struct {
	config
	err      error
	builders []*RoundInvestCreate
}

// Save creates the RoundInvest entities in the database.
func (ricb *RoundInvestCreateBulk) Save(ctx context.Context) ([]*RoundInvest, error) {
	if ricb.err != nil {
		return nil, ricb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ricb.builders))
	nodes := make([]*RoundInvest, len(ricb.builders))
	mutators := make([]Mutator, len(ricb.builders))
	for i := range ricb.builders {
		func(i int, root context.Context) {
			builder := ricb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoundInvestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ricb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ricb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ricb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ricb *RoundInvestCreateBulk) SaveX(ctx context.Context) []*RoundInvest {
	v, err := ricb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ricb *RoundInvestCreateBulk) Exec(ctx context.Context) error {
	_, err := ricb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ricb *RoundInvestCreateBulk) ExecX(ctx context.Context) {
	if err := ricb.Exec(ctx); err != nil {
		panic(err)
	}
}
