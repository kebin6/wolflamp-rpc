// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPlayerID holds the string denoting the player_id field in the database.
	FieldPlayerID = "player_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldTransactionID holds the string denoting the transaction_id field in the database.
	FieldTransactionID = "transaction_id"
	// FieldFromAddress holds the string denoting the from_address field in the database.
	FieldFromAddress = "from_address"
	// FieldToAddress holds the string denoting the to_address field in the database.
	FieldToAddress = "to_address"
	// FieldNum holds the string denoting the num field in the database.
	FieldNum = "num"
	// FieldHandlingFee holds the string denoting the handling_fee field in the database.
	FieldHandlingFee = "handling_fee"
	// FieldNetwork holds the string denoting the network field in the database.
	FieldNetwork = "network"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// Table holds the table name of the order in the database.
	Table = "wl_order"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldPlayerID,
	FieldType,
	FieldCode,
	FieldTransactionID,
	FieldFromAddress,
	FieldToAddress,
	FieldNum,
	FieldHandlingFee,
	FieldNetwork,
	FieldRemark,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultPlayerID holds the default value on creation for the "player_id" field.
	DefaultPlayerID uint64
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode string
	// DefaultTransactionID holds the default value on creation for the "transaction_id" field.
	DefaultTransactionID string
	// DefaultFromAddress holds the default value on creation for the "from_address" field.
	DefaultFromAddress string
	// DefaultToAddress holds the default value on creation for the "to_address" field.
	DefaultToAddress string
	// DefaultNum holds the default value on creation for the "num" field.
	DefaultNum float64
	// DefaultHandlingFee holds the default value on creation for the "handling_fee" field.
	DefaultHandlingFee float64
	// DefaultNetwork holds the default value on creation for the "network" field.
	DefaultNetwork string
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
)

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPlayerID orders the results by the player_id field.
func ByPlayerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayerID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByTransactionID orders the results by the transaction_id field.
func ByTransactionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionID, opts...).ToFunc()
}

// ByFromAddress orders the results by the from_address field.
func ByFromAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromAddress, opts...).ToFunc()
}

// ByToAddress orders the results by the to_address field.
func ByToAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToAddress, opts...).ToFunc()
}

// ByNum orders the results by the num field.
func ByNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNum, opts...).ToFunc()
}

// ByHandlingFee orders the results by the handling_fee field.
func ByHandlingFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandlingFee, opts...).ToFunc()
}

// ByNetwork orders the results by the network field.
func ByNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetwork, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}
