// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// PlayerID applies equality check predicate on the "player_id" field. It's identical to PlayerIDEQ.
func PlayerID(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPlayerID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldType, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCode, v))
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTransactionID, v))
}

// FromAddress applies equality check predicate on the "from_address" field. It's identical to FromAddressEQ.
func FromAddress(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldFromAddress, v))
}

// ToAddress applies equality check predicate on the "to_address" field. It's identical to ToAddressEQ.
func ToAddress(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldToAddress, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNum, v))
}

// HandlingFee applies equality check predicate on the "handling_fee" field. It's identical to HandlingFeeEQ.
func HandlingFee(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldHandlingFee, v))
}

// Network applies equality check predicate on the "network" field. It's identical to NetworkEQ.
func Network(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNetwork, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRemark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldStatus))
}

// PlayerIDEQ applies the EQ predicate on the "player_id" field.
func PlayerIDEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPlayerID, v))
}

// PlayerIDNEQ applies the NEQ predicate on the "player_id" field.
func PlayerIDNEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPlayerID, v))
}

// PlayerIDIn applies the In predicate on the "player_id" field.
func PlayerIDIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPlayerID, vs...))
}

// PlayerIDNotIn applies the NotIn predicate on the "player_id" field.
func PlayerIDNotIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPlayerID, vs...))
}

// PlayerIDGT applies the GT predicate on the "player_id" field.
func PlayerIDGT(v uint64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPlayerID, v))
}

// PlayerIDGTE applies the GTE predicate on the "player_id" field.
func PlayerIDGTE(v uint64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPlayerID, v))
}

// PlayerIDLT applies the LT predicate on the "player_id" field.
func PlayerIDLT(v uint64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPlayerID, v))
}

// PlayerIDLTE applies the LTE predicate on the "player_id" field.
func PlayerIDLTE(v uint64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPlayerID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldType, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldCode, v))
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTransactionID, v))
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTransactionID, v))
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTransactionID, vs...))
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTransactionID, vs...))
}

// TransactionIDGT applies the GT predicate on the "transaction_id" field.
func TransactionIDGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTransactionID, v))
}

// TransactionIDGTE applies the GTE predicate on the "transaction_id" field.
func TransactionIDGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTransactionID, v))
}

// TransactionIDLT applies the LT predicate on the "transaction_id" field.
func TransactionIDLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTransactionID, v))
}

// TransactionIDLTE applies the LTE predicate on the "transaction_id" field.
func TransactionIDLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTransactionID, v))
}

// TransactionIDContains applies the Contains predicate on the "transaction_id" field.
func TransactionIDContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldTransactionID, v))
}

// TransactionIDHasPrefix applies the HasPrefix predicate on the "transaction_id" field.
func TransactionIDHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldTransactionID, v))
}

// TransactionIDHasSuffix applies the HasSuffix predicate on the "transaction_id" field.
func TransactionIDHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldTransactionID, v))
}

// TransactionIDEqualFold applies the EqualFold predicate on the "transaction_id" field.
func TransactionIDEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldTransactionID, v))
}

// TransactionIDContainsFold applies the ContainsFold predicate on the "transaction_id" field.
func TransactionIDContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldTransactionID, v))
}

// FromAddressEQ applies the EQ predicate on the "from_address" field.
func FromAddressEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldFromAddress, v))
}

// FromAddressNEQ applies the NEQ predicate on the "from_address" field.
func FromAddressNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldFromAddress, v))
}

// FromAddressIn applies the In predicate on the "from_address" field.
func FromAddressIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldFromAddress, vs...))
}

// FromAddressNotIn applies the NotIn predicate on the "from_address" field.
func FromAddressNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldFromAddress, vs...))
}

// FromAddressGT applies the GT predicate on the "from_address" field.
func FromAddressGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldFromAddress, v))
}

// FromAddressGTE applies the GTE predicate on the "from_address" field.
func FromAddressGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldFromAddress, v))
}

// FromAddressLT applies the LT predicate on the "from_address" field.
func FromAddressLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldFromAddress, v))
}

// FromAddressLTE applies the LTE predicate on the "from_address" field.
func FromAddressLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldFromAddress, v))
}

// FromAddressContains applies the Contains predicate on the "from_address" field.
func FromAddressContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldFromAddress, v))
}

// FromAddressHasPrefix applies the HasPrefix predicate on the "from_address" field.
func FromAddressHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldFromAddress, v))
}

// FromAddressHasSuffix applies the HasSuffix predicate on the "from_address" field.
func FromAddressHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldFromAddress, v))
}

// FromAddressEqualFold applies the EqualFold predicate on the "from_address" field.
func FromAddressEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldFromAddress, v))
}

// FromAddressContainsFold applies the ContainsFold predicate on the "from_address" field.
func FromAddressContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldFromAddress, v))
}

// ToAddressEQ applies the EQ predicate on the "to_address" field.
func ToAddressEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldToAddress, v))
}

// ToAddressNEQ applies the NEQ predicate on the "to_address" field.
func ToAddressNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldToAddress, v))
}

// ToAddressIn applies the In predicate on the "to_address" field.
func ToAddressIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldToAddress, vs...))
}

// ToAddressNotIn applies the NotIn predicate on the "to_address" field.
func ToAddressNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldToAddress, vs...))
}

// ToAddressGT applies the GT predicate on the "to_address" field.
func ToAddressGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldToAddress, v))
}

// ToAddressGTE applies the GTE predicate on the "to_address" field.
func ToAddressGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldToAddress, v))
}

// ToAddressLT applies the LT predicate on the "to_address" field.
func ToAddressLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldToAddress, v))
}

// ToAddressLTE applies the LTE predicate on the "to_address" field.
func ToAddressLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldToAddress, v))
}

// ToAddressContains applies the Contains predicate on the "to_address" field.
func ToAddressContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldToAddress, v))
}

// ToAddressHasPrefix applies the HasPrefix predicate on the "to_address" field.
func ToAddressHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldToAddress, v))
}

// ToAddressHasSuffix applies the HasSuffix predicate on the "to_address" field.
func ToAddressHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldToAddress, v))
}

// ToAddressEqualFold applies the EqualFold predicate on the "to_address" field.
func ToAddressEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldToAddress, v))
}

// ToAddressContainsFold applies the ContainsFold predicate on the "to_address" field.
func ToAddressContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldToAddress, v))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldNum, v))
}

// HandlingFeeEQ applies the EQ predicate on the "handling_fee" field.
func HandlingFeeEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldHandlingFee, v))
}

// HandlingFeeNEQ applies the NEQ predicate on the "handling_fee" field.
func HandlingFeeNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldHandlingFee, v))
}

// HandlingFeeIn applies the In predicate on the "handling_fee" field.
func HandlingFeeIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldHandlingFee, vs...))
}

// HandlingFeeNotIn applies the NotIn predicate on the "handling_fee" field.
func HandlingFeeNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldHandlingFee, vs...))
}

// HandlingFeeGT applies the GT predicate on the "handling_fee" field.
func HandlingFeeGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldHandlingFee, v))
}

// HandlingFeeGTE applies the GTE predicate on the "handling_fee" field.
func HandlingFeeGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldHandlingFee, v))
}

// HandlingFeeLT applies the LT predicate on the "handling_fee" field.
func HandlingFeeLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldHandlingFee, v))
}

// HandlingFeeLTE applies the LTE predicate on the "handling_fee" field.
func HandlingFeeLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldHandlingFee, v))
}

// NetworkEQ applies the EQ predicate on the "network" field.
func NetworkEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNetwork, v))
}

// NetworkNEQ applies the NEQ predicate on the "network" field.
func NetworkNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldNetwork, v))
}

// NetworkIn applies the In predicate on the "network" field.
func NetworkIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldNetwork, vs...))
}

// NetworkNotIn applies the NotIn predicate on the "network" field.
func NetworkNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldNetwork, vs...))
}

// NetworkGT applies the GT predicate on the "network" field.
func NetworkGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldNetwork, v))
}

// NetworkGTE applies the GTE predicate on the "network" field.
func NetworkGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldNetwork, v))
}

// NetworkLT applies the LT predicate on the "network" field.
func NetworkLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldNetwork, v))
}

// NetworkLTE applies the LTE predicate on the "network" field.
func NetworkLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldNetwork, v))
}

// NetworkContains applies the Contains predicate on the "network" field.
func NetworkContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldNetwork, v))
}

// NetworkHasPrefix applies the HasPrefix predicate on the "network" field.
func NetworkHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldNetwork, v))
}

// NetworkHasSuffix applies the HasSuffix predicate on the "network" field.
func NetworkHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldNetwork, v))
}

// NetworkEqualFold applies the EqualFold predicate on the "network" field.
func NetworkEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldNetwork, v))
}

// NetworkContainsFold applies the ContainsFold predicate on the "network" field.
func NetworkContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldNetwork, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldRemark, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
