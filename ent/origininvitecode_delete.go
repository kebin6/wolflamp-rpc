// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/origininvitecode"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
)

// OriginInviteCodeDelete is the builder for deleting a OriginInviteCode entity.
type OriginInviteCodeDelete struct {
	config
	hooks    []Hook
	mutation *OriginInviteCodeMutation
}

// Where appends a list predicates to the OriginInviteCodeDelete builder.
func (oicd *OriginInviteCodeDelete) Where(ps ...predicate.OriginInviteCode) *OriginInviteCodeDelete {
	oicd.mutation.Where(ps...)
	return oicd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oicd *OriginInviteCodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oicd.sqlExec, oicd.mutation, oicd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oicd *OriginInviteCodeDelete) ExecX(ctx context.Context) int {
	n, err := oicd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oicd *OriginInviteCodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(origininvitecode.Table, sqlgraph.NewFieldSpec(origininvitecode.FieldID, field.TypeUint64))
	if ps := oicd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oicd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oicd.mutation.done = true
	return affected, err
}

// OriginInviteCodeDeleteOne is the builder for deleting a single OriginInviteCode entity.
type OriginInviteCodeDeleteOne struct {
	oicd *OriginInviteCodeDelete
}

// Where appends a list predicates to the OriginInviteCodeDelete builder.
func (oicdo *OriginInviteCodeDeleteOne) Where(ps ...predicate.OriginInviteCode) *OriginInviteCodeDeleteOne {
	oicdo.oicd.mutation.Where(ps...)
	return oicdo
}

// Exec executes the deletion query.
func (oicdo *OriginInviteCodeDeleteOne) Exec(ctx context.Context) error {
	n, err := oicdo.oicd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{origininvitecode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oicdo *OriginInviteCodeDeleteOne) ExecX(ctx context.Context) {
	if err := oicdo.Exec(ctx); err != nil {
		panic(err)
	}
}
