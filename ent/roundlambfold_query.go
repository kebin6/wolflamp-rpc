// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
	"github.com/kebin6/wolflamp-rpc/ent/round"
	"github.com/kebin6/wolflamp-rpc/ent/roundlambfold"
)

// RoundLambFoldQuery is the builder for querying RoundLambFold entities.
type RoundLambFoldQuery struct {
	config
	ctx        *QueryContext
	order      []roundlambfold.OrderOption
	inters     []Interceptor
	predicates []predicate.RoundLambFold
	withRound  *RoundQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoundLambFoldQuery builder.
func (rlfq *RoundLambFoldQuery) Where(ps ...predicate.RoundLambFold) *RoundLambFoldQuery {
	rlfq.predicates = append(rlfq.predicates, ps...)
	return rlfq
}

// Limit the number of records to be returned by this query.
func (rlfq *RoundLambFoldQuery) Limit(limit int) *RoundLambFoldQuery {
	rlfq.ctx.Limit = &limit
	return rlfq
}

// Offset to start from.
func (rlfq *RoundLambFoldQuery) Offset(offset int) *RoundLambFoldQuery {
	rlfq.ctx.Offset = &offset
	return rlfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rlfq *RoundLambFoldQuery) Unique(unique bool) *RoundLambFoldQuery {
	rlfq.ctx.Unique = &unique
	return rlfq
}

// Order specifies how the records should be ordered.
func (rlfq *RoundLambFoldQuery) Order(o ...roundlambfold.OrderOption) *RoundLambFoldQuery {
	rlfq.order = append(rlfq.order, o...)
	return rlfq
}

// QueryRound chains the current query on the "round" edge.
func (rlfq *RoundLambFoldQuery) QueryRound() *RoundQuery {
	query := (&RoundClient{config: rlfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rlfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rlfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roundlambfold.Table, roundlambfold.FieldID, selector),
			sqlgraph.To(round.Table, round.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roundlambfold.RoundTable, roundlambfold.RoundColumn),
		)
		fromU = sqlgraph.SetNeighbors(rlfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RoundLambFold entity from the query.
// Returns a *NotFoundError when no RoundLambFold was found.
func (rlfq *RoundLambFoldQuery) First(ctx context.Context) (*RoundLambFold, error) {
	nodes, err := rlfq.Limit(1).All(setContextOp(ctx, rlfq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{roundlambfold.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rlfq *RoundLambFoldQuery) FirstX(ctx context.Context) *RoundLambFold {
	node, err := rlfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RoundLambFold ID from the query.
// Returns a *NotFoundError when no RoundLambFold ID was found.
func (rlfq *RoundLambFoldQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = rlfq.Limit(1).IDs(setContextOp(ctx, rlfq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{roundlambfold.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rlfq *RoundLambFoldQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := rlfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RoundLambFold entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RoundLambFold entity is found.
// Returns a *NotFoundError when no RoundLambFold entities are found.
func (rlfq *RoundLambFoldQuery) Only(ctx context.Context) (*RoundLambFold, error) {
	nodes, err := rlfq.Limit(2).All(setContextOp(ctx, rlfq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{roundlambfold.Label}
	default:
		return nil, &NotSingularError{roundlambfold.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rlfq *RoundLambFoldQuery) OnlyX(ctx context.Context) *RoundLambFold {
	node, err := rlfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RoundLambFold ID in the query.
// Returns a *NotSingularError when more than one RoundLambFold ID is found.
// Returns a *NotFoundError when no entities are found.
func (rlfq *RoundLambFoldQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = rlfq.Limit(2).IDs(setContextOp(ctx, rlfq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{roundlambfold.Label}
	default:
		err = &NotSingularError{roundlambfold.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rlfq *RoundLambFoldQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := rlfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RoundLambFolds.
func (rlfq *RoundLambFoldQuery) All(ctx context.Context) ([]*RoundLambFold, error) {
	ctx = setContextOp(ctx, rlfq.ctx, "All")
	if err := rlfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RoundLambFold, *RoundLambFoldQuery]()
	return withInterceptors[[]*RoundLambFold](ctx, rlfq, qr, rlfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rlfq *RoundLambFoldQuery) AllX(ctx context.Context) []*RoundLambFold {
	nodes, err := rlfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RoundLambFold IDs.
func (rlfq *RoundLambFoldQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if rlfq.ctx.Unique == nil && rlfq.path != nil {
		rlfq.Unique(true)
	}
	ctx = setContextOp(ctx, rlfq.ctx, "IDs")
	if err = rlfq.Select(roundlambfold.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rlfq *RoundLambFoldQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := rlfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rlfq *RoundLambFoldQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rlfq.ctx, "Count")
	if err := rlfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rlfq, querierCount[*RoundLambFoldQuery](), rlfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rlfq *RoundLambFoldQuery) CountX(ctx context.Context) int {
	count, err := rlfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rlfq *RoundLambFoldQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rlfq.ctx, "Exist")
	switch _, err := rlfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rlfq *RoundLambFoldQuery) ExistX(ctx context.Context) bool {
	exist, err := rlfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoundLambFoldQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rlfq *RoundLambFoldQuery) Clone() *RoundLambFoldQuery {
	if rlfq == nil {
		return nil
	}
	return &RoundLambFoldQuery{
		config:     rlfq.config,
		ctx:        rlfq.ctx.Clone(),
		order:      append([]roundlambfold.OrderOption{}, rlfq.order...),
		inters:     append([]Interceptor{}, rlfq.inters...),
		predicates: append([]predicate.RoundLambFold{}, rlfq.predicates...),
		withRound:  rlfq.withRound.Clone(),
		// clone intermediate query.
		sql:  rlfq.sql.Clone(),
		path: rlfq.path,
	}
}

// WithRound tells the query-builder to eager-load the nodes that are connected to
// the "round" edge. The optional arguments are used to configure the query builder of the edge.
func (rlfq *RoundLambFoldQuery) WithRound(opts ...func(*RoundQuery)) *RoundLambFoldQuery {
	query := (&RoundClient{config: rlfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rlfq.withRound = query
	return rlfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RoundLambFold.Query().
//		GroupBy(roundlambfold.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rlfq *RoundLambFoldQuery) GroupBy(field string, fields ...string) *RoundLambFoldGroupBy {
	rlfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RoundLambFoldGroupBy{build: rlfq}
	grbuild.flds = &rlfq.ctx.Fields
	grbuild.label = roundlambfold.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.RoundLambFold.Query().
//		Select(roundlambfold.FieldCreatedAt).
//		Scan(ctx, &v)
func (rlfq *RoundLambFoldQuery) Select(fields ...string) *RoundLambFoldSelect {
	rlfq.ctx.Fields = append(rlfq.ctx.Fields, fields...)
	sbuild := &RoundLambFoldSelect{RoundLambFoldQuery: rlfq}
	sbuild.label = roundlambfold.Label
	sbuild.flds, sbuild.scan = &rlfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RoundLambFoldSelect configured with the given aggregations.
func (rlfq *RoundLambFoldQuery) Aggregate(fns ...AggregateFunc) *RoundLambFoldSelect {
	return rlfq.Select().Aggregate(fns...)
}

func (rlfq *RoundLambFoldQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rlfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rlfq); err != nil {
				return err
			}
		}
	}
	for _, f := range rlfq.ctx.Fields {
		if !roundlambfold.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rlfq.path != nil {
		prev, err := rlfq.path(ctx)
		if err != nil {
			return err
		}
		rlfq.sql = prev
	}
	return nil
}

func (rlfq *RoundLambFoldQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RoundLambFold, error) {
	var (
		nodes       = []*RoundLambFold{}
		_spec       = rlfq.querySpec()
		loadedTypes = [1]bool{
			rlfq.withRound != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RoundLambFold).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RoundLambFold{config: rlfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rlfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rlfq.withRound; query != nil {
		if err := rlfq.loadRound(ctx, query, nodes, nil,
			func(n *RoundLambFold, e *Round) { n.Edges.Round = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rlfq *RoundLambFoldQuery) loadRound(ctx context.Context, query *RoundQuery, nodes []*RoundLambFold, init func(*RoundLambFold), assign func(*RoundLambFold, *Round)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*RoundLambFold)
	for i := range nodes {
		fk := nodes[i].RoundID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(round.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "round_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rlfq *RoundLambFoldQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rlfq.querySpec()
	_spec.Node.Columns = rlfq.ctx.Fields
	if len(rlfq.ctx.Fields) > 0 {
		_spec.Unique = rlfq.ctx.Unique != nil && *rlfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rlfq.driver, _spec)
}

func (rlfq *RoundLambFoldQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(roundlambfold.Table, roundlambfold.Columns, sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64))
	_spec.From = rlfq.sql
	if unique := rlfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rlfq.path != nil {
		_spec.Unique = true
	}
	if fields := rlfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roundlambfold.FieldID)
		for i := range fields {
			if fields[i] != roundlambfold.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rlfq.withRound != nil {
			_spec.Node.AddColumnOnce(roundlambfold.FieldRoundID)
		}
	}
	if ps := rlfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rlfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rlfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rlfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rlfq *RoundLambFoldQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rlfq.driver.Dialect())
	t1 := builder.Table(roundlambfold.Table)
	columns := rlfq.ctx.Fields
	if len(columns) == 0 {
		columns = roundlambfold.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rlfq.sql != nil {
		selector = rlfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rlfq.ctx.Unique != nil && *rlfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rlfq.predicates {
		p(selector)
	}
	for _, p := range rlfq.order {
		p(selector)
	}
	if offset := rlfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rlfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RoundLambFoldGroupBy is the group-by builder for RoundLambFold entities.
type RoundLambFoldGroupBy struct {
	selector
	build *RoundLambFoldQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rlfgb *RoundLambFoldGroupBy) Aggregate(fns ...AggregateFunc) *RoundLambFoldGroupBy {
	rlfgb.fns = append(rlfgb.fns, fns...)
	return rlfgb
}

// Scan applies the selector query and scans the result into the given value.
func (rlfgb *RoundLambFoldGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rlfgb.build.ctx, "GroupBy")
	if err := rlfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoundLambFoldQuery, *RoundLambFoldGroupBy](ctx, rlfgb.build, rlfgb, rlfgb.build.inters, v)
}

func (rlfgb *RoundLambFoldGroupBy) sqlScan(ctx context.Context, root *RoundLambFoldQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rlfgb.fns))
	for _, fn := range rlfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rlfgb.flds)+len(rlfgb.fns))
		for _, f := range *rlfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rlfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rlfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RoundLambFoldSelect is the builder for selecting fields of RoundLambFold entities.
type RoundLambFoldSelect struct {
	*RoundLambFoldQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rlfs *RoundLambFoldSelect) Aggregate(fns ...AggregateFunc) *RoundLambFoldSelect {
	rlfs.fns = append(rlfs.fns, fns...)
	return rlfs
}

// Scan applies the selector query and scans the result into the given value.
func (rlfs *RoundLambFoldSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rlfs.ctx, "Select")
	if err := rlfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoundLambFoldQuery, *RoundLambFoldSelect](ctx, rlfs.RoundLambFoldQuery, rlfs, rlfs.inters, v)
}

func (rlfs *RoundLambFoldSelect) sqlScan(ctx context.Context, root *RoundLambFoldQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rlfs.fns))
	for _, fn := range rlfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rlfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rlfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
