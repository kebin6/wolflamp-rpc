// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
	"github.com/kebin6/wolflamp-rpc/ent/round"
	"github.com/kebin6/wolflamp-rpc/ent/roundlambfold"
)

// RoundLambFoldUpdate is the builder for updating RoundLambFold entities.
type RoundLambFoldUpdate struct {
	config
	hooks    []Hook
	mutation *RoundLambFoldMutation
}

// Where appends a list predicates to the RoundLambFoldUpdate builder.
func (rlfu *RoundLambFoldUpdate) Where(ps ...predicate.RoundLambFold) *RoundLambFoldUpdate {
	rlfu.mutation.Where(ps...)
	return rlfu
}

// SetUpdatedAt sets the "updated_at" field.
func (rlfu *RoundLambFoldUpdate) SetUpdatedAt(t time.Time) *RoundLambFoldUpdate {
	rlfu.mutation.SetUpdatedAt(t)
	return rlfu
}

// SetFoldNo sets the "fold_no" field.
func (rlfu *RoundLambFoldUpdate) SetFoldNo(u uint32) *RoundLambFoldUpdate {
	rlfu.mutation.ResetFoldNo()
	rlfu.mutation.SetFoldNo(u)
	return rlfu
}

// SetNillableFoldNo sets the "fold_no" field if the given value is not nil.
func (rlfu *RoundLambFoldUpdate) SetNillableFoldNo(u *uint32) *RoundLambFoldUpdate {
	if u != nil {
		rlfu.SetFoldNo(*u)
	}
	return rlfu
}

// AddFoldNo adds u to the "fold_no" field.
func (rlfu *RoundLambFoldUpdate) AddFoldNo(u int32) *RoundLambFoldUpdate {
	rlfu.mutation.AddFoldNo(u)
	return rlfu
}

// SetLambNum sets the "lamb_num" field.
func (rlfu *RoundLambFoldUpdate) SetLambNum(u uint32) *RoundLambFoldUpdate {
	rlfu.mutation.ResetLambNum()
	rlfu.mutation.SetLambNum(u)
	return rlfu
}

// SetNillableLambNum sets the "lamb_num" field if the given value is not nil.
func (rlfu *RoundLambFoldUpdate) SetNillableLambNum(u *uint32) *RoundLambFoldUpdate {
	if u != nil {
		rlfu.SetLambNum(*u)
	}
	return rlfu
}

// AddLambNum adds u to the "lamb_num" field.
func (rlfu *RoundLambFoldUpdate) AddLambNum(u int32) *RoundLambFoldUpdate {
	rlfu.mutation.AddLambNum(u)
	return rlfu
}

// SetRoundID sets the "round_id" field.
func (rlfu *RoundLambFoldUpdate) SetRoundID(u uint64) *RoundLambFoldUpdate {
	rlfu.mutation.SetRoundID(u)
	return rlfu
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (rlfu *RoundLambFoldUpdate) SetNillableRoundID(u *uint64) *RoundLambFoldUpdate {
	if u != nil {
		rlfu.SetRoundID(*u)
	}
	return rlfu
}

// ClearRoundID clears the value of the "round_id" field.
func (rlfu *RoundLambFoldUpdate) ClearRoundID() *RoundLambFoldUpdate {
	rlfu.mutation.ClearRoundID()
	return rlfu
}

// SetProfitAndLoss sets the "profit_and_loss" field.
func (rlfu *RoundLambFoldUpdate) SetProfitAndLoss(f float32) *RoundLambFoldUpdate {
	rlfu.mutation.ResetProfitAndLoss()
	rlfu.mutation.SetProfitAndLoss(f)
	return rlfu
}

// SetNillableProfitAndLoss sets the "profit_and_loss" field if the given value is not nil.
func (rlfu *RoundLambFoldUpdate) SetNillableProfitAndLoss(f *float32) *RoundLambFoldUpdate {
	if f != nil {
		rlfu.SetProfitAndLoss(*f)
	}
	return rlfu
}

// AddProfitAndLoss adds f to the "profit_and_loss" field.
func (rlfu *RoundLambFoldUpdate) AddProfitAndLoss(f float32) *RoundLambFoldUpdate {
	rlfu.mutation.AddProfitAndLoss(f)
	return rlfu
}

// SetRoundCount sets the "round_count" field.
func (rlfu *RoundLambFoldUpdate) SetRoundCount(u uint32) *RoundLambFoldUpdate {
	rlfu.mutation.ResetRoundCount()
	rlfu.mutation.SetRoundCount(u)
	return rlfu
}

// SetNillableRoundCount sets the "round_count" field if the given value is not nil.
func (rlfu *RoundLambFoldUpdate) SetNillableRoundCount(u *uint32) *RoundLambFoldUpdate {
	if u != nil {
		rlfu.SetRoundCount(*u)
	}
	return rlfu
}

// AddRoundCount adds u to the "round_count" field.
func (rlfu *RoundLambFoldUpdate) AddRoundCount(u int32) *RoundLambFoldUpdate {
	rlfu.mutation.AddRoundCount(u)
	return rlfu
}

// ClearRoundCount clears the value of the "round_count" field.
func (rlfu *RoundLambFoldUpdate) ClearRoundCount() *RoundLambFoldUpdate {
	rlfu.mutation.ClearRoundCount()
	return rlfu
}

// SetTotalRoundCount sets the "total_round_count" field.
func (rlfu *RoundLambFoldUpdate) SetTotalRoundCount(u uint64) *RoundLambFoldUpdate {
	rlfu.mutation.ResetTotalRoundCount()
	rlfu.mutation.SetTotalRoundCount(u)
	return rlfu
}

// SetNillableTotalRoundCount sets the "total_round_count" field if the given value is not nil.
func (rlfu *RoundLambFoldUpdate) SetNillableTotalRoundCount(u *uint64) *RoundLambFoldUpdate {
	if u != nil {
		rlfu.SetTotalRoundCount(*u)
	}
	return rlfu
}

// AddTotalRoundCount adds u to the "total_round_count" field.
func (rlfu *RoundLambFoldUpdate) AddTotalRoundCount(u int64) *RoundLambFoldUpdate {
	rlfu.mutation.AddTotalRoundCount(u)
	return rlfu
}

// ClearTotalRoundCount clears the value of the "total_round_count" field.
func (rlfu *RoundLambFoldUpdate) ClearTotalRoundCount() *RoundLambFoldUpdate {
	rlfu.mutation.ClearTotalRoundCount()
	return rlfu
}

// SetRound sets the "round" edge to the Round entity.
func (rlfu *RoundLambFoldUpdate) SetRound(r *Round) *RoundLambFoldUpdate {
	return rlfu.SetRoundID(r.ID)
}

// Mutation returns the RoundLambFoldMutation object of the builder.
func (rlfu *RoundLambFoldUpdate) Mutation() *RoundLambFoldMutation {
	return rlfu.mutation
}

// ClearRound clears the "round" edge to the Round entity.
func (rlfu *RoundLambFoldUpdate) ClearRound() *RoundLambFoldUpdate {
	rlfu.mutation.ClearRound()
	return rlfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlfu *RoundLambFoldUpdate) Save(ctx context.Context) (int, error) {
	rlfu.defaults()
	return withHooks(ctx, rlfu.sqlSave, rlfu.mutation, rlfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rlfu *RoundLambFoldUpdate) SaveX(ctx context.Context) int {
	affected, err := rlfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlfu *RoundLambFoldUpdate) Exec(ctx context.Context) error {
	_, err := rlfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlfu *RoundLambFoldUpdate) ExecX(ctx context.Context) {
	if err := rlfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rlfu *RoundLambFoldUpdate) defaults() {
	if _, ok := rlfu.mutation.UpdatedAt(); !ok {
		v := roundlambfold.UpdateDefaultUpdatedAt()
		rlfu.mutation.SetUpdatedAt(v)
	}
}

func (rlfu *RoundLambFoldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(roundlambfold.Table, roundlambfold.Columns, sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64))
	if ps := rlfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlfu.mutation.UpdatedAt(); ok {
		_spec.SetField(roundlambfold.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rlfu.mutation.FoldNo(); ok {
		_spec.SetField(roundlambfold.FieldFoldNo, field.TypeUint32, value)
	}
	if value, ok := rlfu.mutation.AddedFoldNo(); ok {
		_spec.AddField(roundlambfold.FieldFoldNo, field.TypeUint32, value)
	}
	if value, ok := rlfu.mutation.LambNum(); ok {
		_spec.SetField(roundlambfold.FieldLambNum, field.TypeUint32, value)
	}
	if value, ok := rlfu.mutation.AddedLambNum(); ok {
		_spec.AddField(roundlambfold.FieldLambNum, field.TypeUint32, value)
	}
	if value, ok := rlfu.mutation.ProfitAndLoss(); ok {
		_spec.SetField(roundlambfold.FieldProfitAndLoss, field.TypeFloat32, value)
	}
	if value, ok := rlfu.mutation.AddedProfitAndLoss(); ok {
		_spec.AddField(roundlambfold.FieldProfitAndLoss, field.TypeFloat32, value)
	}
	if value, ok := rlfu.mutation.RoundCount(); ok {
		_spec.SetField(roundlambfold.FieldRoundCount, field.TypeUint32, value)
	}
	if value, ok := rlfu.mutation.AddedRoundCount(); ok {
		_spec.AddField(roundlambfold.FieldRoundCount, field.TypeUint32, value)
	}
	if rlfu.mutation.RoundCountCleared() {
		_spec.ClearField(roundlambfold.FieldRoundCount, field.TypeUint32)
	}
	if value, ok := rlfu.mutation.TotalRoundCount(); ok {
		_spec.SetField(roundlambfold.FieldTotalRoundCount, field.TypeUint64, value)
	}
	if value, ok := rlfu.mutation.AddedTotalRoundCount(); ok {
		_spec.AddField(roundlambfold.FieldTotalRoundCount, field.TypeUint64, value)
	}
	if rlfu.mutation.TotalRoundCountCleared() {
		_spec.ClearField(roundlambfold.FieldTotalRoundCount, field.TypeUint64)
	}
	if rlfu.mutation.RoundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roundlambfold.RoundTable,
			Columns: []string{roundlambfold.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlfu.mutation.RoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roundlambfold.RoundTable,
			Columns: []string{roundlambfold.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roundlambfold.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rlfu.mutation.done = true
	return n, nil
}

// RoundLambFoldUpdateOne is the builder for updating a single RoundLambFold entity.
type RoundLambFoldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoundLambFoldMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (rlfuo *RoundLambFoldUpdateOne) SetUpdatedAt(t time.Time) *RoundLambFoldUpdateOne {
	rlfuo.mutation.SetUpdatedAt(t)
	return rlfuo
}

// SetFoldNo sets the "fold_no" field.
func (rlfuo *RoundLambFoldUpdateOne) SetFoldNo(u uint32) *RoundLambFoldUpdateOne {
	rlfuo.mutation.ResetFoldNo()
	rlfuo.mutation.SetFoldNo(u)
	return rlfuo
}

// SetNillableFoldNo sets the "fold_no" field if the given value is not nil.
func (rlfuo *RoundLambFoldUpdateOne) SetNillableFoldNo(u *uint32) *RoundLambFoldUpdateOne {
	if u != nil {
		rlfuo.SetFoldNo(*u)
	}
	return rlfuo
}

// AddFoldNo adds u to the "fold_no" field.
func (rlfuo *RoundLambFoldUpdateOne) AddFoldNo(u int32) *RoundLambFoldUpdateOne {
	rlfuo.mutation.AddFoldNo(u)
	return rlfuo
}

// SetLambNum sets the "lamb_num" field.
func (rlfuo *RoundLambFoldUpdateOne) SetLambNum(u uint32) *RoundLambFoldUpdateOne {
	rlfuo.mutation.ResetLambNum()
	rlfuo.mutation.SetLambNum(u)
	return rlfuo
}

// SetNillableLambNum sets the "lamb_num" field if the given value is not nil.
func (rlfuo *RoundLambFoldUpdateOne) SetNillableLambNum(u *uint32) *RoundLambFoldUpdateOne {
	if u != nil {
		rlfuo.SetLambNum(*u)
	}
	return rlfuo
}

// AddLambNum adds u to the "lamb_num" field.
func (rlfuo *RoundLambFoldUpdateOne) AddLambNum(u int32) *RoundLambFoldUpdateOne {
	rlfuo.mutation.AddLambNum(u)
	return rlfuo
}

// SetRoundID sets the "round_id" field.
func (rlfuo *RoundLambFoldUpdateOne) SetRoundID(u uint64) *RoundLambFoldUpdateOne {
	rlfuo.mutation.SetRoundID(u)
	return rlfuo
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (rlfuo *RoundLambFoldUpdateOne) SetNillableRoundID(u *uint64) *RoundLambFoldUpdateOne {
	if u != nil {
		rlfuo.SetRoundID(*u)
	}
	return rlfuo
}

// ClearRoundID clears the value of the "round_id" field.
func (rlfuo *RoundLambFoldUpdateOne) ClearRoundID() *RoundLambFoldUpdateOne {
	rlfuo.mutation.ClearRoundID()
	return rlfuo
}

// SetProfitAndLoss sets the "profit_and_loss" field.
func (rlfuo *RoundLambFoldUpdateOne) SetProfitAndLoss(f float32) *RoundLambFoldUpdateOne {
	rlfuo.mutation.ResetProfitAndLoss()
	rlfuo.mutation.SetProfitAndLoss(f)
	return rlfuo
}

// SetNillableProfitAndLoss sets the "profit_and_loss" field if the given value is not nil.
func (rlfuo *RoundLambFoldUpdateOne) SetNillableProfitAndLoss(f *float32) *RoundLambFoldUpdateOne {
	if f != nil {
		rlfuo.SetProfitAndLoss(*f)
	}
	return rlfuo
}

// AddProfitAndLoss adds f to the "profit_and_loss" field.
func (rlfuo *RoundLambFoldUpdateOne) AddProfitAndLoss(f float32) *RoundLambFoldUpdateOne {
	rlfuo.mutation.AddProfitAndLoss(f)
	return rlfuo
}

// SetRoundCount sets the "round_count" field.
func (rlfuo *RoundLambFoldUpdateOne) SetRoundCount(u uint32) *RoundLambFoldUpdateOne {
	rlfuo.mutation.ResetRoundCount()
	rlfuo.mutation.SetRoundCount(u)
	return rlfuo
}

// SetNillableRoundCount sets the "round_count" field if the given value is not nil.
func (rlfuo *RoundLambFoldUpdateOne) SetNillableRoundCount(u *uint32) *RoundLambFoldUpdateOne {
	if u != nil {
		rlfuo.SetRoundCount(*u)
	}
	return rlfuo
}

// AddRoundCount adds u to the "round_count" field.
func (rlfuo *RoundLambFoldUpdateOne) AddRoundCount(u int32) *RoundLambFoldUpdateOne {
	rlfuo.mutation.AddRoundCount(u)
	return rlfuo
}

// ClearRoundCount clears the value of the "round_count" field.
func (rlfuo *RoundLambFoldUpdateOne) ClearRoundCount() *RoundLambFoldUpdateOne {
	rlfuo.mutation.ClearRoundCount()
	return rlfuo
}

// SetTotalRoundCount sets the "total_round_count" field.
func (rlfuo *RoundLambFoldUpdateOne) SetTotalRoundCount(u uint64) *RoundLambFoldUpdateOne {
	rlfuo.mutation.ResetTotalRoundCount()
	rlfuo.mutation.SetTotalRoundCount(u)
	return rlfuo
}

// SetNillableTotalRoundCount sets the "total_round_count" field if the given value is not nil.
func (rlfuo *RoundLambFoldUpdateOne) SetNillableTotalRoundCount(u *uint64) *RoundLambFoldUpdateOne {
	if u != nil {
		rlfuo.SetTotalRoundCount(*u)
	}
	return rlfuo
}

// AddTotalRoundCount adds u to the "total_round_count" field.
func (rlfuo *RoundLambFoldUpdateOne) AddTotalRoundCount(u int64) *RoundLambFoldUpdateOne {
	rlfuo.mutation.AddTotalRoundCount(u)
	return rlfuo
}

// ClearTotalRoundCount clears the value of the "total_round_count" field.
func (rlfuo *RoundLambFoldUpdateOne) ClearTotalRoundCount() *RoundLambFoldUpdateOne {
	rlfuo.mutation.ClearTotalRoundCount()
	return rlfuo
}

// SetRound sets the "round" edge to the Round entity.
func (rlfuo *RoundLambFoldUpdateOne) SetRound(r *Round) *RoundLambFoldUpdateOne {
	return rlfuo.SetRoundID(r.ID)
}

// Mutation returns the RoundLambFoldMutation object of the builder.
func (rlfuo *RoundLambFoldUpdateOne) Mutation() *RoundLambFoldMutation {
	return rlfuo.mutation
}

// ClearRound clears the "round" edge to the Round entity.
func (rlfuo *RoundLambFoldUpdateOne) ClearRound() *RoundLambFoldUpdateOne {
	rlfuo.mutation.ClearRound()
	return rlfuo
}

// Where appends a list predicates to the RoundLambFoldUpdate builder.
func (rlfuo *RoundLambFoldUpdateOne) Where(ps ...predicate.RoundLambFold) *RoundLambFoldUpdateOne {
	rlfuo.mutation.Where(ps...)
	return rlfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rlfuo *RoundLambFoldUpdateOne) Select(field string, fields ...string) *RoundLambFoldUpdateOne {
	rlfuo.fields = append([]string{field}, fields...)
	return rlfuo
}

// Save executes the query and returns the updated RoundLambFold entity.
func (rlfuo *RoundLambFoldUpdateOne) Save(ctx context.Context) (*RoundLambFold, error) {
	rlfuo.defaults()
	return withHooks(ctx, rlfuo.sqlSave, rlfuo.mutation, rlfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rlfuo *RoundLambFoldUpdateOne) SaveX(ctx context.Context) *RoundLambFold {
	node, err := rlfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rlfuo *RoundLambFoldUpdateOne) Exec(ctx context.Context) error {
	_, err := rlfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlfuo *RoundLambFoldUpdateOne) ExecX(ctx context.Context) {
	if err := rlfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rlfuo *RoundLambFoldUpdateOne) defaults() {
	if _, ok := rlfuo.mutation.UpdatedAt(); !ok {
		v := roundlambfold.UpdateDefaultUpdatedAt()
		rlfuo.mutation.SetUpdatedAt(v)
	}
}

func (rlfuo *RoundLambFoldUpdateOne) sqlSave(ctx context.Context) (_node *RoundLambFold, err error) {
	_spec := sqlgraph.NewUpdateSpec(roundlambfold.Table, roundlambfold.Columns, sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64))
	id, ok := rlfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoundLambFold.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rlfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roundlambfold.FieldID)
		for _, f := range fields {
			if !roundlambfold.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roundlambfold.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rlfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(roundlambfold.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rlfuo.mutation.FoldNo(); ok {
		_spec.SetField(roundlambfold.FieldFoldNo, field.TypeUint32, value)
	}
	if value, ok := rlfuo.mutation.AddedFoldNo(); ok {
		_spec.AddField(roundlambfold.FieldFoldNo, field.TypeUint32, value)
	}
	if value, ok := rlfuo.mutation.LambNum(); ok {
		_spec.SetField(roundlambfold.FieldLambNum, field.TypeUint32, value)
	}
	if value, ok := rlfuo.mutation.AddedLambNum(); ok {
		_spec.AddField(roundlambfold.FieldLambNum, field.TypeUint32, value)
	}
	if value, ok := rlfuo.mutation.ProfitAndLoss(); ok {
		_spec.SetField(roundlambfold.FieldProfitAndLoss, field.TypeFloat32, value)
	}
	if value, ok := rlfuo.mutation.AddedProfitAndLoss(); ok {
		_spec.AddField(roundlambfold.FieldProfitAndLoss, field.TypeFloat32, value)
	}
	if value, ok := rlfuo.mutation.RoundCount(); ok {
		_spec.SetField(roundlambfold.FieldRoundCount, field.TypeUint32, value)
	}
	if value, ok := rlfuo.mutation.AddedRoundCount(); ok {
		_spec.AddField(roundlambfold.FieldRoundCount, field.TypeUint32, value)
	}
	if rlfuo.mutation.RoundCountCleared() {
		_spec.ClearField(roundlambfold.FieldRoundCount, field.TypeUint32)
	}
	if value, ok := rlfuo.mutation.TotalRoundCount(); ok {
		_spec.SetField(roundlambfold.FieldTotalRoundCount, field.TypeUint64, value)
	}
	if value, ok := rlfuo.mutation.AddedTotalRoundCount(); ok {
		_spec.AddField(roundlambfold.FieldTotalRoundCount, field.TypeUint64, value)
	}
	if rlfuo.mutation.TotalRoundCountCleared() {
		_spec.ClearField(roundlambfold.FieldTotalRoundCount, field.TypeUint64)
	}
	if rlfuo.mutation.RoundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roundlambfold.RoundTable,
			Columns: []string{roundlambfold.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlfuo.mutation.RoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roundlambfold.RoundTable,
			Columns: []string{roundlambfold.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoundLambFold{config: rlfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rlfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roundlambfold.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rlfuo.mutation.done = true
	return _node, nil
}
