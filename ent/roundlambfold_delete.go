// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
	"github.com/kebin6/wolflamp-rpc/ent/roundlambfold"
)

// RoundLambFoldDelete is the builder for deleting a RoundLambFold entity.
type RoundLambFoldDelete struct {
	config
	hooks    []Hook
	mutation *RoundLambFoldMutation
}

// Where appends a list predicates to the RoundLambFoldDelete builder.
func (rlfd *RoundLambFoldDelete) Where(ps ...predicate.RoundLambFold) *RoundLambFoldDelete {
	rlfd.mutation.Where(ps...)
	return rlfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rlfd *RoundLambFoldDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rlfd.sqlExec, rlfd.mutation, rlfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rlfd *RoundLambFoldDelete) ExecX(ctx context.Context) int {
	n, err := rlfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rlfd *RoundLambFoldDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(roundlambfold.Table, sqlgraph.NewFieldSpec(roundlambfold.FieldID, field.TypeUint64))
	if ps := rlfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rlfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rlfd.mutation.done = true
	return affected, err
}

// RoundLambFoldDeleteOne is the builder for deleting a single RoundLambFold entity.
type RoundLambFoldDeleteOne struct {
	rlfd *RoundLambFoldDelete
}

// Where appends a list predicates to the RoundLambFoldDelete builder.
func (rlfdo *RoundLambFoldDeleteOne) Where(ps ...predicate.RoundLambFold) *RoundLambFoldDeleteOne {
	rlfdo.rlfd.mutation.Where(ps...)
	return rlfdo
}

// Exec executes the deletion query.
func (rlfdo *RoundLambFoldDeleteOne) Exec(ctx context.Context) error {
	n, err := rlfdo.rlfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{roundlambfold.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rlfdo *RoundLambFoldDeleteOne) ExecX(ctx context.Context) {
	if err := rlfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
