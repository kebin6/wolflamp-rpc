// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
	"github.com/kebin6/wolflamp-rpc/ent/statement"
)

// StatementUpdate is the builder for updating Statement entities.
type StatementUpdate struct {
	config
	hooks    []Hook
	mutation *StatementMutation
}

// Where appends a list predicates to the StatementUpdate builder.
func (su *StatementUpdate) Where(ps ...predicate.Statement) *StatementUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StatementUpdate) SetUpdatedAt(t time.Time) *StatementUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetStatus sets the "status" field.
func (su *StatementUpdate) SetStatus(u uint8) *StatementUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(u)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StatementUpdate) SetNillableStatus(u *uint8) *StatementUpdate {
	if u != nil {
		su.SetStatus(*u)
	}
	return su
}

// AddStatus adds u to the "status" field.
func (su *StatementUpdate) AddStatus(u int8) *StatementUpdate {
	su.mutation.AddStatus(u)
	return su
}

// ClearStatus clears the value of the "status" field.
func (su *StatementUpdate) ClearStatus() *StatementUpdate {
	su.mutation.ClearStatus()
	return su
}

// SetPlayerID sets the "player_id" field.
func (su *StatementUpdate) SetPlayerID(u uint64) *StatementUpdate {
	su.mutation.ResetPlayerID()
	su.mutation.SetPlayerID(u)
	return su
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillablePlayerID(u *uint64) *StatementUpdate {
	if u != nil {
		su.SetPlayerID(*u)
	}
	return su
}

// AddPlayerID adds u to the "player_id" field.
func (su *StatementUpdate) AddPlayerID(u int64) *StatementUpdate {
	su.mutation.AddPlayerID(u)
	return su
}

// SetModule sets the "module" field.
func (su *StatementUpdate) SetModule(u uint32) *StatementUpdate {
	su.mutation.ResetModule()
	su.mutation.SetModule(u)
	return su
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (su *StatementUpdate) SetNillableModule(u *uint32) *StatementUpdate {
	if u != nil {
		su.SetModule(*u)
	}
	return su
}

// AddModule adds u to the "module" field.
func (su *StatementUpdate) AddModule(u int32) *StatementUpdate {
	su.mutation.AddModule(u)
	return su
}

// SetCode sets the "code" field.
func (su *StatementUpdate) SetCode(s string) *StatementUpdate {
	su.mutation.SetCode(s)
	return su
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCode(s *string) *StatementUpdate {
	if s != nil {
		su.SetCode(*s)
	}
	return su
}

// SetInoutType sets the "inout_type" field.
func (su *StatementUpdate) SetInoutType(u uint32) *StatementUpdate {
	su.mutation.ResetInoutType()
	su.mutation.SetInoutType(u)
	return su
}

// SetNillableInoutType sets the "inout_type" field if the given value is not nil.
func (su *StatementUpdate) SetNillableInoutType(u *uint32) *StatementUpdate {
	if u != nil {
		su.SetInoutType(*u)
	}
	return su
}

// AddInoutType adds u to the "inout_type" field.
func (su *StatementUpdate) AddInoutType(u int32) *StatementUpdate {
	su.mutation.AddInoutType(u)
	return su
}

// SetAmount sets the "amount" field.
func (su *StatementUpdate) SetAmount(f float64) *StatementUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(f)
	return su
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAmount(f *float64) *StatementUpdate {
	if f != nil {
		su.SetAmount(*f)
	}
	return su
}

// AddAmount adds f to the "amount" field.
func (su *StatementUpdate) AddAmount(f float64) *StatementUpdate {
	su.mutation.AddAmount(f)
	return su
}

// SetReferID sets the "refer_id" field.
func (su *StatementUpdate) SetReferID(s string) *StatementUpdate {
	su.mutation.SetReferID(s)
	return su
}

// SetNillableReferID sets the "refer_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableReferID(s *string) *StatementUpdate {
	if s != nil {
		su.SetReferID(*s)
	}
	return su
}

// SetRemark sets the "remark" field.
func (su *StatementUpdate) SetRemark(s string) *StatementUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *StatementUpdate) SetNillableRemark(s *string) *StatementUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// Mutation returns the StatementMutation object of the builder.
func (su *StatementUpdate) Mutation() *StatementMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatementUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatementUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatementUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatementUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StatementUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := statement.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *StatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(statement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(statement.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(statement.FieldStatus, field.TypeUint8, value)
	}
	if su.mutation.StatusCleared() {
		_spec.ClearField(statement.FieldStatus, field.TypeUint8)
	}
	if value, ok := su.mutation.PlayerID(); ok {
		_spec.SetField(statement.FieldPlayerID, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedPlayerID(); ok {
		_spec.AddField(statement.FieldPlayerID, field.TypeUint64, value)
	}
	if value, ok := su.mutation.Module(); ok {
		_spec.SetField(statement.FieldModule, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedModule(); ok {
		_spec.AddField(statement.FieldModule, field.TypeUint32, value)
	}
	if value, ok := su.mutation.Code(); ok {
		_spec.SetField(statement.FieldCode, field.TypeString, value)
	}
	if value, ok := su.mutation.InoutType(); ok {
		_spec.SetField(statement.FieldInoutType, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedInoutType(); ok {
		_spec.AddField(statement.FieldInoutType, field.TypeUint32, value)
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.AddField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.ReferID(); ok {
		_spec.SetField(statement.FieldReferID, field.TypeString, value)
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.SetField(statement.FieldRemark, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StatementUpdateOne is the builder for updating a single Statement entity.
type StatementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatementMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StatementUpdateOne) SetUpdatedAt(t time.Time) *StatementUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetStatus sets the "status" field.
func (suo *StatementUpdateOne) SetStatus(u uint8) *StatementUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(u)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableStatus(u *uint8) *StatementUpdateOne {
	if u != nil {
		suo.SetStatus(*u)
	}
	return suo
}

// AddStatus adds u to the "status" field.
func (suo *StatementUpdateOne) AddStatus(u int8) *StatementUpdateOne {
	suo.mutation.AddStatus(u)
	return suo
}

// ClearStatus clears the value of the "status" field.
func (suo *StatementUpdateOne) ClearStatus() *StatementUpdateOne {
	suo.mutation.ClearStatus()
	return suo
}

// SetPlayerID sets the "player_id" field.
func (suo *StatementUpdateOne) SetPlayerID(u uint64) *StatementUpdateOne {
	suo.mutation.ResetPlayerID()
	suo.mutation.SetPlayerID(u)
	return suo
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillablePlayerID(u *uint64) *StatementUpdateOne {
	if u != nil {
		suo.SetPlayerID(*u)
	}
	return suo
}

// AddPlayerID adds u to the "player_id" field.
func (suo *StatementUpdateOne) AddPlayerID(u int64) *StatementUpdateOne {
	suo.mutation.AddPlayerID(u)
	return suo
}

// SetModule sets the "module" field.
func (suo *StatementUpdateOne) SetModule(u uint32) *StatementUpdateOne {
	suo.mutation.ResetModule()
	suo.mutation.SetModule(u)
	return suo
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableModule(u *uint32) *StatementUpdateOne {
	if u != nil {
		suo.SetModule(*u)
	}
	return suo
}

// AddModule adds u to the "module" field.
func (suo *StatementUpdateOne) AddModule(u int32) *StatementUpdateOne {
	suo.mutation.AddModule(u)
	return suo
}

// SetCode sets the "code" field.
func (suo *StatementUpdateOne) SetCode(s string) *StatementUpdateOne {
	suo.mutation.SetCode(s)
	return suo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCode(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetCode(*s)
	}
	return suo
}

// SetInoutType sets the "inout_type" field.
func (suo *StatementUpdateOne) SetInoutType(u uint32) *StatementUpdateOne {
	suo.mutation.ResetInoutType()
	suo.mutation.SetInoutType(u)
	return suo
}

// SetNillableInoutType sets the "inout_type" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableInoutType(u *uint32) *StatementUpdateOne {
	if u != nil {
		suo.SetInoutType(*u)
	}
	return suo
}

// AddInoutType adds u to the "inout_type" field.
func (suo *StatementUpdateOne) AddInoutType(u int32) *StatementUpdateOne {
	suo.mutation.AddInoutType(u)
	return suo
}

// SetAmount sets the "amount" field.
func (suo *StatementUpdateOne) SetAmount(f float64) *StatementUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(f)
	return suo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAmount(f *float64) *StatementUpdateOne {
	if f != nil {
		suo.SetAmount(*f)
	}
	return suo
}

// AddAmount adds f to the "amount" field.
func (suo *StatementUpdateOne) AddAmount(f float64) *StatementUpdateOne {
	suo.mutation.AddAmount(f)
	return suo
}

// SetReferID sets the "refer_id" field.
func (suo *StatementUpdateOne) SetReferID(s string) *StatementUpdateOne {
	suo.mutation.SetReferID(s)
	return suo
}

// SetNillableReferID sets the "refer_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableReferID(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetReferID(*s)
	}
	return suo
}

// SetRemark sets the "remark" field.
func (suo *StatementUpdateOne) SetRemark(s string) *StatementUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableRemark(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// Mutation returns the StatementMutation object of the builder.
func (suo *StatementUpdateOne) Mutation() *StatementMutation {
	return suo.mutation
}

// Where appends a list predicates to the StatementUpdate builder.
func (suo *StatementUpdateOne) Where(ps ...predicate.Statement) *StatementUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatementUpdateOne) Select(field string, fields ...string) *StatementUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Statement entity.
func (suo *StatementUpdateOne) Save(ctx context.Context) (*Statement, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatementUpdateOne) SaveX(ctx context.Context) *Statement {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatementUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatementUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StatementUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := statement.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *StatementUpdateOne) sqlSave(ctx context.Context) (_node *Statement, err error) {
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Statement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statement.FieldID)
		for _, f := range fields {
			if !statement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(statement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(statement.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(statement.FieldStatus, field.TypeUint8, value)
	}
	if suo.mutation.StatusCleared() {
		_spec.ClearField(statement.FieldStatus, field.TypeUint8)
	}
	if value, ok := suo.mutation.PlayerID(); ok {
		_spec.SetField(statement.FieldPlayerID, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedPlayerID(); ok {
		_spec.AddField(statement.FieldPlayerID, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.Module(); ok {
		_spec.SetField(statement.FieldModule, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedModule(); ok {
		_spec.AddField(statement.FieldModule, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.Code(); ok {
		_spec.SetField(statement.FieldCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.InoutType(); ok {
		_spec.SetField(statement.FieldInoutType, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedInoutType(); ok {
		_spec.AddField(statement.FieldInoutType, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.AddField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.ReferID(); ok {
		_spec.SetField(statement.FieldReferID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.SetField(statement.FieldRemark, field.TypeString, value)
	}
	_node = &Statement{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
