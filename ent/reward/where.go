// Code generated by ent, DO NOT EDIT.

package reward

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldStatus, v))
}

// ToID applies equality check predicate on the "to_id" field. It's identical to ToIDEQ.
func ToID(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldToID, v))
}

// ContributorID applies equality check predicate on the "contributor_id" field. It's identical to ContributorIDEQ.
func ContributorID(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldContributorID, v))
}

// ContributorEmail applies equality check predicate on the "contributor_email" field. It's identical to ContributorEmailEQ.
func ContributorEmail(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldContributorEmail, v))
}

// ContributorLevel applies equality check predicate on the "contributor_level" field. It's identical to ContributorLevelEQ.
func ContributorLevel(v uint32) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldContributorLevel, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v float32) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldNum, v))
}

// Formula applies equality check predicate on the "formula" field. It's identical to FormulaEQ.
func Formula(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldFormula, v))
}

// Mode applies equality check predicate on the "mode" field. It's identical to ModeEQ.
func Mode(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldMode, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldRemark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Reward {
	return predicate.Reward(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Reward {
	return predicate.Reward(sql.FieldNotNull(FieldStatus))
}

// ToIDEQ applies the EQ predicate on the "to_id" field.
func ToIDEQ(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldToID, v))
}

// ToIDNEQ applies the NEQ predicate on the "to_id" field.
func ToIDNEQ(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldToID, v))
}

// ToIDIn applies the In predicate on the "to_id" field.
func ToIDIn(vs ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldToID, vs...))
}

// ToIDNotIn applies the NotIn predicate on the "to_id" field.
func ToIDNotIn(vs ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldToID, vs...))
}

// ToIDGT applies the GT predicate on the "to_id" field.
func ToIDGT(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldToID, v))
}

// ToIDGTE applies the GTE predicate on the "to_id" field.
func ToIDGTE(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldToID, v))
}

// ToIDLT applies the LT predicate on the "to_id" field.
func ToIDLT(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldToID, v))
}

// ToIDLTE applies the LTE predicate on the "to_id" field.
func ToIDLTE(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldToID, v))
}

// ContributorIDEQ applies the EQ predicate on the "contributor_id" field.
func ContributorIDEQ(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldContributorID, v))
}

// ContributorIDNEQ applies the NEQ predicate on the "contributor_id" field.
func ContributorIDNEQ(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldContributorID, v))
}

// ContributorIDIn applies the In predicate on the "contributor_id" field.
func ContributorIDIn(vs ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldContributorID, vs...))
}

// ContributorIDNotIn applies the NotIn predicate on the "contributor_id" field.
func ContributorIDNotIn(vs ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldContributorID, vs...))
}

// ContributorIDGT applies the GT predicate on the "contributor_id" field.
func ContributorIDGT(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldContributorID, v))
}

// ContributorIDGTE applies the GTE predicate on the "contributor_id" field.
func ContributorIDGTE(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldContributorID, v))
}

// ContributorIDLT applies the LT predicate on the "contributor_id" field.
func ContributorIDLT(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldContributorID, v))
}

// ContributorIDLTE applies the LTE predicate on the "contributor_id" field.
func ContributorIDLTE(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldContributorID, v))
}

// ContributorEmailEQ applies the EQ predicate on the "contributor_email" field.
func ContributorEmailEQ(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldContributorEmail, v))
}

// ContributorEmailNEQ applies the NEQ predicate on the "contributor_email" field.
func ContributorEmailNEQ(v string) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldContributorEmail, v))
}

// ContributorEmailIn applies the In predicate on the "contributor_email" field.
func ContributorEmailIn(vs ...string) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldContributorEmail, vs...))
}

// ContributorEmailNotIn applies the NotIn predicate on the "contributor_email" field.
func ContributorEmailNotIn(vs ...string) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldContributorEmail, vs...))
}

// ContributorEmailGT applies the GT predicate on the "contributor_email" field.
func ContributorEmailGT(v string) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldContributorEmail, v))
}

// ContributorEmailGTE applies the GTE predicate on the "contributor_email" field.
func ContributorEmailGTE(v string) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldContributorEmail, v))
}

// ContributorEmailLT applies the LT predicate on the "contributor_email" field.
func ContributorEmailLT(v string) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldContributorEmail, v))
}

// ContributorEmailLTE applies the LTE predicate on the "contributor_email" field.
func ContributorEmailLTE(v string) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldContributorEmail, v))
}

// ContributorEmailContains applies the Contains predicate on the "contributor_email" field.
func ContributorEmailContains(v string) predicate.Reward {
	return predicate.Reward(sql.FieldContains(FieldContributorEmail, v))
}

// ContributorEmailHasPrefix applies the HasPrefix predicate on the "contributor_email" field.
func ContributorEmailHasPrefix(v string) predicate.Reward {
	return predicate.Reward(sql.FieldHasPrefix(FieldContributorEmail, v))
}

// ContributorEmailHasSuffix applies the HasSuffix predicate on the "contributor_email" field.
func ContributorEmailHasSuffix(v string) predicate.Reward {
	return predicate.Reward(sql.FieldHasSuffix(FieldContributorEmail, v))
}

// ContributorEmailEqualFold applies the EqualFold predicate on the "contributor_email" field.
func ContributorEmailEqualFold(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEqualFold(FieldContributorEmail, v))
}

// ContributorEmailContainsFold applies the ContainsFold predicate on the "contributor_email" field.
func ContributorEmailContainsFold(v string) predicate.Reward {
	return predicate.Reward(sql.FieldContainsFold(FieldContributorEmail, v))
}

// ContributorLevelEQ applies the EQ predicate on the "contributor_level" field.
func ContributorLevelEQ(v uint32) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldContributorLevel, v))
}

// ContributorLevelNEQ applies the NEQ predicate on the "contributor_level" field.
func ContributorLevelNEQ(v uint32) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldContributorLevel, v))
}

// ContributorLevelIn applies the In predicate on the "contributor_level" field.
func ContributorLevelIn(vs ...uint32) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldContributorLevel, vs...))
}

// ContributorLevelNotIn applies the NotIn predicate on the "contributor_level" field.
func ContributorLevelNotIn(vs ...uint32) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldContributorLevel, vs...))
}

// ContributorLevelGT applies the GT predicate on the "contributor_level" field.
func ContributorLevelGT(v uint32) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldContributorLevel, v))
}

// ContributorLevelGTE applies the GTE predicate on the "contributor_level" field.
func ContributorLevelGTE(v uint32) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldContributorLevel, v))
}

// ContributorLevelLT applies the LT predicate on the "contributor_level" field.
func ContributorLevelLT(v uint32) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldContributorLevel, v))
}

// ContributorLevelLTE applies the LTE predicate on the "contributor_level" field.
func ContributorLevelLTE(v uint32) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldContributorLevel, v))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v float32) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v float32) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...float32) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...float32) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v float32) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v float32) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v float32) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v float32) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldNum, v))
}

// FormulaEQ applies the EQ predicate on the "formula" field.
func FormulaEQ(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldFormula, v))
}

// FormulaNEQ applies the NEQ predicate on the "formula" field.
func FormulaNEQ(v string) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldFormula, v))
}

// FormulaIn applies the In predicate on the "formula" field.
func FormulaIn(vs ...string) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldFormula, vs...))
}

// FormulaNotIn applies the NotIn predicate on the "formula" field.
func FormulaNotIn(vs ...string) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldFormula, vs...))
}

// FormulaGT applies the GT predicate on the "formula" field.
func FormulaGT(v string) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldFormula, v))
}

// FormulaGTE applies the GTE predicate on the "formula" field.
func FormulaGTE(v string) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldFormula, v))
}

// FormulaLT applies the LT predicate on the "formula" field.
func FormulaLT(v string) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldFormula, v))
}

// FormulaLTE applies the LTE predicate on the "formula" field.
func FormulaLTE(v string) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldFormula, v))
}

// FormulaContains applies the Contains predicate on the "formula" field.
func FormulaContains(v string) predicate.Reward {
	return predicate.Reward(sql.FieldContains(FieldFormula, v))
}

// FormulaHasPrefix applies the HasPrefix predicate on the "formula" field.
func FormulaHasPrefix(v string) predicate.Reward {
	return predicate.Reward(sql.FieldHasPrefix(FieldFormula, v))
}

// FormulaHasSuffix applies the HasSuffix predicate on the "formula" field.
func FormulaHasSuffix(v string) predicate.Reward {
	return predicate.Reward(sql.FieldHasSuffix(FieldFormula, v))
}

// FormulaEqualFold applies the EqualFold predicate on the "formula" field.
func FormulaEqualFold(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEqualFold(FieldFormula, v))
}

// FormulaContainsFold applies the ContainsFold predicate on the "formula" field.
func FormulaContainsFold(v string) predicate.Reward {
	return predicate.Reward(sql.FieldContainsFold(FieldFormula, v))
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldMode, v))
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v string) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldMode, v))
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...string) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldMode, vs...))
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...string) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldMode, vs...))
}

// ModeGT applies the GT predicate on the "mode" field.
func ModeGT(v string) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldMode, v))
}

// ModeGTE applies the GTE predicate on the "mode" field.
func ModeGTE(v string) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldMode, v))
}

// ModeLT applies the LT predicate on the "mode" field.
func ModeLT(v string) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldMode, v))
}

// ModeLTE applies the LTE predicate on the "mode" field.
func ModeLTE(v string) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldMode, v))
}

// ModeContains applies the Contains predicate on the "mode" field.
func ModeContains(v string) predicate.Reward {
	return predicate.Reward(sql.FieldContains(FieldMode, v))
}

// ModeHasPrefix applies the HasPrefix predicate on the "mode" field.
func ModeHasPrefix(v string) predicate.Reward {
	return predicate.Reward(sql.FieldHasPrefix(FieldMode, v))
}

// ModeHasSuffix applies the HasSuffix predicate on the "mode" field.
func ModeHasSuffix(v string) predicate.Reward {
	return predicate.Reward(sql.FieldHasSuffix(FieldMode, v))
}

// ModeEqualFold applies the EqualFold predicate on the "mode" field.
func ModeEqualFold(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEqualFold(FieldMode, v))
}

// ModeContainsFold applies the ContainsFold predicate on the "mode" field.
func ModeContainsFold(v string) predicate.Reward {
	return predicate.Reward(sql.FieldContainsFold(FieldMode, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Reward {
	return predicate.Reward(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Reward {
	return predicate.Reward(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Reward {
	return predicate.Reward(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Reward {
	return predicate.Reward(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Reward {
	return predicate.Reward(sql.FieldContainsFold(FieldRemark, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reward) predicate.Reward {
	return predicate.Reward(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reward) predicate.Reward {
	return predicate.Reward(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reward) predicate.Reward {
	return predicate.Reward(sql.NotPredicates(p))
}
