// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kebin6/wolflamp-rpc/ent/round"
	"github.com/kebin6/wolflamp-rpc/ent/roundinvest"
)

// 回合投注情况表
type RoundInvest struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 玩家ID
	PlayerID uint64 `json:"player_id,omitempty"`
	// 玩家邮箱
	PlayerEmail string `json:"player_email,omitempty"`
	// 羊圈号码
	FoldNo uint32 `json:"fold_no,omitempty"`
	// 投注羊数量
	LambNum uint32 `json:"lamb_num,omitempty"`
	// 投注盈亏结果
	ProfitAndLoss float32 `json:"profit_and_loss,omitempty"`
	// 所属回合ID
	RoundID uint64 `json:"round_id,omitempty"`
	// 当日第几回合
	RoundCount uint32 `json:"round_count,omitempty"`
	// 累计第几回合
	TotalRoundCount uint64 `json:"total_round_count,omitempty"`
	// 游戏类型：coin,token
	Mode string `json:"mode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoundInvestQuery when eager-loading is set.
	Edges        RoundInvestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoundInvestEdges holds the relations/edges for other nodes in the graph.
type RoundInvestEdges struct {
	// Round holds the value of the round edge.
	Round *Round `json:"round,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoundOrErr returns the Round value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoundInvestEdges) RoundOrErr() (*Round, error) {
	if e.Round != nil {
		return e.Round, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: round.Label}
	}
	return nil, &NotLoadedError{edge: "round"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoundInvest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case roundinvest.FieldProfitAndLoss:
			values[i] = new(sql.NullFloat64)
		case roundinvest.FieldID, roundinvest.FieldPlayerID, roundinvest.FieldFoldNo, roundinvest.FieldLambNum, roundinvest.FieldRoundID, roundinvest.FieldRoundCount, roundinvest.FieldTotalRoundCount:
			values[i] = new(sql.NullInt64)
		case roundinvest.FieldPlayerEmail, roundinvest.FieldMode:
			values[i] = new(sql.NullString)
		case roundinvest.FieldCreatedAt, roundinvest.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoundInvest fields.
func (ri *RoundInvest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case roundinvest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ri.ID = uint64(value.Int64)
		case roundinvest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ri.CreatedAt = value.Time
			}
		case roundinvest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ri.UpdatedAt = value.Time
			}
		case roundinvest.FieldPlayerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field player_id", values[i])
			} else if value.Valid {
				ri.PlayerID = uint64(value.Int64)
			}
		case roundinvest.FieldPlayerEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field player_email", values[i])
			} else if value.Valid {
				ri.PlayerEmail = value.String
			}
		case roundinvest.FieldFoldNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fold_no", values[i])
			} else if value.Valid {
				ri.FoldNo = uint32(value.Int64)
			}
		case roundinvest.FieldLambNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lamb_num", values[i])
			} else if value.Valid {
				ri.LambNum = uint32(value.Int64)
			}
		case roundinvest.FieldProfitAndLoss:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field profit_and_loss", values[i])
			} else if value.Valid {
				ri.ProfitAndLoss = float32(value.Float64)
			}
		case roundinvest.FieldRoundID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field round_id", values[i])
			} else if value.Valid {
				ri.RoundID = uint64(value.Int64)
			}
		case roundinvest.FieldRoundCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field round_count", values[i])
			} else if value.Valid {
				ri.RoundCount = uint32(value.Int64)
			}
		case roundinvest.FieldTotalRoundCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_round_count", values[i])
			} else if value.Valid {
				ri.TotalRoundCount = uint64(value.Int64)
			}
		case roundinvest.FieldMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mode", values[i])
			} else if value.Valid {
				ri.Mode = value.String
			}
		default:
			ri.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoundInvest.
// This includes values selected through modifiers, order, etc.
func (ri *RoundInvest) Value(name string) (ent.Value, error) {
	return ri.selectValues.Get(name)
}

// QueryRound queries the "round" edge of the RoundInvest entity.
func (ri *RoundInvest) QueryRound() *RoundQuery {
	return NewRoundInvestClient(ri.config).QueryRound(ri)
}

// Update returns a builder for updating this RoundInvest.
// Note that you need to call RoundInvest.Unwrap() before calling this method if this RoundInvest
// was returned from a transaction, and the transaction was committed or rolled back.
func (ri *RoundInvest) Update() *RoundInvestUpdateOne {
	return NewRoundInvestClient(ri.config).UpdateOne(ri)
}

// Unwrap unwraps the RoundInvest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ri *RoundInvest) Unwrap() *RoundInvest {
	_tx, ok := ri.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoundInvest is not a transactional entity")
	}
	ri.config.driver = _tx.drv
	return ri
}

// String implements the fmt.Stringer.
func (ri *RoundInvest) String() string {
	var builder strings.Builder
	builder.WriteString("RoundInvest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ri.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ri.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ri.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("player_id=")
	builder.WriteString(fmt.Sprintf("%v", ri.PlayerID))
	builder.WriteString(", ")
	builder.WriteString("player_email=")
	builder.WriteString(ri.PlayerEmail)
	builder.WriteString(", ")
	builder.WriteString("fold_no=")
	builder.WriteString(fmt.Sprintf("%v", ri.FoldNo))
	builder.WriteString(", ")
	builder.WriteString("lamb_num=")
	builder.WriteString(fmt.Sprintf("%v", ri.LambNum))
	builder.WriteString(", ")
	builder.WriteString("profit_and_loss=")
	builder.WriteString(fmt.Sprintf("%v", ri.ProfitAndLoss))
	builder.WriteString(", ")
	builder.WriteString("round_id=")
	builder.WriteString(fmt.Sprintf("%v", ri.RoundID))
	builder.WriteString(", ")
	builder.WriteString("round_count=")
	builder.WriteString(fmt.Sprintf("%v", ri.RoundCount))
	builder.WriteString(", ")
	builder.WriteString("total_round_count=")
	builder.WriteString(fmt.Sprintf("%v", ri.TotalRoundCount))
	builder.WriteString(", ")
	builder.WriteString("mode=")
	builder.WriteString(ri.Mode)
	builder.WriteByte(')')
	return builder.String()
}

// RoundInvests is a parsable slice of RoundInvest.
type RoundInvests []*RoundInvest
