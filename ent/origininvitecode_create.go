// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/origininvitecode"
)

// OriginInviteCodeCreate is the builder for creating a OriginInviteCode entity.
type OriginInviteCodeCreate struct {
	config
	mutation *OriginInviteCodeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oicc *OriginInviteCodeCreate) SetCreatedAt(t time.Time) *OriginInviteCodeCreate {
	oicc.mutation.SetCreatedAt(t)
	return oicc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oicc *OriginInviteCodeCreate) SetNillableCreatedAt(t *time.Time) *OriginInviteCodeCreate {
	if t != nil {
		oicc.SetCreatedAt(*t)
	}
	return oicc
}

// SetUpdatedAt sets the "updated_at" field.
func (oicc *OriginInviteCodeCreate) SetUpdatedAt(t time.Time) *OriginInviteCodeCreate {
	oicc.mutation.SetUpdatedAt(t)
	return oicc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oicc *OriginInviteCodeCreate) SetNillableUpdatedAt(t *time.Time) *OriginInviteCodeCreate {
	if t != nil {
		oicc.SetUpdatedAt(*t)
	}
	return oicc
}

// SetStatus sets the "status" field.
func (oicc *OriginInviteCodeCreate) SetStatus(u uint8) *OriginInviteCodeCreate {
	oicc.mutation.SetStatus(u)
	return oicc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oicc *OriginInviteCodeCreate) SetNillableStatus(u *uint8) *OriginInviteCodeCreate {
	if u != nil {
		oicc.SetStatus(*u)
	}
	return oicc
}

// SetCode sets the "code" field.
func (oicc *OriginInviteCodeCreate) SetCode(s string) *OriginInviteCodeCreate {
	oicc.mutation.SetCode(s)
	return oicc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (oicc *OriginInviteCodeCreate) SetNillableCode(s *string) *OriginInviteCodeCreate {
	if s != nil {
		oicc.SetCode(*s)
	}
	return oicc
}

// SetID sets the "id" field.
func (oicc *OriginInviteCodeCreate) SetID(u uint64) *OriginInviteCodeCreate {
	oicc.mutation.SetID(u)
	return oicc
}

// Mutation returns the OriginInviteCodeMutation object of the builder.
func (oicc *OriginInviteCodeCreate) Mutation() *OriginInviteCodeMutation {
	return oicc.mutation
}

// Save creates the OriginInviteCode in the database.
func (oicc *OriginInviteCodeCreate) Save(ctx context.Context) (*OriginInviteCode, error) {
	oicc.defaults()
	return withHooks(ctx, oicc.sqlSave, oicc.mutation, oicc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oicc *OriginInviteCodeCreate) SaveX(ctx context.Context) *OriginInviteCode {
	v, err := oicc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oicc *OriginInviteCodeCreate) Exec(ctx context.Context) error {
	_, err := oicc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oicc *OriginInviteCodeCreate) ExecX(ctx context.Context) {
	if err := oicc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oicc *OriginInviteCodeCreate) defaults() {
	if _, ok := oicc.mutation.CreatedAt(); !ok {
		v := origininvitecode.DefaultCreatedAt()
		oicc.mutation.SetCreatedAt(v)
	}
	if _, ok := oicc.mutation.UpdatedAt(); !ok {
		v := origininvitecode.DefaultUpdatedAt()
		oicc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oicc.mutation.Status(); !ok {
		v := origininvitecode.DefaultStatus
		oicc.mutation.SetStatus(v)
	}
	if _, ok := oicc.mutation.Code(); !ok {
		v := origininvitecode.DefaultCode
		oicc.mutation.SetCode(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oicc *OriginInviteCodeCreate) check() error {
	if _, ok := oicc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OriginInviteCode.created_at"`)}
	}
	if _, ok := oicc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OriginInviteCode.updated_at"`)}
	}
	if _, ok := oicc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "OriginInviteCode.code"`)}
	}
	return nil
}

func (oicc *OriginInviteCodeCreate) sqlSave(ctx context.Context) (*OriginInviteCode, error) {
	if err := oicc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oicc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oicc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	oicc.mutation.id = &_node.ID
	oicc.mutation.done = true
	return _node, nil
}

func (oicc *OriginInviteCodeCreate) createSpec() (*OriginInviteCode, *sqlgraph.CreateSpec) {
	var (
		_node = &OriginInviteCode{config: oicc.config}
		_spec = sqlgraph.NewCreateSpec(origininvitecode.Table, sqlgraph.NewFieldSpec(origininvitecode.FieldID, field.TypeUint64))
	)
	if id, ok := oicc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oicc.mutation.CreatedAt(); ok {
		_spec.SetField(origininvitecode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oicc.mutation.UpdatedAt(); ok {
		_spec.SetField(origininvitecode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oicc.mutation.Status(); ok {
		_spec.SetField(origininvitecode.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := oicc.mutation.Code(); ok {
		_spec.SetField(origininvitecode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	return _node, _spec
}

// OriginInviteCodeCreateBulk is the builder for creating many OriginInviteCode entities in bulk.
type OriginInviteCodeCreateBulk struct {
	config
	err      error
	builders []*OriginInviteCodeCreate
}

// Save creates the OriginInviteCode entities in the database.
func (oiccb *OriginInviteCodeCreateBulk) Save(ctx context.Context) ([]*OriginInviteCode, error) {
	if oiccb.err != nil {
		return nil, oiccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oiccb.builders))
	nodes := make([]*OriginInviteCode, len(oiccb.builders))
	mutators := make([]Mutator, len(oiccb.builders))
	for i := range oiccb.builders {
		func(i int, root context.Context) {
			builder := oiccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OriginInviteCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oiccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oiccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oiccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oiccb *OriginInviteCodeCreateBulk) SaveX(ctx context.Context) []*OriginInviteCode {
	v, err := oiccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oiccb *OriginInviteCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := oiccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiccb *OriginInviteCodeCreateBulk) ExecX(ctx context.Context) {
	if err := oiccb.Exec(ctx); err != nil {
		panic(err)
	}
}
