// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/pool"
)

// PoolCreate is the builder for creating a Pool entity.
type PoolCreate struct {
	config
	mutation *PoolMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PoolCreate) SetCreatedAt(t time.Time) *PoolCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PoolCreate) SetNillableCreatedAt(t *time.Time) *PoolCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PoolCreate) SetUpdatedAt(t time.Time) *PoolCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PoolCreate) SetNillableUpdatedAt(t *time.Time) *PoolCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PoolCreate) SetStatus(u uint8) *PoolCreate {
	pc.mutation.SetStatus(u)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PoolCreate) SetNillableStatus(u *uint8) *PoolCreate {
	if u != nil {
		pc.SetStatus(*u)
	}
	return pc
}

// SetRoundID sets the "round_id" field.
func (pc *PoolCreate) SetRoundID(u uint64) *PoolCreate {
	pc.mutation.SetRoundID(u)
	return pc
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (pc *PoolCreate) SetNillableRoundID(u *uint64) *PoolCreate {
	if u != nil {
		pc.SetRoundID(*u)
	}
	return pc
}

// SetMode sets the "mode" field.
func (pc *PoolCreate) SetMode(s string) *PoolCreate {
	pc.mutation.SetMode(s)
	return pc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (pc *PoolCreate) SetNillableMode(s *string) *PoolCreate {
	if s != nil {
		pc.SetMode(*s)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *PoolCreate) SetType(u uint32) *PoolCreate {
	pc.mutation.SetType(u)
	return pc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pc *PoolCreate) SetNillableType(u *uint32) *PoolCreate {
	if u != nil {
		pc.SetType(*u)
	}
	return pc
}

// SetLambNum sets the "lamb_num" field.
func (pc *PoolCreate) SetLambNum(f float64) *PoolCreate {
	pc.mutation.SetLambNum(f)
	return pc
}

// SetNillableLambNum sets the "lamb_num" field if the given value is not nil.
func (pc *PoolCreate) SetNillableLambNum(f *float64) *PoolCreate {
	if f != nil {
		pc.SetLambNum(*f)
	}
	return pc
}

// SetRemark sets the "remark" field.
func (pc *PoolCreate) SetRemark(s string) *PoolCreate {
	pc.mutation.SetRemark(s)
	return pc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pc *PoolCreate) SetNillableRemark(s *string) *PoolCreate {
	if s != nil {
		pc.SetRemark(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PoolCreate) SetID(u uint64) *PoolCreate {
	pc.mutation.SetID(u)
	return pc
}

// Mutation returns the PoolMutation object of the builder.
func (pc *PoolCreate) Mutation() *PoolMutation {
	return pc.mutation
}

// Save creates the Pool in the database.
func (pc *PoolCreate) Save(ctx context.Context) (*Pool, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PoolCreate) SaveX(ctx context.Context) *Pool {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PoolCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PoolCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PoolCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := pool.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := pool.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := pool.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.RoundID(); !ok {
		v := pool.DefaultRoundID
		pc.mutation.SetRoundID(v)
	}
	if _, ok := pc.mutation.Mode(); !ok {
		v := pool.DefaultMode
		pc.mutation.SetMode(v)
	}
	if _, ok := pc.mutation.GetType(); !ok {
		v := pool.DefaultType
		pc.mutation.SetType(v)
	}
	if _, ok := pc.mutation.LambNum(); !ok {
		v := pool.DefaultLambNum
		pc.mutation.SetLambNum(v)
	}
	if _, ok := pc.mutation.Remark(); !ok {
		v := pool.DefaultRemark
		pc.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PoolCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pool.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Pool.updated_at"`)}
	}
	if _, ok := pc.mutation.RoundID(); !ok {
		return &ValidationError{Name: "round_id", err: errors.New(`ent: missing required field "Pool.round_id"`)}
	}
	if _, ok := pc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "Pool.mode"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Pool.type"`)}
	}
	if _, ok := pc.mutation.LambNum(); !ok {
		return &ValidationError{Name: "lamb_num", err: errors.New(`ent: missing required field "Pool.lamb_num"`)}
	}
	if _, ok := pc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Pool.remark"`)}
	}
	return nil
}

func (pc *PoolCreate) sqlSave(ctx context.Context) (*Pool, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PoolCreate) createSpec() (*Pool, *sqlgraph.CreateSpec) {
	var (
		_node = &Pool{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pool.Table, sqlgraph.NewFieldSpec(pool.FieldID, field.TypeUint64))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pool.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(pool.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(pool.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.RoundID(); ok {
		_spec.SetField(pool.FieldRoundID, field.TypeUint64, value)
		_node.RoundID = value
	}
	if value, ok := pc.mutation.Mode(); ok {
		_spec.SetField(pool.FieldMode, field.TypeString, value)
		_node.Mode = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(pool.FieldType, field.TypeUint32, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.LambNum(); ok {
		_spec.SetField(pool.FieldLambNum, field.TypeFloat64, value)
		_node.LambNum = value
	}
	if value, ok := pc.mutation.Remark(); ok {
		_spec.SetField(pool.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// PoolCreateBulk is the builder for creating many Pool entities in bulk.
type PoolCreateBulk struct {
	config
	err      error
	builders []*PoolCreate
}

// Save creates the Pool entities in the database.
func (pcb *PoolCreateBulk) Save(ctx context.Context) ([]*Pool, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pool, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PoolCreateBulk) SaveX(ctx context.Context) []*Pool {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PoolCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PoolCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
