// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/order"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(u uint8) *OrderCreate {
	oc.mutation.SetStatus(u)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStatus(u *uint8) *OrderCreate {
	if u != nil {
		oc.SetStatus(*u)
	}
	return oc
}

// SetPlayerID sets the "player_id" field.
func (oc *OrderCreate) SetPlayerID(u uint64) *OrderCreate {
	oc.mutation.SetPlayerID(u)
	return oc
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePlayerID(u *uint64) *OrderCreate {
	if u != nil {
		oc.SetPlayerID(*u)
	}
	return oc
}

// SetType sets the "type" field.
func (oc *OrderCreate) SetType(s string) *OrderCreate {
	oc.mutation.SetType(s)
	return oc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oc *OrderCreate) SetNillableType(s *string) *OrderCreate {
	if s != nil {
		oc.SetType(*s)
	}
	return oc
}

// SetCode sets the "code" field.
func (oc *OrderCreate) SetCode(s string) *OrderCreate {
	oc.mutation.SetCode(s)
	return oc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCode(s *string) *OrderCreate {
	if s != nil {
		oc.SetCode(*s)
	}
	return oc
}

// SetTransactionID sets the "transaction_id" field.
func (oc *OrderCreate) SetTransactionID(s string) *OrderCreate {
	oc.mutation.SetTransactionID(s)
	return oc
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableTransactionID(s *string) *OrderCreate {
	if s != nil {
		oc.SetTransactionID(*s)
	}
	return oc
}

// SetFromAddress sets the "from_address" field.
func (oc *OrderCreate) SetFromAddress(s string) *OrderCreate {
	oc.mutation.SetFromAddress(s)
	return oc
}

// SetNillableFromAddress sets the "from_address" field if the given value is not nil.
func (oc *OrderCreate) SetNillableFromAddress(s *string) *OrderCreate {
	if s != nil {
		oc.SetFromAddress(*s)
	}
	return oc
}

// SetToAddress sets the "to_address" field.
func (oc *OrderCreate) SetToAddress(s string) *OrderCreate {
	oc.mutation.SetToAddress(s)
	return oc
}

// SetNillableToAddress sets the "to_address" field if the given value is not nil.
func (oc *OrderCreate) SetNillableToAddress(s *string) *OrderCreate {
	if s != nil {
		oc.SetToAddress(*s)
	}
	return oc
}

// SetNum sets the "num" field.
func (oc *OrderCreate) SetNum(f float64) *OrderCreate {
	oc.mutation.SetNum(f)
	return oc
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (oc *OrderCreate) SetNillableNum(f *float64) *OrderCreate {
	if f != nil {
		oc.SetNum(*f)
	}
	return oc
}

// SetHandlingFee sets the "handling_fee" field.
func (oc *OrderCreate) SetHandlingFee(f float64) *OrderCreate {
	oc.mutation.SetHandlingFee(f)
	return oc
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (oc *OrderCreate) SetNillableHandlingFee(f *float64) *OrderCreate {
	if f != nil {
		oc.SetHandlingFee(*f)
	}
	return oc
}

// SetNetwork sets the "network" field.
func (oc *OrderCreate) SetNetwork(s string) *OrderCreate {
	oc.mutation.SetNetwork(s)
	return oc
}

// SetNillableNetwork sets the "network" field if the given value is not nil.
func (oc *OrderCreate) SetNillableNetwork(s *string) *OrderCreate {
	if s != nil {
		oc.SetNetwork(*s)
	}
	return oc
}

// SetRemark sets the "remark" field.
func (oc *OrderCreate) SetRemark(s string) *OrderCreate {
	oc.mutation.SetRemark(s)
	return oc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oc *OrderCreate) SetNillableRemark(s *string) *OrderCreate {
	if s != nil {
		oc.SetRemark(*s)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uint64) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Status(); !ok {
		v := order.DefaultStatus
		oc.mutation.SetStatus(v)
	}
	if _, ok := oc.mutation.PlayerID(); !ok {
		v := order.DefaultPlayerID
		oc.mutation.SetPlayerID(v)
	}
	if _, ok := oc.mutation.GetType(); !ok {
		v := order.DefaultType
		oc.mutation.SetType(v)
	}
	if _, ok := oc.mutation.Code(); !ok {
		v := order.DefaultCode
		oc.mutation.SetCode(v)
	}
	if _, ok := oc.mutation.TransactionID(); !ok {
		v := order.DefaultTransactionID
		oc.mutation.SetTransactionID(v)
	}
	if _, ok := oc.mutation.FromAddress(); !ok {
		v := order.DefaultFromAddress
		oc.mutation.SetFromAddress(v)
	}
	if _, ok := oc.mutation.ToAddress(); !ok {
		v := order.DefaultToAddress
		oc.mutation.SetToAddress(v)
	}
	if _, ok := oc.mutation.Num(); !ok {
		v := order.DefaultNum
		oc.mutation.SetNum(v)
	}
	if _, ok := oc.mutation.HandlingFee(); !ok {
		v := order.DefaultHandlingFee
		oc.mutation.SetHandlingFee(v)
	}
	if _, ok := oc.mutation.Network(); !ok {
		v := order.DefaultNetwork
		oc.mutation.SetNetwork(v)
	}
	if _, ok := oc.mutation.Remark(); !ok {
		v := order.DefaultRemark
		oc.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	if _, ok := oc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player_id", err: errors.New(`ent: missing required field "Order.player_id"`)}
	}
	if _, ok := oc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Order.type"`)}
	}
	if _, ok := oc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Order.code"`)}
	}
	if _, ok := oc.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "transaction_id", err: errors.New(`ent: missing required field "Order.transaction_id"`)}
	}
	if _, ok := oc.mutation.FromAddress(); !ok {
		return &ValidationError{Name: "from_address", err: errors.New(`ent: missing required field "Order.from_address"`)}
	}
	if _, ok := oc.mutation.ToAddress(); !ok {
		return &ValidationError{Name: "to_address", err: errors.New(`ent: missing required field "Order.to_address"`)}
	}
	if _, ok := oc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "Order.num"`)}
	}
	if _, ok := oc.mutation.HandlingFee(); !ok {
		return &ValidationError{Name: "handling_fee", err: errors.New(`ent: missing required field "Order.handling_fee"`)}
	}
	if _, ok := oc.mutation.Network(); !ok {
		return &ValidationError{Name: "network", err: errors.New(`ent: missing required field "Order.network"`)}
	}
	if _, ok := oc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Order.remark"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.PlayerID(); ok {
		_spec.SetField(order.FieldPlayerID, field.TypeUint64, value)
		_node.PlayerID = value
	}
	if value, ok := oc.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := oc.mutation.Code(); ok {
		_spec.SetField(order.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := oc.mutation.TransactionID(); ok {
		_spec.SetField(order.FieldTransactionID, field.TypeString, value)
		_node.TransactionID = value
	}
	if value, ok := oc.mutation.FromAddress(); ok {
		_spec.SetField(order.FieldFromAddress, field.TypeString, value)
		_node.FromAddress = value
	}
	if value, ok := oc.mutation.ToAddress(); ok {
		_spec.SetField(order.FieldToAddress, field.TypeString, value)
		_node.ToAddress = value
	}
	if value, ok := oc.mutation.Num(); ok {
		_spec.SetField(order.FieldNum, field.TypeFloat64, value)
		_node.Num = value
	}
	if value, ok := oc.mutation.HandlingFee(); ok {
		_spec.SetField(order.FieldHandlingFee, field.TypeFloat64, value)
		_node.HandlingFee = value
	}
	if value, ok := oc.mutation.Network(); ok {
		_spec.SetField(order.FieldNetwork, field.TypeString, value)
		_node.Network = value
	}
	if value, ok := oc.mutation.Remark(); ok {
		_spec.SetField(order.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
