// Code generated by ent, DO NOT EDIT.

package player

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldStatus, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldEmail, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPassword, v))
}

// TransactionPassword applies equality check predicate on the "transaction_password" field. It's identical to TransactionPasswordEQ.
func TransactionPassword(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTransactionPassword, v))
}

// Lamp applies equality check predicate on the "lamp" field. It's identical to LampEQ.
func Lamp(v float32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLamp, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v uint32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldRank, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldAmount, v))
}

// DepositAddress applies equality check predicate on the "deposit_address" field. It's identical to DepositAddressEQ.
func DepositAddress(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDepositAddress, v))
}

// InvitedNum applies equality check predicate on the "invited_num" field. It's identical to InvitedNumEQ.
func InvitedNum(v uint32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInvitedNum, v))
}

// TotalIncome applies equality check predicate on the "total_income" field. It's identical to TotalIncomeEQ.
func TotalIncome(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTotalIncome, v))
}

// ProfitAndLoss applies equality check predicate on the "profit_and_loss" field. It's identical to ProfitAndLossEQ.
func ProfitAndLoss(v float32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldProfitAndLoss, v))
}

// Recent100WinPercent applies equality check predicate on the "recent_100_win_percent" field. It's identical to Recent100WinPercentEQ.
func Recent100WinPercent(v float32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldRecent100WinPercent, v))
}

// InviteCode applies equality check predicate on the "invite_code" field. It's identical to InviteCodeEQ.
func InviteCode(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInviteCode, v))
}

// InviterID applies equality check predicate on the "inviter_id" field. It's identical to InviterIDEQ.
func InviterID(v uint64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInviterID, v))
}

// InvitedCode applies equality check predicate on the "invited_code" field. It's identical to InvitedCodeEQ.
func InvitedCode(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInvitedCode, v))
}

// SystemCommission applies equality check predicate on the "system_commission" field. It's identical to SystemCommissionEQ.
func SystemCommission(v float32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldSystemCommission, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldStatus))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldPassword, v))
}

// TransactionPasswordEQ applies the EQ predicate on the "transaction_password" field.
func TransactionPasswordEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTransactionPassword, v))
}

// TransactionPasswordNEQ applies the NEQ predicate on the "transaction_password" field.
func TransactionPasswordNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldTransactionPassword, v))
}

// TransactionPasswordIn applies the In predicate on the "transaction_password" field.
func TransactionPasswordIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldTransactionPassword, vs...))
}

// TransactionPasswordNotIn applies the NotIn predicate on the "transaction_password" field.
func TransactionPasswordNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldTransactionPassword, vs...))
}

// TransactionPasswordGT applies the GT predicate on the "transaction_password" field.
func TransactionPasswordGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldTransactionPassword, v))
}

// TransactionPasswordGTE applies the GTE predicate on the "transaction_password" field.
func TransactionPasswordGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldTransactionPassword, v))
}

// TransactionPasswordLT applies the LT predicate on the "transaction_password" field.
func TransactionPasswordLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldTransactionPassword, v))
}

// TransactionPasswordLTE applies the LTE predicate on the "transaction_password" field.
func TransactionPasswordLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldTransactionPassword, v))
}

// TransactionPasswordContains applies the Contains predicate on the "transaction_password" field.
func TransactionPasswordContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldTransactionPassword, v))
}

// TransactionPasswordHasPrefix applies the HasPrefix predicate on the "transaction_password" field.
func TransactionPasswordHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldTransactionPassword, v))
}

// TransactionPasswordHasSuffix applies the HasSuffix predicate on the "transaction_password" field.
func TransactionPasswordHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldTransactionPassword, v))
}

// TransactionPasswordEqualFold applies the EqualFold predicate on the "transaction_password" field.
func TransactionPasswordEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldTransactionPassword, v))
}

// TransactionPasswordContainsFold applies the ContainsFold predicate on the "transaction_password" field.
func TransactionPasswordContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldTransactionPassword, v))
}

// LampEQ applies the EQ predicate on the "lamp" field.
func LampEQ(v float32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldLamp, v))
}

// LampNEQ applies the NEQ predicate on the "lamp" field.
func LampNEQ(v float32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldLamp, v))
}

// LampIn applies the In predicate on the "lamp" field.
func LampIn(vs ...float32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldLamp, vs...))
}

// LampNotIn applies the NotIn predicate on the "lamp" field.
func LampNotIn(vs ...float32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldLamp, vs...))
}

// LampGT applies the GT predicate on the "lamp" field.
func LampGT(v float32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldLamp, v))
}

// LampGTE applies the GTE predicate on the "lamp" field.
func LampGTE(v float32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldLamp, v))
}

// LampLT applies the LT predicate on the "lamp" field.
func LampLT(v float32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldLamp, v))
}

// LampLTE applies the LTE predicate on the "lamp" field.
func LampLTE(v float32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldLamp, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v uint32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v uint32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...uint32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...uint32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v uint32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v uint32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v uint32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v uint32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldRank, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldAmount, v))
}

// DepositAddressEQ applies the EQ predicate on the "deposit_address" field.
func DepositAddressEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDepositAddress, v))
}

// DepositAddressNEQ applies the NEQ predicate on the "deposit_address" field.
func DepositAddressNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldDepositAddress, v))
}

// DepositAddressIn applies the In predicate on the "deposit_address" field.
func DepositAddressIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldDepositAddress, vs...))
}

// DepositAddressNotIn applies the NotIn predicate on the "deposit_address" field.
func DepositAddressNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldDepositAddress, vs...))
}

// DepositAddressGT applies the GT predicate on the "deposit_address" field.
func DepositAddressGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldDepositAddress, v))
}

// DepositAddressGTE applies the GTE predicate on the "deposit_address" field.
func DepositAddressGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldDepositAddress, v))
}

// DepositAddressLT applies the LT predicate on the "deposit_address" field.
func DepositAddressLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldDepositAddress, v))
}

// DepositAddressLTE applies the LTE predicate on the "deposit_address" field.
func DepositAddressLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldDepositAddress, v))
}

// DepositAddressContains applies the Contains predicate on the "deposit_address" field.
func DepositAddressContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldDepositAddress, v))
}

// DepositAddressHasPrefix applies the HasPrefix predicate on the "deposit_address" field.
func DepositAddressHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldDepositAddress, v))
}

// DepositAddressHasSuffix applies the HasSuffix predicate on the "deposit_address" field.
func DepositAddressHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldDepositAddress, v))
}

// DepositAddressEqualFold applies the EqualFold predicate on the "deposit_address" field.
func DepositAddressEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldDepositAddress, v))
}

// DepositAddressContainsFold applies the ContainsFold predicate on the "deposit_address" field.
func DepositAddressContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldDepositAddress, v))
}

// InvitedNumEQ applies the EQ predicate on the "invited_num" field.
func InvitedNumEQ(v uint32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInvitedNum, v))
}

// InvitedNumNEQ applies the NEQ predicate on the "invited_num" field.
func InvitedNumNEQ(v uint32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldInvitedNum, v))
}

// InvitedNumIn applies the In predicate on the "invited_num" field.
func InvitedNumIn(vs ...uint32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldInvitedNum, vs...))
}

// InvitedNumNotIn applies the NotIn predicate on the "invited_num" field.
func InvitedNumNotIn(vs ...uint32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldInvitedNum, vs...))
}

// InvitedNumGT applies the GT predicate on the "invited_num" field.
func InvitedNumGT(v uint32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldInvitedNum, v))
}

// InvitedNumGTE applies the GTE predicate on the "invited_num" field.
func InvitedNumGTE(v uint32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldInvitedNum, v))
}

// InvitedNumLT applies the LT predicate on the "invited_num" field.
func InvitedNumLT(v uint32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldInvitedNum, v))
}

// InvitedNumLTE applies the LTE predicate on the "invited_num" field.
func InvitedNumLTE(v uint32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldInvitedNum, v))
}

// TotalIncomeEQ applies the EQ predicate on the "total_income" field.
func TotalIncomeEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldTotalIncome, v))
}

// TotalIncomeNEQ applies the NEQ predicate on the "total_income" field.
func TotalIncomeNEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldTotalIncome, v))
}

// TotalIncomeIn applies the In predicate on the "total_income" field.
func TotalIncomeIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldTotalIncome, vs...))
}

// TotalIncomeNotIn applies the NotIn predicate on the "total_income" field.
func TotalIncomeNotIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldTotalIncome, vs...))
}

// TotalIncomeGT applies the GT predicate on the "total_income" field.
func TotalIncomeGT(v float64) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldTotalIncome, v))
}

// TotalIncomeGTE applies the GTE predicate on the "total_income" field.
func TotalIncomeGTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldTotalIncome, v))
}

// TotalIncomeLT applies the LT predicate on the "total_income" field.
func TotalIncomeLT(v float64) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldTotalIncome, v))
}

// TotalIncomeLTE applies the LTE predicate on the "total_income" field.
func TotalIncomeLTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldTotalIncome, v))
}

// ProfitAndLossEQ applies the EQ predicate on the "profit_and_loss" field.
func ProfitAndLossEQ(v float32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldProfitAndLoss, v))
}

// ProfitAndLossNEQ applies the NEQ predicate on the "profit_and_loss" field.
func ProfitAndLossNEQ(v float32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldProfitAndLoss, v))
}

// ProfitAndLossIn applies the In predicate on the "profit_and_loss" field.
func ProfitAndLossIn(vs ...float32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldProfitAndLoss, vs...))
}

// ProfitAndLossNotIn applies the NotIn predicate on the "profit_and_loss" field.
func ProfitAndLossNotIn(vs ...float32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldProfitAndLoss, vs...))
}

// ProfitAndLossGT applies the GT predicate on the "profit_and_loss" field.
func ProfitAndLossGT(v float32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldProfitAndLoss, v))
}

// ProfitAndLossGTE applies the GTE predicate on the "profit_and_loss" field.
func ProfitAndLossGTE(v float32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldProfitAndLoss, v))
}

// ProfitAndLossLT applies the LT predicate on the "profit_and_loss" field.
func ProfitAndLossLT(v float32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldProfitAndLoss, v))
}

// ProfitAndLossLTE applies the LTE predicate on the "profit_and_loss" field.
func ProfitAndLossLTE(v float32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldProfitAndLoss, v))
}

// Recent100WinPercentEQ applies the EQ predicate on the "recent_100_win_percent" field.
func Recent100WinPercentEQ(v float32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldRecent100WinPercent, v))
}

// Recent100WinPercentNEQ applies the NEQ predicate on the "recent_100_win_percent" field.
func Recent100WinPercentNEQ(v float32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldRecent100WinPercent, v))
}

// Recent100WinPercentIn applies the In predicate on the "recent_100_win_percent" field.
func Recent100WinPercentIn(vs ...float32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldRecent100WinPercent, vs...))
}

// Recent100WinPercentNotIn applies the NotIn predicate on the "recent_100_win_percent" field.
func Recent100WinPercentNotIn(vs ...float32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldRecent100WinPercent, vs...))
}

// Recent100WinPercentGT applies the GT predicate on the "recent_100_win_percent" field.
func Recent100WinPercentGT(v float32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldRecent100WinPercent, v))
}

// Recent100WinPercentGTE applies the GTE predicate on the "recent_100_win_percent" field.
func Recent100WinPercentGTE(v float32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldRecent100WinPercent, v))
}

// Recent100WinPercentLT applies the LT predicate on the "recent_100_win_percent" field.
func Recent100WinPercentLT(v float32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldRecent100WinPercent, v))
}

// Recent100WinPercentLTE applies the LTE predicate on the "recent_100_win_percent" field.
func Recent100WinPercentLTE(v float32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldRecent100WinPercent, v))
}

// InviteCodeEQ applies the EQ predicate on the "invite_code" field.
func InviteCodeEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInviteCode, v))
}

// InviteCodeNEQ applies the NEQ predicate on the "invite_code" field.
func InviteCodeNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldInviteCode, v))
}

// InviteCodeIn applies the In predicate on the "invite_code" field.
func InviteCodeIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldInviteCode, vs...))
}

// InviteCodeNotIn applies the NotIn predicate on the "invite_code" field.
func InviteCodeNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldInviteCode, vs...))
}

// InviteCodeGT applies the GT predicate on the "invite_code" field.
func InviteCodeGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldInviteCode, v))
}

// InviteCodeGTE applies the GTE predicate on the "invite_code" field.
func InviteCodeGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldInviteCode, v))
}

// InviteCodeLT applies the LT predicate on the "invite_code" field.
func InviteCodeLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldInviteCode, v))
}

// InviteCodeLTE applies the LTE predicate on the "invite_code" field.
func InviteCodeLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldInviteCode, v))
}

// InviteCodeContains applies the Contains predicate on the "invite_code" field.
func InviteCodeContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldInviteCode, v))
}

// InviteCodeHasPrefix applies the HasPrefix predicate on the "invite_code" field.
func InviteCodeHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldInviteCode, v))
}

// InviteCodeHasSuffix applies the HasSuffix predicate on the "invite_code" field.
func InviteCodeHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldInviteCode, v))
}

// InviteCodeEqualFold applies the EqualFold predicate on the "invite_code" field.
func InviteCodeEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldInviteCode, v))
}

// InviteCodeContainsFold applies the ContainsFold predicate on the "invite_code" field.
func InviteCodeContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldInviteCode, v))
}

// InviterIDEQ applies the EQ predicate on the "inviter_id" field.
func InviterIDEQ(v uint64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInviterID, v))
}

// InviterIDNEQ applies the NEQ predicate on the "inviter_id" field.
func InviterIDNEQ(v uint64) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldInviterID, v))
}

// InviterIDIn applies the In predicate on the "inviter_id" field.
func InviterIDIn(vs ...uint64) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldInviterID, vs...))
}

// InviterIDNotIn applies the NotIn predicate on the "inviter_id" field.
func InviterIDNotIn(vs ...uint64) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldInviterID, vs...))
}

// InviterIDIsNil applies the IsNil predicate on the "inviter_id" field.
func InviterIDIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldInviterID))
}

// InviterIDNotNil applies the NotNil predicate on the "inviter_id" field.
func InviterIDNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldInviterID))
}

// InvitedCodeEQ applies the EQ predicate on the "invited_code" field.
func InvitedCodeEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldInvitedCode, v))
}

// InvitedCodeNEQ applies the NEQ predicate on the "invited_code" field.
func InvitedCodeNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldInvitedCode, v))
}

// InvitedCodeIn applies the In predicate on the "invited_code" field.
func InvitedCodeIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldInvitedCode, vs...))
}

// InvitedCodeNotIn applies the NotIn predicate on the "invited_code" field.
func InvitedCodeNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldInvitedCode, vs...))
}

// InvitedCodeGT applies the GT predicate on the "invited_code" field.
func InvitedCodeGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldInvitedCode, v))
}

// InvitedCodeGTE applies the GTE predicate on the "invited_code" field.
func InvitedCodeGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldInvitedCode, v))
}

// InvitedCodeLT applies the LT predicate on the "invited_code" field.
func InvitedCodeLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldInvitedCode, v))
}

// InvitedCodeLTE applies the LTE predicate on the "invited_code" field.
func InvitedCodeLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldInvitedCode, v))
}

// InvitedCodeContains applies the Contains predicate on the "invited_code" field.
func InvitedCodeContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldInvitedCode, v))
}

// InvitedCodeHasPrefix applies the HasPrefix predicate on the "invited_code" field.
func InvitedCodeHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldInvitedCode, v))
}

// InvitedCodeHasSuffix applies the HasSuffix predicate on the "invited_code" field.
func InvitedCodeHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldInvitedCode, v))
}

// InvitedCodeEqualFold applies the EqualFold predicate on the "invited_code" field.
func InvitedCodeEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldInvitedCode, v))
}

// InvitedCodeContainsFold applies the ContainsFold predicate on the "invited_code" field.
func InvitedCodeContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldInvitedCode, v))
}

// SystemCommissionEQ applies the EQ predicate on the "system_commission" field.
func SystemCommissionEQ(v float32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldSystemCommission, v))
}

// SystemCommissionNEQ applies the NEQ predicate on the "system_commission" field.
func SystemCommissionNEQ(v float32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldSystemCommission, v))
}

// SystemCommissionIn applies the In predicate on the "system_commission" field.
func SystemCommissionIn(vs ...float32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldSystemCommission, vs...))
}

// SystemCommissionNotIn applies the NotIn predicate on the "system_commission" field.
func SystemCommissionNotIn(vs ...float32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldSystemCommission, vs...))
}

// SystemCommissionGT applies the GT predicate on the "system_commission" field.
func SystemCommissionGT(v float32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldSystemCommission, v))
}

// SystemCommissionGTE applies the GTE predicate on the "system_commission" field.
func SystemCommissionGTE(v float32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldSystemCommission, v))
}

// SystemCommissionLT applies the LT predicate on the "system_commission" field.
func SystemCommissionLT(v float32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldSystemCommission, v))
}

// SystemCommissionLTE applies the LTE predicate on the "system_commission" field.
func SystemCommissionLTE(v float32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldSystemCommission, v))
}

// HasInviter applies the HasEdge predicate on the "inviter" edge.
func HasInviter() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InviterTable, InviterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviterWith applies the HasEdge predicate on the "inviter" edge with a given conditions (other predicates).
func HasInviterWith(preds ...predicate.Player) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newInviterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvitees applies the HasEdge predicate on the "invitees" edge.
func HasInvitees() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InviteesTable, InviteesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviteesWith applies the HasEdge predicate on the "invitees" edge with a given conditions (other predicates).
func HasInviteesWith(preds ...predicate.Player) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newInviteesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Player) predicate.Player {
	return predicate.Player(sql.NotPredicates(p))
}
