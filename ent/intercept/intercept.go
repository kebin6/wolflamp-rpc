// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/kebin6/wolflamp-rpc/ent"
	"github.com/kebin6/wolflamp-rpc/ent/banner"
	"github.com/kebin6/wolflamp-rpc/ent/exchange"
	"github.com/kebin6/wolflamp-rpc/ent/file"
	"github.com/kebin6/wolflamp-rpc/ent/order"
	"github.com/kebin6/wolflamp-rpc/ent/origininvitecode"
	"github.com/kebin6/wolflamp-rpc/ent/player"
	"github.com/kebin6/wolflamp-rpc/ent/pool"
	"github.com/kebin6/wolflamp-rpc/ent/predicate"
	"github.com/kebin6/wolflamp-rpc/ent/reward"
	"github.com/kebin6/wolflamp-rpc/ent/round"
	"github.com/kebin6/wolflamp-rpc/ent/roundinvest"
	"github.com/kebin6/wolflamp-rpc/ent/roundlambfold"
	"github.com/kebin6/wolflamp-rpc/ent/setting"
	"github.com/kebin6/wolflamp-rpc/ent/statement"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The BannerFunc type is an adapter to allow the use of ordinary function as a Querier.
type BannerFunc func(context.Context, *ent.BannerQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BannerFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BannerQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BannerQuery", q)
}

// The TraverseBanner type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBanner func(context.Context, *ent.BannerQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBanner) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBanner) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BannerQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BannerQuery", q)
}

// The ExchangeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ExchangeFunc func(context.Context, *ent.ExchangeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ExchangeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ExchangeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ExchangeQuery", q)
}

// The TraverseExchange type is an adapter to allow the use of ordinary function as Traverser.
type TraverseExchange func(context.Context, *ent.ExchangeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseExchange) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseExchange) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExchangeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ExchangeQuery", q)
}

// The FileFunc type is an adapter to allow the use of ordinary function as a Querier.
type FileFunc func(context.Context, *ent.FileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The TraverseFile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFile func(context.Context, *ent.FileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The OrderFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderFunc func(context.Context, *ent.OrderQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderQuery", q)
}

// The TraverseOrder type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrder func(context.Context, *ent.OrderQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrder) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrder) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderQuery", q)
}

// The OriginInviteCodeFunc type is an adapter to allow the use of ordinary function as a Querier.
type OriginInviteCodeFunc func(context.Context, *ent.OriginInviteCodeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OriginInviteCodeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OriginInviteCodeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OriginInviteCodeQuery", q)
}

// The TraverseOriginInviteCode type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOriginInviteCode func(context.Context, *ent.OriginInviteCodeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOriginInviteCode) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOriginInviteCode) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OriginInviteCodeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OriginInviteCodeQuery", q)
}

// The PlayerFunc type is an adapter to allow the use of ordinary function as a Querier.
type PlayerFunc func(context.Context, *ent.PlayerQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PlayerFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PlayerQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PlayerQuery", q)
}

// The TraversePlayer type is an adapter to allow the use of ordinary function as Traverser.
type TraversePlayer func(context.Context, *ent.PlayerQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePlayer) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePlayer) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlayerQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PlayerQuery", q)
}

// The PoolFunc type is an adapter to allow the use of ordinary function as a Querier.
type PoolFunc func(context.Context, *ent.PoolQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PoolFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PoolQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PoolQuery", q)
}

// The TraversePool type is an adapter to allow the use of ordinary function as Traverser.
type TraversePool func(context.Context, *ent.PoolQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePool) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePool) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PoolQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PoolQuery", q)
}

// The RewardFunc type is an adapter to allow the use of ordinary function as a Querier.
type RewardFunc func(context.Context, *ent.RewardQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RewardFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RewardQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RewardQuery", q)
}

// The TraverseReward type is an adapter to allow the use of ordinary function as Traverser.
type TraverseReward func(context.Context, *ent.RewardQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseReward) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseReward) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RewardQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RewardQuery", q)
}

// The RoundFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoundFunc func(context.Context, *ent.RoundQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoundFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoundQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoundQuery", q)
}

// The TraverseRound type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRound func(context.Context, *ent.RoundQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRound) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRound) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoundQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoundQuery", q)
}

// The RoundInvestFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoundInvestFunc func(context.Context, *ent.RoundInvestQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoundInvestFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoundInvestQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoundInvestQuery", q)
}

// The TraverseRoundInvest type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRoundInvest func(context.Context, *ent.RoundInvestQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRoundInvest) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRoundInvest) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoundInvestQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoundInvestQuery", q)
}

// The RoundLambFoldFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoundLambFoldFunc func(context.Context, *ent.RoundLambFoldQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoundLambFoldFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoundLambFoldQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoundLambFoldQuery", q)
}

// The TraverseRoundLambFold type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRoundLambFold func(context.Context, *ent.RoundLambFoldQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRoundLambFold) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRoundLambFold) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoundLambFoldQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoundLambFoldQuery", q)
}

// The SettingFunc type is an adapter to allow the use of ordinary function as a Querier.
type SettingFunc func(context.Context, *ent.SettingQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SettingFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SettingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SettingQuery", q)
}

// The TraverseSetting type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSetting func(context.Context, *ent.SettingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSetting) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSetting) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SettingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SettingQuery", q)
}

// The StatementFunc type is an adapter to allow the use of ordinary function as a Querier.
type StatementFunc func(context.Context, *ent.StatementQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f StatementFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.StatementQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.StatementQuery", q)
}

// The TraverseStatement type is an adapter to allow the use of ordinary function as Traverser.
type TraverseStatement func(context.Context, *ent.StatementQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseStatement) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseStatement) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatementQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.StatementQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.BannerQuery:
		return &query[*ent.BannerQuery, predicate.Banner, banner.OrderOption]{typ: ent.TypeBanner, tq: q}, nil
	case *ent.ExchangeQuery:
		return &query[*ent.ExchangeQuery, predicate.Exchange, exchange.OrderOption]{typ: ent.TypeExchange, tq: q}, nil
	case *ent.FileQuery:
		return &query[*ent.FileQuery, predicate.File, file.OrderOption]{typ: ent.TypeFile, tq: q}, nil
	case *ent.OrderQuery:
		return &query[*ent.OrderQuery, predicate.Order, order.OrderOption]{typ: ent.TypeOrder, tq: q}, nil
	case *ent.OriginInviteCodeQuery:
		return &query[*ent.OriginInviteCodeQuery, predicate.OriginInviteCode, origininvitecode.OrderOption]{typ: ent.TypeOriginInviteCode, tq: q}, nil
	case *ent.PlayerQuery:
		return &query[*ent.PlayerQuery, predicate.Player, player.OrderOption]{typ: ent.TypePlayer, tq: q}, nil
	case *ent.PoolQuery:
		return &query[*ent.PoolQuery, predicate.Pool, pool.OrderOption]{typ: ent.TypePool, tq: q}, nil
	case *ent.RewardQuery:
		return &query[*ent.RewardQuery, predicate.Reward, reward.OrderOption]{typ: ent.TypeReward, tq: q}, nil
	case *ent.RoundQuery:
		return &query[*ent.RoundQuery, predicate.Round, round.OrderOption]{typ: ent.TypeRound, tq: q}, nil
	case *ent.RoundInvestQuery:
		return &query[*ent.RoundInvestQuery, predicate.RoundInvest, roundinvest.OrderOption]{typ: ent.TypeRoundInvest, tq: q}, nil
	case *ent.RoundLambFoldQuery:
		return &query[*ent.RoundLambFoldQuery, predicate.RoundLambFold, roundlambfold.OrderOption]{typ: ent.TypeRoundLambFold, tq: q}, nil
	case *ent.SettingQuery:
		return &query[*ent.SettingQuery, predicate.Setting, setting.OrderOption]{typ: ent.TypeSetting, tq: q}, nil
	case *ent.StatementQuery:
		return &query[*ent.StatementQuery, predicate.Statement, statement.OrderOption]{typ: ent.TypeStatement, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
