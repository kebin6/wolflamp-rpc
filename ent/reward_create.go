// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/wolflamp-rpc/ent/reward"
)

// RewardCreate is the builder for creating a Reward entity.
type RewardCreate struct {
	config
	mutation *RewardMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RewardCreate) SetCreatedAt(t time.Time) *RewardCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RewardCreate) SetNillableCreatedAt(t *time.Time) *RewardCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RewardCreate) SetUpdatedAt(t time.Time) *RewardCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RewardCreate) SetNillableUpdatedAt(t *time.Time) *RewardCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *RewardCreate) SetStatus(u uint8) *RewardCreate {
	rc.mutation.SetStatus(u)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *RewardCreate) SetNillableStatus(u *uint8) *RewardCreate {
	if u != nil {
		rc.SetStatus(*u)
	}
	return rc
}

// SetToID sets the "to_id" field.
func (rc *RewardCreate) SetToID(u uint64) *RewardCreate {
	rc.mutation.SetToID(u)
	return rc
}

// SetNillableToID sets the "to_id" field if the given value is not nil.
func (rc *RewardCreate) SetNillableToID(u *uint64) *RewardCreate {
	if u != nil {
		rc.SetToID(*u)
	}
	return rc
}

// SetContributorID sets the "contributor_id" field.
func (rc *RewardCreate) SetContributorID(u uint64) *RewardCreate {
	rc.mutation.SetContributorID(u)
	return rc
}

// SetNillableContributorID sets the "contributor_id" field if the given value is not nil.
func (rc *RewardCreate) SetNillableContributorID(u *uint64) *RewardCreate {
	if u != nil {
		rc.SetContributorID(*u)
	}
	return rc
}

// SetContributorEmail sets the "contributor_email" field.
func (rc *RewardCreate) SetContributorEmail(s string) *RewardCreate {
	rc.mutation.SetContributorEmail(s)
	return rc
}

// SetNillableContributorEmail sets the "contributor_email" field if the given value is not nil.
func (rc *RewardCreate) SetNillableContributorEmail(s *string) *RewardCreate {
	if s != nil {
		rc.SetContributorEmail(*s)
	}
	return rc
}

// SetContributorLevel sets the "contributor_level" field.
func (rc *RewardCreate) SetContributorLevel(u uint32) *RewardCreate {
	rc.mutation.SetContributorLevel(u)
	return rc
}

// SetNillableContributorLevel sets the "contributor_level" field if the given value is not nil.
func (rc *RewardCreate) SetNillableContributorLevel(u *uint32) *RewardCreate {
	if u != nil {
		rc.SetContributorLevel(*u)
	}
	return rc
}

// SetNum sets the "num" field.
func (rc *RewardCreate) SetNum(f float32) *RewardCreate {
	rc.mutation.SetNum(f)
	return rc
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (rc *RewardCreate) SetNillableNum(f *float32) *RewardCreate {
	if f != nil {
		rc.SetNum(*f)
	}
	return rc
}

// SetFormula sets the "formula" field.
func (rc *RewardCreate) SetFormula(s string) *RewardCreate {
	rc.mutation.SetFormula(s)
	return rc
}

// SetNillableFormula sets the "formula" field if the given value is not nil.
func (rc *RewardCreate) SetNillableFormula(s *string) *RewardCreate {
	if s != nil {
		rc.SetFormula(*s)
	}
	return rc
}

// SetMode sets the "mode" field.
func (rc *RewardCreate) SetMode(s string) *RewardCreate {
	rc.mutation.SetMode(s)
	return rc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (rc *RewardCreate) SetNillableMode(s *string) *RewardCreate {
	if s != nil {
		rc.SetMode(*s)
	}
	return rc
}

// SetRemark sets the "remark" field.
func (rc *RewardCreate) SetRemark(s string) *RewardCreate {
	rc.mutation.SetRemark(s)
	return rc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rc *RewardCreate) SetNillableRemark(s *string) *RewardCreate {
	if s != nil {
		rc.SetRemark(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RewardCreate) SetID(u uint64) *RewardCreate {
	rc.mutation.SetID(u)
	return rc
}

// Mutation returns the RewardMutation object of the builder.
func (rc *RewardCreate) Mutation() *RewardMutation {
	return rc.mutation
}

// Save creates the Reward in the database.
func (rc *RewardCreate) Save(ctx context.Context) (*Reward, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RewardCreate) SaveX(ctx context.Context) *Reward {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RewardCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RewardCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RewardCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := reward.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := reward.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Status(); !ok {
		v := reward.DefaultStatus
		rc.mutation.SetStatus(v)
	}
	if _, ok := rc.mutation.ToID(); !ok {
		v := reward.DefaultToID
		rc.mutation.SetToID(v)
	}
	if _, ok := rc.mutation.ContributorID(); !ok {
		v := reward.DefaultContributorID
		rc.mutation.SetContributorID(v)
	}
	if _, ok := rc.mutation.ContributorEmail(); !ok {
		v := reward.DefaultContributorEmail
		rc.mutation.SetContributorEmail(v)
	}
	if _, ok := rc.mutation.ContributorLevel(); !ok {
		v := reward.DefaultContributorLevel
		rc.mutation.SetContributorLevel(v)
	}
	if _, ok := rc.mutation.Num(); !ok {
		v := reward.DefaultNum
		rc.mutation.SetNum(v)
	}
	if _, ok := rc.mutation.Formula(); !ok {
		v := reward.DefaultFormula
		rc.mutation.SetFormula(v)
	}
	if _, ok := rc.mutation.Mode(); !ok {
		v := reward.DefaultMode
		rc.mutation.SetMode(v)
	}
	if _, ok := rc.mutation.Remark(); !ok {
		v := reward.DefaultRemark
		rc.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RewardCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reward.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reward.updated_at"`)}
	}
	if _, ok := rc.mutation.ToID(); !ok {
		return &ValidationError{Name: "to_id", err: errors.New(`ent: missing required field "Reward.to_id"`)}
	}
	if _, ok := rc.mutation.ContributorID(); !ok {
		return &ValidationError{Name: "contributor_id", err: errors.New(`ent: missing required field "Reward.contributor_id"`)}
	}
	if _, ok := rc.mutation.ContributorEmail(); !ok {
		return &ValidationError{Name: "contributor_email", err: errors.New(`ent: missing required field "Reward.contributor_email"`)}
	}
	if _, ok := rc.mutation.ContributorLevel(); !ok {
		return &ValidationError{Name: "contributor_level", err: errors.New(`ent: missing required field "Reward.contributor_level"`)}
	}
	if _, ok := rc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "Reward.num"`)}
	}
	if _, ok := rc.mutation.Formula(); !ok {
		return &ValidationError{Name: "formula", err: errors.New(`ent: missing required field "Reward.formula"`)}
	}
	if _, ok := rc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "Reward.mode"`)}
	}
	if _, ok := rc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Reward.remark"`)}
	}
	return nil
}

func (rc *RewardCreate) sqlSave(ctx context.Context) (*Reward, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RewardCreate) createSpec() (*Reward, *sqlgraph.CreateSpec) {
	var (
		_node = &Reward{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reward.Table, sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reward.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reward.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(reward.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.ToID(); ok {
		_spec.SetField(reward.FieldToID, field.TypeUint64, value)
		_node.ToID = value
	}
	if value, ok := rc.mutation.ContributorID(); ok {
		_spec.SetField(reward.FieldContributorID, field.TypeUint64, value)
		_node.ContributorID = value
	}
	if value, ok := rc.mutation.ContributorEmail(); ok {
		_spec.SetField(reward.FieldContributorEmail, field.TypeString, value)
		_node.ContributorEmail = value
	}
	if value, ok := rc.mutation.ContributorLevel(); ok {
		_spec.SetField(reward.FieldContributorLevel, field.TypeUint32, value)
		_node.ContributorLevel = value
	}
	if value, ok := rc.mutation.Num(); ok {
		_spec.SetField(reward.FieldNum, field.TypeFloat32, value)
		_node.Num = value
	}
	if value, ok := rc.mutation.Formula(); ok {
		_spec.SetField(reward.FieldFormula, field.TypeString, value)
		_node.Formula = value
	}
	if value, ok := rc.mutation.Mode(); ok {
		_spec.SetField(reward.FieldMode, field.TypeString, value)
		_node.Mode = value
	}
	if value, ok := rc.mutation.Remark(); ok {
		_spec.SetField(reward.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// RewardCreateBulk is the builder for creating many Reward entities in bulk.
type RewardCreateBulk struct {
	config
	err      error
	builders []*RewardCreate
}

// Save creates the Reward entities in the database.
func (rcb *RewardCreateBulk) Save(ctx context.Context) ([]*Reward, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reward, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RewardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RewardCreateBulk) SaveX(ctx context.Context) []*Reward {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RewardCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RewardCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
