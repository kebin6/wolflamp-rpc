syntax = "proto3";

package wolflamp;
option go_package="./wolflamp";

message StatementInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint32 status = 4;
  uint64 player_id = 5;
  uint32 module = 6;
  string code = 7;
  uint32 inout_type = 9;
  double amount = 10;
  string refer_id = 11;
  string remark = 12;
}

message CreateStatementReq {
  uint32 status = 4;
  uint64 player_id = 5;
  uint32 module = 6;
  uint32 inout_type = 9;
  double amount = 10;
  string refer_id = 11;
  optional string remark = 12;
  optional string prefix = 13;
}

message UpdateStatementReq {
  uint64 id = 1;
  optional uint32 status = 4;
  optional uint64 player_id = 5;
  optional uint32 module = 6;
  optional string code = 7;
  optional uint32 inout_type = 9;
  optional double amount = 10;
  optional string refer_id = 11;
  optional string remark = 12;
}

message DeleteStatementReq {
  uint64 id = 1;
}

message FindStatementReq {
  uint64 id = 1;
  optional uint64 player_id = 2;
}

message ListStatementReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional uint32 status = 4;
  optional uint64 player_id = 5;
  optional uint32 module = 6;
  optional string code = 7;
  optional uint32 inout_type = 9;
  optional double amount = 10;
  optional string refer_id = 11;
  optional string remark = 12;
}

message ListStatementResp {
  uint64 total = 1;
  repeated StatementInfo data = 2;
}

service Wolflamp {
  // group: statement
  rpc createStatement (CreateStatementReq) returns (BaseIDResp);

  // group: statement
  rpc updateStatement (UpdateStatementReq) returns (BaseIDResp);

  // group: statement
  rpc deleteStatement (DeleteStatementReq) returns (BaseIDResp);

  // group: statement
  rpc findStatement (FindStatementReq) returns (StatementInfo);

  // group: statement
  rpc listStatement (ListStatementReq) returns (ListStatementResp);
}
