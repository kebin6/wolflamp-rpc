// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: wolflamp.proto

package wolflamp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WolflampClient is the client API for Wolflamp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WolflampClient interface {
	// group: banner
	CreateBanner(ctx context.Context, in *CreateBannerReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: banner
	UpdateBanner(ctx context.Context, in *UpdateBannerReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: banner
	DeleteBanner(ctx context.Context, in *DeleteBannerReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: banner
	FindBanner(ctx context.Context, in *FindBannerReq, opts ...grpc.CallOption) (*BannerInfo, error)
	// group: banner
	ListBanner(ctx context.Context, in *ListBannerReq, opts ...grpc.CallOption) (*ListBannerResp, error)
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// group: exchange
	CreateExchange(ctx context.Context, in *CreateExchangeReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: exchange
	UpdateExchange(ctx context.Context, in *UpdateExchangeReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: exchange
	DeleteExchange(ctx context.Context, in *DeleteExchangeReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: exchange
	FindExchange(ctx context.Context, in *FindExchangeReq, opts ...grpc.CallOption) (*ExchangeInfo, error)
	// group: exchange
	ListExchange(ctx context.Context, in *ListExchangeReq, opts ...grpc.CallOption) (*ListExchangeResp, error)
	// group: exchange
	Exchange(ctx context.Context, in *ExchangeReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: game
	CreateRound(ctx context.Context, in *CreateRoundReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: game
	FindRound(ctx context.Context, in *FindRoundReq, opts ...grpc.CallOption) (*RoundInfo, error)
	// group: game
	PreviousRound(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PreviousRoundResp, error)
	// group: game
	ListHistoryInvest(ctx context.Context, in *ListHistoryInvestReq, opts ...grpc.CallOption) (*ListHistoryInvestResp, error)
	// group: game
	ListFold(ctx context.Context, in *ListFoldReq, opts ...grpc.CallOption) (*ListFoldResp, error)
	// group: game
	Invest(ctx context.Context, in *CreateInvestReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: game
	ChangeInvestFold(ctx context.Context, in *ChangeInvestFoldReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: game
	GetInvestInfoByPlayerId(ctx context.Context, in *GetInvestInfoByPlayerIdReq, opts ...grpc.CallOption) (*GetInvestInfoByPlayerIdResp, error)
	// group: game
	GetInvestByRoundId(ctx context.Context, in *GetInvestsByRoundIdReq, opts ...grpc.CallOption) (*GetInvestByRoundIdResp, error)
	// group: game
	GetLambFoldAggregate(ctx context.Context, in *GetLambFoldAggregateReq, opts ...grpc.CallOption) (*GetLambFoldAggregateResp, error)
	// group: game
	GetLambFoldAggregateV2(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLambFoldAggregateResp, error)
	// group: game
	DealOpenGame(ctx context.Context, in *DealOpenGameReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: order
	CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: order
	UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: order
	DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: order
	FindOrder(ctx context.Context, in *FindOrderReq, opts ...grpc.CallOption) (*OrderInfo, error)
	// group: order
	ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderResp, error)
	// group: order
	CalculateWithdrawFee(ctx context.Context, in *CalculateWithdrawFeeReq, opts ...grpc.CallOption) (*CalculateWithdrawFeeResp, error)
	// group: overview
	GetOverview(ctx context.Context, in *GetOverviewReq, opts ...grpc.CallOption) (*GetOverviewResp, error)
	// group: player
	CreatePlayer(ctx context.Context, in *CreatePlayerReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: player
	UpdatePlayer(ctx context.Context, in *UpdatePlayerReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: player
	DeletePlayer(ctx context.Context, in *DeletePlayerReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: player
	FindPlayer(ctx context.Context, in *FindPlayerReq, opts ...grpc.CallOption) (*PlayerInfo, error)
	// group: player
	ListPlayer(ctx context.Context, in *ListPlayerReq, opts ...grpc.CallOption) (*ListPlayerResp, error)
	// group: player
	GetByEmail(ctx context.Context, in *GetByEmailReq, opts ...grpc.CallOption) (*PlayerInfo, error)
	// group: player
	GetByInviteCode(ctx context.Context, in *GetByInviteCodeReq, opts ...grpc.CallOption) (*PlayerInfo, error)
	// group: player
	GetInvitorListByIds(ctx context.Context, in *GetInvitorListByIdsReq, opts ...grpc.CallOption) (*GetInvitorListByIdsResp, error)
	// group: reward
	CreateReward(ctx context.Context, in *CreateRewardReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: reward
	UpdateReward(ctx context.Context, in *UpdateRewardReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: reward
	DeleteReward(ctx context.Context, in *DeleteRewardReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: reward
	FindReward(ctx context.Context, in *FindRewardReq, opts ...grpc.CallOption) (*RewardInfo, error)
	// group: reward
	ListReward(ctx context.Context, in *ListRewardReq, opts ...grpc.CallOption) (*ListRewardResp, error)
	// group: reward
	RewardAggregate(ctx context.Context, in *RewardAggregateReq, opts ...grpc.CallOption) (*RewardAggregateResp, error)
	// group: setting
	UpdateSetting(ctx context.Context, in *UpdateSettingReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: setting
	FindSetting(ctx context.Context, in *FindSettingReq, opts ...grpc.CallOption) (*FindSettingResp, error)
	// group: setting
	GetWithdrawThreshold(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WithdrawThresholdResp, error)
	// group: setting
	GetMinWithdrawNum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MinWithdrawNumResp, error)
	// group: setting
	GetWithdrawCommission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WithdrawCommissionResp, error)
	// group: setting
	GetIdleTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IdleTimeResp, error)
	// group: setting
	GetRobotLampNum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RobotLampNumResp, error)
	// group: setting
	GetGameRule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GameRuleResp, error)
	// group: setting
	GetRobotNum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RobotNumResp, error)
	// group: setting
	GetGameCommission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GameCommissionResp, error)
	// group: statement
	CreateStatement(ctx context.Context, in *CreateStatementReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: statement
	UpdateStatement(ctx context.Context, in *UpdateStatementReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: statement
	DeleteStatement(ctx context.Context, in *DeleteStatementReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: statement
	FindStatement(ctx context.Context, in *FindStatementReq, opts ...grpc.CallOption) (*StatementInfo, error)
	// group: statement
	ListStatement(ctx context.Context, in *ListStatementReq, opts ...grpc.CallOption) (*ListStatementResp, error)
}

type wolflampClient struct {
	cc grpc.ClientConnInterface
}

func NewWolflampClient(cc grpc.ClientConnInterface) WolflampClient {
	return &wolflampClient{cc}
}

func (c *wolflampClient) CreateBanner(ctx context.Context, in *CreateBannerReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/createBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) UpdateBanner(ctx context.Context, in *UpdateBannerReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/updateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) DeleteBanner(ctx context.Context, in *DeleteBannerReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/deleteBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) FindBanner(ctx context.Context, in *FindBannerReq, opts ...grpc.CallOption) (*BannerInfo, error) {
	out := new(BannerInfo)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/findBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) ListBanner(ctx context.Context, in *ListBannerReq, opts ...grpc.CallOption) (*ListBannerResp, error) {
	out := new(ListBannerResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/listBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/initDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) CreateExchange(ctx context.Context, in *CreateExchangeReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/createExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) UpdateExchange(ctx context.Context, in *UpdateExchangeReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/updateExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) DeleteExchange(ctx context.Context, in *DeleteExchangeReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/deleteExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) FindExchange(ctx context.Context, in *FindExchangeReq, opts ...grpc.CallOption) (*ExchangeInfo, error) {
	out := new(ExchangeInfo)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/findExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) ListExchange(ctx context.Context, in *ListExchangeReq, opts ...grpc.CallOption) (*ListExchangeResp, error) {
	out := new(ListExchangeResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/listExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) Exchange(ctx context.Context, in *ExchangeReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) CreateRound(ctx context.Context, in *CreateRoundReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/createRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) FindRound(ctx context.Context, in *FindRoundReq, opts ...grpc.CallOption) (*RoundInfo, error) {
	out := new(RoundInfo)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/findRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) PreviousRound(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PreviousRoundResp, error) {
	out := new(PreviousRoundResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/previousRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) ListHistoryInvest(ctx context.Context, in *ListHistoryInvestReq, opts ...grpc.CallOption) (*ListHistoryInvestResp, error) {
	out := new(ListHistoryInvestResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/listHistoryInvest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) ListFold(ctx context.Context, in *ListFoldReq, opts ...grpc.CallOption) (*ListFoldResp, error) {
	out := new(ListFoldResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/listFold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) Invest(ctx context.Context, in *CreateInvestReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/invest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) ChangeInvestFold(ctx context.Context, in *ChangeInvestFoldReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/changeInvestFold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetInvestInfoByPlayerId(ctx context.Context, in *GetInvestInfoByPlayerIdReq, opts ...grpc.CallOption) (*GetInvestInfoByPlayerIdResp, error) {
	out := new(GetInvestInfoByPlayerIdResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getInvestInfoByPlayerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetInvestByRoundId(ctx context.Context, in *GetInvestsByRoundIdReq, opts ...grpc.CallOption) (*GetInvestByRoundIdResp, error) {
	out := new(GetInvestByRoundIdResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getInvestByRoundId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetLambFoldAggregate(ctx context.Context, in *GetLambFoldAggregateReq, opts ...grpc.CallOption) (*GetLambFoldAggregateResp, error) {
	out := new(GetLambFoldAggregateResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getLambFoldAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetLambFoldAggregateV2(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLambFoldAggregateResp, error) {
	out := new(GetLambFoldAggregateResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getLambFoldAggregateV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) DealOpenGame(ctx context.Context, in *DealOpenGameReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/dealOpenGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/createOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/updateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/deleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) FindOrder(ctx context.Context, in *FindOrderReq, opts ...grpc.CallOption) (*OrderInfo, error) {
	out := new(OrderInfo)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/findOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderResp, error) {
	out := new(ListOrderResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/listOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) CalculateWithdrawFee(ctx context.Context, in *CalculateWithdrawFeeReq, opts ...grpc.CallOption) (*CalculateWithdrawFeeResp, error) {
	out := new(CalculateWithdrawFeeResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/calculateWithdrawFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetOverview(ctx context.Context, in *GetOverviewReq, opts ...grpc.CallOption) (*GetOverviewResp, error) {
	out := new(GetOverviewResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) CreatePlayer(ctx context.Context, in *CreatePlayerReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/createPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) UpdatePlayer(ctx context.Context, in *UpdatePlayerReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/updatePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) DeletePlayer(ctx context.Context, in *DeletePlayerReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/deletePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) FindPlayer(ctx context.Context, in *FindPlayerReq, opts ...grpc.CallOption) (*PlayerInfo, error) {
	out := new(PlayerInfo)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/findPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) ListPlayer(ctx context.Context, in *ListPlayerReq, opts ...grpc.CallOption) (*ListPlayerResp, error) {
	out := new(ListPlayerResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/listPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetByEmail(ctx context.Context, in *GetByEmailReq, opts ...grpc.CallOption) (*PlayerInfo, error) {
	out := new(PlayerInfo)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetByInviteCode(ctx context.Context, in *GetByInviteCodeReq, opts ...grpc.CallOption) (*PlayerInfo, error) {
	out := new(PlayerInfo)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getByInviteCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetInvitorListByIds(ctx context.Context, in *GetInvitorListByIdsReq, opts ...grpc.CallOption) (*GetInvitorListByIdsResp, error) {
	out := new(GetInvitorListByIdsResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getInvitorListByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) CreateReward(ctx context.Context, in *CreateRewardReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/createReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) UpdateReward(ctx context.Context, in *UpdateRewardReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/updateReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) DeleteReward(ctx context.Context, in *DeleteRewardReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/deleteReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) FindReward(ctx context.Context, in *FindRewardReq, opts ...grpc.CallOption) (*RewardInfo, error) {
	out := new(RewardInfo)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/findReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) ListReward(ctx context.Context, in *ListRewardReq, opts ...grpc.CallOption) (*ListRewardResp, error) {
	out := new(ListRewardResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/listReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) RewardAggregate(ctx context.Context, in *RewardAggregateReq, opts ...grpc.CallOption) (*RewardAggregateResp, error) {
	out := new(RewardAggregateResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/rewardAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) UpdateSetting(ctx context.Context, in *UpdateSettingReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/updateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) FindSetting(ctx context.Context, in *FindSettingReq, opts ...grpc.CallOption) (*FindSettingResp, error) {
	out := new(FindSettingResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/findSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetWithdrawThreshold(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WithdrawThresholdResp, error) {
	out := new(WithdrawThresholdResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getWithdrawThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetMinWithdrawNum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MinWithdrawNumResp, error) {
	out := new(MinWithdrawNumResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getMinWithdrawNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetWithdrawCommission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WithdrawCommissionResp, error) {
	out := new(WithdrawCommissionResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getWithdrawCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetIdleTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IdleTimeResp, error) {
	out := new(IdleTimeResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getIdleTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetRobotLampNum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RobotLampNumResp, error) {
	out := new(RobotLampNumResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getRobotLampNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetGameRule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GameRuleResp, error) {
	out := new(GameRuleResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getGameRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetRobotNum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RobotNumResp, error) {
	out := new(RobotNumResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getRobotNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) GetGameCommission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GameCommissionResp, error) {
	out := new(GameCommissionResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/getGameCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) CreateStatement(ctx context.Context, in *CreateStatementReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/createStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) UpdateStatement(ctx context.Context, in *UpdateStatementReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/updateStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) DeleteStatement(ctx context.Context, in *DeleteStatementReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/deleteStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) FindStatement(ctx context.Context, in *FindStatementReq, opts ...grpc.CallOption) (*StatementInfo, error) {
	out := new(StatementInfo)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/findStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wolflampClient) ListStatement(ctx context.Context, in *ListStatementReq, opts ...grpc.CallOption) (*ListStatementResp, error) {
	out := new(ListStatementResp)
	err := c.cc.Invoke(ctx, "/wolflamp.Wolflamp/listStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WolflampServer is the server API for Wolflamp service.
// All implementations must embed UnimplementedWolflampServer
// for forward compatibility
type WolflampServer interface {
	// group: banner
	CreateBanner(context.Context, *CreateBannerReq) (*BaseIDResp, error)
	// group: banner
	UpdateBanner(context.Context, *UpdateBannerReq) (*BaseIDResp, error)
	// group: banner
	DeleteBanner(context.Context, *DeleteBannerReq) (*BaseIDResp, error)
	// group: banner
	FindBanner(context.Context, *FindBannerReq) (*BannerInfo, error)
	// group: banner
	ListBanner(context.Context, *ListBannerReq) (*ListBannerResp, error)
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// group: exchange
	CreateExchange(context.Context, *CreateExchangeReq) (*BaseIDResp, error)
	// group: exchange
	UpdateExchange(context.Context, *UpdateExchangeReq) (*BaseIDResp, error)
	// group: exchange
	DeleteExchange(context.Context, *DeleteExchangeReq) (*BaseIDResp, error)
	// group: exchange
	FindExchange(context.Context, *FindExchangeReq) (*ExchangeInfo, error)
	// group: exchange
	ListExchange(context.Context, *ListExchangeReq) (*ListExchangeResp, error)
	// group: exchange
	Exchange(context.Context, *ExchangeReq) (*BaseIDResp, error)
	// group: game
	CreateRound(context.Context, *CreateRoundReq) (*BaseIDResp, error)
	// group: game
	FindRound(context.Context, *FindRoundReq) (*RoundInfo, error)
	// group: game
	PreviousRound(context.Context, *Empty) (*PreviousRoundResp, error)
	// group: game
	ListHistoryInvest(context.Context, *ListHistoryInvestReq) (*ListHistoryInvestResp, error)
	// group: game
	ListFold(context.Context, *ListFoldReq) (*ListFoldResp, error)
	// group: game
	Invest(context.Context, *CreateInvestReq) (*BaseIDResp, error)
	// group: game
	ChangeInvestFold(context.Context, *ChangeInvestFoldReq) (*BaseIDResp, error)
	// group: game
	GetInvestInfoByPlayerId(context.Context, *GetInvestInfoByPlayerIdReq) (*GetInvestInfoByPlayerIdResp, error)
	// group: game
	GetInvestByRoundId(context.Context, *GetInvestsByRoundIdReq) (*GetInvestByRoundIdResp, error)
	// group: game
	GetLambFoldAggregate(context.Context, *GetLambFoldAggregateReq) (*GetLambFoldAggregateResp, error)
	// group: game
	GetLambFoldAggregateV2(context.Context, *Empty) (*GetLambFoldAggregateResp, error)
	// group: game
	DealOpenGame(context.Context, *DealOpenGameReq) (*BaseIDResp, error)
	// group: order
	CreateOrder(context.Context, *CreateOrderReq) (*BaseIDResp, error)
	// group: order
	UpdateOrder(context.Context, *UpdateOrderReq) (*BaseIDResp, error)
	// group: order
	DeleteOrder(context.Context, *DeleteOrderReq) (*BaseIDResp, error)
	// group: order
	FindOrder(context.Context, *FindOrderReq) (*OrderInfo, error)
	// group: order
	ListOrder(context.Context, *ListOrderReq) (*ListOrderResp, error)
	// group: order
	CalculateWithdrawFee(context.Context, *CalculateWithdrawFeeReq) (*CalculateWithdrawFeeResp, error)
	// group: overview
	GetOverview(context.Context, *GetOverviewReq) (*GetOverviewResp, error)
	// group: player
	CreatePlayer(context.Context, *CreatePlayerReq) (*BaseIDResp, error)
	// group: player
	UpdatePlayer(context.Context, *UpdatePlayerReq) (*BaseIDResp, error)
	// group: player
	DeletePlayer(context.Context, *DeletePlayerReq) (*BaseIDResp, error)
	// group: player
	FindPlayer(context.Context, *FindPlayerReq) (*PlayerInfo, error)
	// group: player
	ListPlayer(context.Context, *ListPlayerReq) (*ListPlayerResp, error)
	// group: player
	GetByEmail(context.Context, *GetByEmailReq) (*PlayerInfo, error)
	// group: player
	GetByInviteCode(context.Context, *GetByInviteCodeReq) (*PlayerInfo, error)
	// group: player
	GetInvitorListByIds(context.Context, *GetInvitorListByIdsReq) (*GetInvitorListByIdsResp, error)
	// group: reward
	CreateReward(context.Context, *CreateRewardReq) (*BaseIDResp, error)
	// group: reward
	UpdateReward(context.Context, *UpdateRewardReq) (*BaseIDResp, error)
	// group: reward
	DeleteReward(context.Context, *DeleteRewardReq) (*BaseIDResp, error)
	// group: reward
	FindReward(context.Context, *FindRewardReq) (*RewardInfo, error)
	// group: reward
	ListReward(context.Context, *ListRewardReq) (*ListRewardResp, error)
	// group: reward
	RewardAggregate(context.Context, *RewardAggregateReq) (*RewardAggregateResp, error)
	// group: setting
	UpdateSetting(context.Context, *UpdateSettingReq) (*BaseIDResp, error)
	// group: setting
	FindSetting(context.Context, *FindSettingReq) (*FindSettingResp, error)
	// group: setting
	GetWithdrawThreshold(context.Context, *Empty) (*WithdrawThresholdResp, error)
	// group: setting
	GetMinWithdrawNum(context.Context, *Empty) (*MinWithdrawNumResp, error)
	// group: setting
	GetWithdrawCommission(context.Context, *Empty) (*WithdrawCommissionResp, error)
	// group: setting
	GetIdleTime(context.Context, *Empty) (*IdleTimeResp, error)
	// group: setting
	GetRobotLampNum(context.Context, *Empty) (*RobotLampNumResp, error)
	// group: setting
	GetGameRule(context.Context, *Empty) (*GameRuleResp, error)
	// group: setting
	GetRobotNum(context.Context, *Empty) (*RobotNumResp, error)
	// group: setting
	GetGameCommission(context.Context, *Empty) (*GameCommissionResp, error)
	// group: statement
	CreateStatement(context.Context, *CreateStatementReq) (*BaseIDResp, error)
	// group: statement
	UpdateStatement(context.Context, *UpdateStatementReq) (*BaseIDResp, error)
	// group: statement
	DeleteStatement(context.Context, *DeleteStatementReq) (*BaseIDResp, error)
	// group: statement
	FindStatement(context.Context, *FindStatementReq) (*StatementInfo, error)
	// group: statement
	ListStatement(context.Context, *ListStatementReq) (*ListStatementResp, error)
	mustEmbedUnimplementedWolflampServer()
}

// UnimplementedWolflampServer must be embedded to have forward compatible implementations.
type UnimplementedWolflampServer struct {
}

func (UnimplementedWolflampServer) CreateBanner(context.Context, *CreateBannerReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedWolflampServer) UpdateBanner(context.Context, *UpdateBannerReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedWolflampServer) DeleteBanner(context.Context, *DeleteBannerReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedWolflampServer) FindBanner(context.Context, *FindBannerReq) (*BannerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBanner not implemented")
}
func (UnimplementedWolflampServer) ListBanner(context.Context, *ListBannerReq) (*ListBannerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBanner not implemented")
}
func (UnimplementedWolflampServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedWolflampServer) CreateExchange(context.Context, *CreateExchangeReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchange not implemented")
}
func (UnimplementedWolflampServer) UpdateExchange(context.Context, *UpdateExchangeReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchange not implemented")
}
func (UnimplementedWolflampServer) DeleteExchange(context.Context, *DeleteExchangeReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExchange not implemented")
}
func (UnimplementedWolflampServer) FindExchange(context.Context, *FindExchangeReq) (*ExchangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindExchange not implemented")
}
func (UnimplementedWolflampServer) ListExchange(context.Context, *ListExchangeReq) (*ListExchangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchange not implemented")
}
func (UnimplementedWolflampServer) Exchange(context.Context, *ExchangeReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedWolflampServer) CreateRound(context.Context, *CreateRoundReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRound not implemented")
}
func (UnimplementedWolflampServer) FindRound(context.Context, *FindRoundReq) (*RoundInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRound not implemented")
}
func (UnimplementedWolflampServer) PreviousRound(context.Context, *Empty) (*PreviousRoundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviousRound not implemented")
}
func (UnimplementedWolflampServer) ListHistoryInvest(context.Context, *ListHistoryInvestReq) (*ListHistoryInvestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryInvest not implemented")
}
func (UnimplementedWolflampServer) ListFold(context.Context, *ListFoldReq) (*ListFoldResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFold not implemented")
}
func (UnimplementedWolflampServer) Invest(context.Context, *CreateInvestReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invest not implemented")
}
func (UnimplementedWolflampServer) ChangeInvestFold(context.Context, *ChangeInvestFoldReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInvestFold not implemented")
}
func (UnimplementedWolflampServer) GetInvestInfoByPlayerId(context.Context, *GetInvestInfoByPlayerIdReq) (*GetInvestInfoByPlayerIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestInfoByPlayerId not implemented")
}
func (UnimplementedWolflampServer) GetInvestByRoundId(context.Context, *GetInvestsByRoundIdReq) (*GetInvestByRoundIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestByRoundId not implemented")
}
func (UnimplementedWolflampServer) GetLambFoldAggregate(context.Context, *GetLambFoldAggregateReq) (*GetLambFoldAggregateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLambFoldAggregate not implemented")
}
func (UnimplementedWolflampServer) GetLambFoldAggregateV2(context.Context, *Empty) (*GetLambFoldAggregateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLambFoldAggregateV2 not implemented")
}
func (UnimplementedWolflampServer) DealOpenGame(context.Context, *DealOpenGameReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealOpenGame not implemented")
}
func (UnimplementedWolflampServer) CreateOrder(context.Context, *CreateOrderReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedWolflampServer) UpdateOrder(context.Context, *UpdateOrderReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedWolflampServer) DeleteOrder(context.Context, *DeleteOrderReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedWolflampServer) FindOrder(context.Context, *FindOrderReq) (*OrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrder not implemented")
}
func (UnimplementedWolflampServer) ListOrder(context.Context, *ListOrderReq) (*ListOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedWolflampServer) CalculateWithdrawFee(context.Context, *CalculateWithdrawFeeReq) (*CalculateWithdrawFeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateWithdrawFee not implemented")
}
func (UnimplementedWolflampServer) GetOverview(context.Context, *GetOverviewReq) (*GetOverviewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverview not implemented")
}
func (UnimplementedWolflampServer) CreatePlayer(context.Context, *CreatePlayerReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (UnimplementedWolflampServer) UpdatePlayer(context.Context, *UpdatePlayerReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayer not implemented")
}
func (UnimplementedWolflampServer) DeletePlayer(context.Context, *DeletePlayerReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayer not implemented")
}
func (UnimplementedWolflampServer) FindPlayer(context.Context, *FindPlayerReq) (*PlayerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPlayer not implemented")
}
func (UnimplementedWolflampServer) ListPlayer(context.Context, *ListPlayerReq) (*ListPlayerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlayer not implemented")
}
func (UnimplementedWolflampServer) GetByEmail(context.Context, *GetByEmailReq) (*PlayerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByEmail not implemented")
}
func (UnimplementedWolflampServer) GetByInviteCode(context.Context, *GetByInviteCodeReq) (*PlayerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByInviteCode not implemented")
}
func (UnimplementedWolflampServer) GetInvitorListByIds(context.Context, *GetInvitorListByIdsReq) (*GetInvitorListByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitorListByIds not implemented")
}
func (UnimplementedWolflampServer) CreateReward(context.Context, *CreateRewardReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReward not implemented")
}
func (UnimplementedWolflampServer) UpdateReward(context.Context, *UpdateRewardReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReward not implemented")
}
func (UnimplementedWolflampServer) DeleteReward(context.Context, *DeleteRewardReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReward not implemented")
}
func (UnimplementedWolflampServer) FindReward(context.Context, *FindRewardReq) (*RewardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindReward not implemented")
}
func (UnimplementedWolflampServer) ListReward(context.Context, *ListRewardReq) (*ListRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReward not implemented")
}
func (UnimplementedWolflampServer) RewardAggregate(context.Context, *RewardAggregateReq) (*RewardAggregateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardAggregate not implemented")
}
func (UnimplementedWolflampServer) UpdateSetting(context.Context, *UpdateSettingReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (UnimplementedWolflampServer) FindSetting(context.Context, *FindSettingReq) (*FindSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSetting not implemented")
}
func (UnimplementedWolflampServer) GetWithdrawThreshold(context.Context, *Empty) (*WithdrawThresholdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawThreshold not implemented")
}
func (UnimplementedWolflampServer) GetMinWithdrawNum(context.Context, *Empty) (*MinWithdrawNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinWithdrawNum not implemented")
}
func (UnimplementedWolflampServer) GetWithdrawCommission(context.Context, *Empty) (*WithdrawCommissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawCommission not implemented")
}
func (UnimplementedWolflampServer) GetIdleTime(context.Context, *Empty) (*IdleTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdleTime not implemented")
}
func (UnimplementedWolflampServer) GetRobotLampNum(context.Context, *Empty) (*RobotLampNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotLampNum not implemented")
}
func (UnimplementedWolflampServer) GetGameRule(context.Context, *Empty) (*GameRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameRule not implemented")
}
func (UnimplementedWolflampServer) GetRobotNum(context.Context, *Empty) (*RobotNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotNum not implemented")
}
func (UnimplementedWolflampServer) GetGameCommission(context.Context, *Empty) (*GameCommissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameCommission not implemented")
}
func (UnimplementedWolflampServer) CreateStatement(context.Context, *CreateStatementReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatement not implemented")
}
func (UnimplementedWolflampServer) UpdateStatement(context.Context, *UpdateStatementReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatement not implemented")
}
func (UnimplementedWolflampServer) DeleteStatement(context.Context, *DeleteStatementReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatement not implemented")
}
func (UnimplementedWolflampServer) FindStatement(context.Context, *FindStatementReq) (*StatementInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStatement not implemented")
}
func (UnimplementedWolflampServer) ListStatement(context.Context, *ListStatementReq) (*ListStatementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatement not implemented")
}
func (UnimplementedWolflampServer) mustEmbedUnimplementedWolflampServer() {}

// UnsafeWolflampServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WolflampServer will
// result in compilation errors.
type UnsafeWolflampServer interface {
	mustEmbedUnimplementedWolflampServer()
}

func RegisterWolflampServer(s grpc.ServiceRegistrar, srv WolflampServer) {
	s.RegisterService(&Wolflamp_ServiceDesc, srv)
}

func _Wolflamp_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/createBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).CreateBanner(ctx, req.(*CreateBannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/updateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).UpdateBanner(ctx, req.(*UpdateBannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/deleteBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).DeleteBanner(ctx, req.(*DeleteBannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_FindBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).FindBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/findBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).FindBanner(ctx, req.(*FindBannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_ListBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).ListBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/listBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).ListBanner(ctx, req.(*ListBannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/initDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_CreateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).CreateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/createExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).CreateExchange(ctx, req.(*CreateExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_UpdateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).UpdateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/updateExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).UpdateExchange(ctx, req.(*UpdateExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_DeleteExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).DeleteExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/deleteExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).DeleteExchange(ctx, req.(*DeleteExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_FindExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).FindExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/findExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).FindExchange(ctx, req.(*FindExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_ListExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).ListExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/listExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).ListExchange(ctx, req.(*ListExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).Exchange(ctx, req.(*ExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_CreateRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).CreateRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/createRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).CreateRound(ctx, req.(*CreateRoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_FindRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).FindRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/findRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).FindRound(ctx, req.(*FindRoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_PreviousRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).PreviousRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/previousRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).PreviousRound(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_ListHistoryInvest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoryInvestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).ListHistoryInvest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/listHistoryInvest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).ListHistoryInvest(ctx, req.(*ListHistoryInvestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_ListFold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFoldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).ListFold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/listFold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).ListFold(ctx, req.(*ListFoldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_Invest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).Invest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/invest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).Invest(ctx, req.(*CreateInvestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_ChangeInvestFold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeInvestFoldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).ChangeInvestFold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/changeInvestFold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).ChangeInvestFold(ctx, req.(*ChangeInvestFoldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetInvestInfoByPlayerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestInfoByPlayerIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetInvestInfoByPlayerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getInvestInfoByPlayerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetInvestInfoByPlayerId(ctx, req.(*GetInvestInfoByPlayerIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetInvestByRoundId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestsByRoundIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetInvestByRoundId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getInvestByRoundId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetInvestByRoundId(ctx, req.(*GetInvestsByRoundIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetLambFoldAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLambFoldAggregateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetLambFoldAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getLambFoldAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetLambFoldAggregate(ctx, req.(*GetLambFoldAggregateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetLambFoldAggregateV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetLambFoldAggregateV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getLambFoldAggregateV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetLambFoldAggregateV2(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_DealOpenGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealOpenGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).DealOpenGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/dealOpenGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).DealOpenGame(ctx, req.(*DealOpenGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/createOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).CreateOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/updateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).UpdateOrder(ctx, req.(*UpdateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/deleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).DeleteOrder(ctx, req.(*DeleteOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_FindOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).FindOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/findOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).FindOrder(ctx, req.(*FindOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/listOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).ListOrder(ctx, req.(*ListOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_CalculateWithdrawFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateWithdrawFeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).CalculateWithdrawFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/calculateWithdrawFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).CalculateWithdrawFee(ctx, req.(*CalculateWithdrawFeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOverviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetOverview(ctx, req.(*GetOverviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/createPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).CreatePlayer(ctx, req.(*CreatePlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_UpdatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).UpdatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/updatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).UpdatePlayer(ctx, req.(*UpdatePlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_DeletePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).DeletePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/deletePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).DeletePlayer(ctx, req.(*DeletePlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_FindPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).FindPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/findPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).FindPlayer(ctx, req.(*FindPlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_ListPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).ListPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/listPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).ListPlayer(ctx, req.(*ListPlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetByEmail(ctx, req.(*GetByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetByInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByInviteCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetByInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getByInviteCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetByInviteCode(ctx, req.(*GetByInviteCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetInvitorListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitorListByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetInvitorListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getInvitorListByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetInvitorListByIds(ctx, req.(*GetInvitorListByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_CreateReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).CreateReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/createReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).CreateReward(ctx, req.(*CreateRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_UpdateReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).UpdateReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/updateReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).UpdateReward(ctx, req.(*UpdateRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_DeleteReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).DeleteReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/deleteReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).DeleteReward(ctx, req.(*DeleteRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_FindReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).FindReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/findReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).FindReward(ctx, req.(*FindRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_ListReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).ListReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/listReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).ListReward(ctx, req.(*ListRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_RewardAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardAggregateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).RewardAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/rewardAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).RewardAggregate(ctx, req.(*RewardAggregateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/updateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).UpdateSetting(ctx, req.(*UpdateSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_FindSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).FindSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/findSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).FindSetting(ctx, req.(*FindSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetWithdrawThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetWithdrawThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getWithdrawThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetWithdrawThreshold(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetMinWithdrawNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetMinWithdrawNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getMinWithdrawNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetMinWithdrawNum(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetWithdrawCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetWithdrawCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getWithdrawCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetWithdrawCommission(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetIdleTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetIdleTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getIdleTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetIdleTime(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetRobotLampNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetRobotLampNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getRobotLampNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetRobotLampNum(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetGameRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetGameRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getGameRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetGameRule(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetRobotNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetRobotNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getRobotNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetRobotNum(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_GetGameCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).GetGameCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/getGameCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).GetGameCommission(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_CreateStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).CreateStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/createStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).CreateStatement(ctx, req.(*CreateStatementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_UpdateStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).UpdateStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/updateStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).UpdateStatement(ctx, req.(*UpdateStatementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_DeleteStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).DeleteStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/deleteStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).DeleteStatement(ctx, req.(*DeleteStatementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_FindStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStatementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).FindStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/findStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).FindStatement(ctx, req.(*FindStatementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wolflamp_ListStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolflampServer).ListStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolflamp.Wolflamp/listStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolflampServer).ListStatement(ctx, req.(*ListStatementReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wolflamp_ServiceDesc is the grpc.ServiceDesc for Wolflamp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wolflamp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wolflamp.Wolflamp",
	HandlerType: (*WolflampServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createBanner",
			Handler:    _Wolflamp_CreateBanner_Handler,
		},
		{
			MethodName: "updateBanner",
			Handler:    _Wolflamp_UpdateBanner_Handler,
		},
		{
			MethodName: "deleteBanner",
			Handler:    _Wolflamp_DeleteBanner_Handler,
		},
		{
			MethodName: "findBanner",
			Handler:    _Wolflamp_FindBanner_Handler,
		},
		{
			MethodName: "listBanner",
			Handler:    _Wolflamp_ListBanner_Handler,
		},
		{
			MethodName: "initDatabase",
			Handler:    _Wolflamp_InitDatabase_Handler,
		},
		{
			MethodName: "createExchange",
			Handler:    _Wolflamp_CreateExchange_Handler,
		},
		{
			MethodName: "updateExchange",
			Handler:    _Wolflamp_UpdateExchange_Handler,
		},
		{
			MethodName: "deleteExchange",
			Handler:    _Wolflamp_DeleteExchange_Handler,
		},
		{
			MethodName: "findExchange",
			Handler:    _Wolflamp_FindExchange_Handler,
		},
		{
			MethodName: "listExchange",
			Handler:    _Wolflamp_ListExchange_Handler,
		},
		{
			MethodName: "exchange",
			Handler:    _Wolflamp_Exchange_Handler,
		},
		{
			MethodName: "createRound",
			Handler:    _Wolflamp_CreateRound_Handler,
		},
		{
			MethodName: "findRound",
			Handler:    _Wolflamp_FindRound_Handler,
		},
		{
			MethodName: "previousRound",
			Handler:    _Wolflamp_PreviousRound_Handler,
		},
		{
			MethodName: "listHistoryInvest",
			Handler:    _Wolflamp_ListHistoryInvest_Handler,
		},
		{
			MethodName: "listFold",
			Handler:    _Wolflamp_ListFold_Handler,
		},
		{
			MethodName: "invest",
			Handler:    _Wolflamp_Invest_Handler,
		},
		{
			MethodName: "changeInvestFold",
			Handler:    _Wolflamp_ChangeInvestFold_Handler,
		},
		{
			MethodName: "getInvestInfoByPlayerId",
			Handler:    _Wolflamp_GetInvestInfoByPlayerId_Handler,
		},
		{
			MethodName: "getInvestByRoundId",
			Handler:    _Wolflamp_GetInvestByRoundId_Handler,
		},
		{
			MethodName: "getLambFoldAggregate",
			Handler:    _Wolflamp_GetLambFoldAggregate_Handler,
		},
		{
			MethodName: "getLambFoldAggregateV2",
			Handler:    _Wolflamp_GetLambFoldAggregateV2_Handler,
		},
		{
			MethodName: "dealOpenGame",
			Handler:    _Wolflamp_DealOpenGame_Handler,
		},
		{
			MethodName: "createOrder",
			Handler:    _Wolflamp_CreateOrder_Handler,
		},
		{
			MethodName: "updateOrder",
			Handler:    _Wolflamp_UpdateOrder_Handler,
		},
		{
			MethodName: "deleteOrder",
			Handler:    _Wolflamp_DeleteOrder_Handler,
		},
		{
			MethodName: "findOrder",
			Handler:    _Wolflamp_FindOrder_Handler,
		},
		{
			MethodName: "listOrder",
			Handler:    _Wolflamp_ListOrder_Handler,
		},
		{
			MethodName: "calculateWithdrawFee",
			Handler:    _Wolflamp_CalculateWithdrawFee_Handler,
		},
		{
			MethodName: "getOverview",
			Handler:    _Wolflamp_GetOverview_Handler,
		},
		{
			MethodName: "createPlayer",
			Handler:    _Wolflamp_CreatePlayer_Handler,
		},
		{
			MethodName: "updatePlayer",
			Handler:    _Wolflamp_UpdatePlayer_Handler,
		},
		{
			MethodName: "deletePlayer",
			Handler:    _Wolflamp_DeletePlayer_Handler,
		},
		{
			MethodName: "findPlayer",
			Handler:    _Wolflamp_FindPlayer_Handler,
		},
		{
			MethodName: "listPlayer",
			Handler:    _Wolflamp_ListPlayer_Handler,
		},
		{
			MethodName: "getByEmail",
			Handler:    _Wolflamp_GetByEmail_Handler,
		},
		{
			MethodName: "getByInviteCode",
			Handler:    _Wolflamp_GetByInviteCode_Handler,
		},
		{
			MethodName: "getInvitorListByIds",
			Handler:    _Wolflamp_GetInvitorListByIds_Handler,
		},
		{
			MethodName: "createReward",
			Handler:    _Wolflamp_CreateReward_Handler,
		},
		{
			MethodName: "updateReward",
			Handler:    _Wolflamp_UpdateReward_Handler,
		},
		{
			MethodName: "deleteReward",
			Handler:    _Wolflamp_DeleteReward_Handler,
		},
		{
			MethodName: "findReward",
			Handler:    _Wolflamp_FindReward_Handler,
		},
		{
			MethodName: "listReward",
			Handler:    _Wolflamp_ListReward_Handler,
		},
		{
			MethodName: "rewardAggregate",
			Handler:    _Wolflamp_RewardAggregate_Handler,
		},
		{
			MethodName: "updateSetting",
			Handler:    _Wolflamp_UpdateSetting_Handler,
		},
		{
			MethodName: "findSetting",
			Handler:    _Wolflamp_FindSetting_Handler,
		},
		{
			MethodName: "getWithdrawThreshold",
			Handler:    _Wolflamp_GetWithdrawThreshold_Handler,
		},
		{
			MethodName: "getMinWithdrawNum",
			Handler:    _Wolflamp_GetMinWithdrawNum_Handler,
		},
		{
			MethodName: "getWithdrawCommission",
			Handler:    _Wolflamp_GetWithdrawCommission_Handler,
		},
		{
			MethodName: "getIdleTime",
			Handler:    _Wolflamp_GetIdleTime_Handler,
		},
		{
			MethodName: "getRobotLampNum",
			Handler:    _Wolflamp_GetRobotLampNum_Handler,
		},
		{
			MethodName: "getGameRule",
			Handler:    _Wolflamp_GetGameRule_Handler,
		},
		{
			MethodName: "getRobotNum",
			Handler:    _Wolflamp_GetRobotNum_Handler,
		},
		{
			MethodName: "getGameCommission",
			Handler:    _Wolflamp_GetGameCommission_Handler,
		},
		{
			MethodName: "createStatement",
			Handler:    _Wolflamp_CreateStatement_Handler,
		},
		{
			MethodName: "updateStatement",
			Handler:    _Wolflamp_UpdateStatement_Handler,
		},
		{
			MethodName: "deleteStatement",
			Handler:    _Wolflamp_DeleteStatement_Handler,
		},
		{
			MethodName: "findStatement",
			Handler:    _Wolflamp_FindStatement_Handler,
		},
		{
			MethodName: "listStatement",
			Handler:    _Wolflamp_ListStatement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wolflamp.proto",
}
