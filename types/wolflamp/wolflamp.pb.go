// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.3
// source: wolflamp.proto

package wolflamp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BannerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CreatedAt int64     `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt int64     `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Status    uint32    `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	Endpoint  string    `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint"`
	Module    string    `protobuf:"bytes,6,opt,name=module,proto3" json:"module"`
	FileType  uint32    `protobuf:"varint,7,opt,name=file_type,json=fileType,proto3" json:"file_type"`
	Path      string    `protobuf:"bytes,8,opt,name=path,proto3" json:"path"`
	JumpUrl   string    `protobuf:"bytes,9,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url"`
	File      *FileInfo `protobuf:"bytes,11,opt,name=file,proto3" json:"file"`
}

func (x *BannerInfo) Reset() {
	*x = BannerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerInfo) ProtoMessage() {}

func (x *BannerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerInfo.ProtoReflect.Descriptor instead.
func (*BannerInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{0}
}

func (x *BannerInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BannerInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BannerInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BannerInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BannerInfo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BannerInfo) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *BannerInfo) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *BannerInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *BannerInfo) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

func (x *BannerInfo) GetFile() *FileInfo {
	if x != nil {
		return x.File
	}
	return nil
}

type BaseIDInt32Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *BaseIDInt32Resp) Reset() {
	*x = BaseIDInt32Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseIDInt32Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseIDInt32Resp) ProtoMessage() {}

func (x *BaseIDInt32Resp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseIDInt32Resp.ProtoReflect.Descriptor instead.
func (*BaseIDInt32Resp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{1}
}

func (x *BaseIDInt32Resp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseIDInt32Resp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseIDInt64Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *BaseIDInt64Resp) Reset() {
	*x = BaseIDInt64Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseIDInt64Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseIDInt64Resp) ProtoMessage() {}

func (x *BaseIDInt64Resp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseIDInt64Resp.ProtoReflect.Descriptor instead.
func (*BaseIDInt64Resp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{2}
}

func (x *BaseIDInt64Resp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseIDInt64Resp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *BaseIDResp) Reset() {
	*x = BaseIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseIDResp) ProtoMessage() {}

func (x *BaseIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseIDResp.ProtoReflect.Descriptor instead.
func (*BaseIDResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{3}
}

func (x *BaseIDResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseIDResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseIDUint32Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *BaseIDUint32Resp) Reset() {
	*x = BaseIDUint32Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseIDUint32Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseIDUint32Resp) ProtoMessage() {}

func (x *BaseIDUint32Resp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseIDUint32Resp.ProtoReflect.Descriptor instead.
func (*BaseIDUint32Resp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{4}
}

func (x *BaseIDUint32Resp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseIDUint32Resp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
}

func (x *BaseResp) Reset() {
	*x = BaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResp) ProtoMessage() {}

func (x *BaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResp.ProtoReflect.Descriptor instead.
func (*BaseResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{5}
}

func (x *BaseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseUUIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *BaseUUIDResp) Reset() {
	*x = BaseUUIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUUIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUUIDResp) ProtoMessage() {}

func (x *BaseUUIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUUIDResp.ProtoReflect.Descriptor instead.
func (*BaseUUIDResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{6}
}

func (x *BaseUUIDResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaseUUIDResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 计算提币相关费用
type CalculateWithdrawFeeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance float64 `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance"`
	Amount  float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount"`
}

func (x *CalculateWithdrawFeeReq) Reset() {
	*x = CalculateWithdrawFeeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateWithdrawFeeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateWithdrawFeeReq) ProtoMessage() {}

func (x *CalculateWithdrawFeeReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateWithdrawFeeReq.ProtoReflect.Descriptor instead.
func (*CalculateWithdrawFeeReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{7}
}

func (x *CalculateWithdrawFeeReq) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CalculateWithdrawFeeReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CalculateWithdrawFeeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandlingFee    float64 `protobuf:"fixed64,1,opt,name=handling_fee,json=handlingFee,proto3" json:"handling_fee"`
	ReceivedAmount float64 `protobuf:"fixed64,2,opt,name=received_amount,json=receivedAmount,proto3" json:"received_amount"`
	TotalAmount    float64 `protobuf:"fixed64,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`
}

func (x *CalculateWithdrawFeeResp) Reset() {
	*x = CalculateWithdrawFeeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateWithdrawFeeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateWithdrawFeeResp) ProtoMessage() {}

func (x *CalculateWithdrawFeeResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateWithdrawFeeResp.ProtoReflect.Descriptor instead.
func (*CalculateWithdrawFeeResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{8}
}

func (x *CalculateWithdrawFeeResp) GetHandlingFee() float64 {
	if x != nil {
		return x.HandlingFee
	}
	return 0
}

func (x *CalculateWithdrawFeeResp) GetReceivedAmount() float64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *CalculateWithdrawFeeResp) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type CreateBannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	Endpoint string `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint"`
	Module   string `protobuf:"bytes,6,opt,name=module,proto3" json:"module"`
	FileType uint32 `protobuf:"varint,7,opt,name=file_type,json=fileType,proto3" json:"file_type"`
	Path     string `protobuf:"bytes,8,opt,name=path,proto3" json:"path"`
	JumpUrl  string `protobuf:"bytes,9,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url"`
	FileId   string `protobuf:"bytes,10,opt,name=file_id,json=fileId,proto3" json:"file_id"`
}

func (x *CreateBannerReq) Reset() {
	*x = CreateBannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBannerReq) ProtoMessage() {}

func (x *CreateBannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBannerReq.ProtoReflect.Descriptor instead.
func (*CreateBannerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{9}
}

func (x *CreateBannerReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateBannerReq) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CreateBannerReq) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *CreateBannerReq) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *CreateBannerReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateBannerReq) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

func (x *CreateBannerReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type CreateExchangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      uint64 `protobuf:"varint,5,opt,name=player_id,json=playerId,proto3" json:"player_id"`
	TransactionId string `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id"`
	Type          uint32 `protobuf:"varint,7,opt,name=type,proto3" json:"type"`
	CoinNum       uint32 `protobuf:"varint,8,opt,name=coin_num,json=coinNum,proto3" json:"coin_num"`
	LampNum       uint32 `protobuf:"varint,9,opt,name=lamp_num,json=lampNum,proto3" json:"lamp_num"`
}

func (x *CreateExchangeReq) Reset() {
	*x = CreateExchangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExchangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExchangeReq) ProtoMessage() {}

func (x *CreateExchangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExchangeReq.ProtoReflect.Descriptor instead.
func (*CreateExchangeReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{10}
}

func (x *CreateExchangeReq) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *CreateExchangeReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *CreateExchangeReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateExchangeReq) GetCoinNum() uint32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

func (x *CreateExchangeReq) GetLampNum() uint32 {
	if x != nil {
		return x.LampNum
	}
	return 0
}

type CreateInvestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      uint64  `protobuf:"varint,5,opt,name=player_id,json=playerId,proto3" json:"player_id"`
	FoldNo        uint32  `protobuf:"varint,7,opt,name=fold_no,json=foldNo,proto3" json:"fold_no"`
	LambNum       uint32  `protobuf:"varint,8,opt,name=lamb_num,json=lambNum,proto3" json:"lamb_num"`
	ProfitAndLoss float32 `protobuf:"fixed32,9,opt,name=profit_and_loss,json=profitAndLoss,proto3" json:"profit_and_loss"`
	RoundId       uint64  `protobuf:"varint,10,opt,name=round_id,json=roundId,proto3" json:"round_id"`
}

func (x *CreateInvestReq) Reset() {
	*x = CreateInvestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvestReq) ProtoMessage() {}

func (x *CreateInvestReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvestReq.ProtoReflect.Descriptor instead.
func (*CreateInvestReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{11}
}

func (x *CreateInvestReq) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *CreateInvestReq) GetFoldNo() uint32 {
	if x != nil {
		return x.FoldNo
	}
	return 0
}

func (x *CreateInvestReq) GetLambNum() uint32 {
	if x != nil {
		return x.LambNum
	}
	return 0
}

func (x *CreateInvestReq) GetProfitAndLoss() float32 {
	if x != nil {
		return x.ProfitAndLoss
	}
	return 0
}

func (x *CreateInvestReq) GetRoundId() uint64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

type CreateOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    uint64  `protobuf:"varint,3,opt,name=player_id,json=playerId,proto3" json:"player_id"`
	Status      uint32  `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	Type        string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`
	Num         float64 `protobuf:"fixed64,6,opt,name=num,proto3" json:"num"`
	ToAddress   string  `protobuf:"bytes,8,opt,name=to_address,json=toAddress,proto3" json:"to_address"`
	FromAddress string  `protobuf:"bytes,9,opt,name=from_address,json=fromAddress,proto3" json:"from_address"`
	HandlingFee float64 `protobuf:"fixed64,10,opt,name=handling_fee,json=handlingFee,proto3" json:"handling_fee"`
	Network     string  `protobuf:"bytes,11,opt,name=network,proto3" json:"network"`
}

func (x *CreateOrderReq) Reset() {
	*x = CreateOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderReq) ProtoMessage() {}

func (x *CreateOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderReq.ProtoReflect.Descriptor instead.
func (*CreateOrderReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{12}
}

func (x *CreateOrderReq) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *CreateOrderReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateOrderReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateOrderReq) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CreateOrderReq) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *CreateOrderReq) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *CreateOrderReq) GetHandlingFee() float64 {
	if x != nil {
		return x.HandlingFee
	}
	return 0
}

func (x *CreateOrderReq) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type CreatePlayerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email                string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	Password             string  `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	Status               uint32  `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	Name                 string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Lamp                 float32 `protobuf:"fixed32,6,opt,name=lamp,proto3" json:"lamp"`
	Rank                 uint32  `protobuf:"varint,7,opt,name=rank,proto3" json:"rank"`
	Amount               float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount"`
	InvitedNum           uint32  `protobuf:"varint,10,opt,name=invited_num,json=invitedNum,proto3" json:"invited_num"`
	TotalIncome          float64 `protobuf:"fixed64,11,opt,name=total_income,json=totalIncome,proto3" json:"total_income"`
	ProfitAndLoss        float32 `protobuf:"fixed32,12,opt,name=profit_and_loss,json=profitAndLoss,proto3" json:"profit_and_loss"`
	Recent_100WinPercent float32 `protobuf:"fixed32,13,opt,name=recent_100_win_percent,json=recent100WinPercent,proto3" json:"recent_100_win_percent"`
	InvitedCode          string  `protobuf:"bytes,14,opt,name=invited_code,json=invitedCode,proto3" json:"invited_code"`
	SystemCommission     float32 `protobuf:"fixed32,15,opt,name=system_commission,json=systemCommission,proto3" json:"system_commission"`
}

func (x *CreatePlayerReq) Reset() {
	*x = CreatePlayerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlayerReq) ProtoMessage() {}

func (x *CreatePlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlayerReq.ProtoReflect.Descriptor instead.
func (*CreatePlayerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{13}
}

func (x *CreatePlayerReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreatePlayerReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreatePlayerReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreatePlayerReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePlayerReq) GetLamp() float32 {
	if x != nil {
		return x.Lamp
	}
	return 0
}

func (x *CreatePlayerReq) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CreatePlayerReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreatePlayerReq) GetInvitedNum() uint32 {
	if x != nil {
		return x.InvitedNum
	}
	return 0
}

func (x *CreatePlayerReq) GetTotalIncome() float64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *CreatePlayerReq) GetProfitAndLoss() float32 {
	if x != nil {
		return x.ProfitAndLoss
	}
	return 0
}

func (x *CreatePlayerReq) GetRecent_100WinPercent() float32 {
	if x != nil {
		return x.Recent_100WinPercent
	}
	return 0
}

func (x *CreatePlayerReq) GetInvitedCode() string {
	if x != nil {
		return x.InvitedCode
	}
	return ""
}

func (x *CreatePlayerReq) GetSystemCommission() float32 {
	if x != nil {
		return x.SystemCommission
	}
	return 0
}

type CreateRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           uint32  `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	ContributorId    uint64  `protobuf:"varint,5,opt,name=contributor_id,json=contributorId,proto3" json:"contributor_id"`
	ContributorEmail string  `protobuf:"bytes,6,opt,name=contributor_email,json=contributorEmail,proto3" json:"contributor_email"`
	ContributorLevel uint32  `protobuf:"varint,7,opt,name=contributor_level,json=contributorLevel,proto3" json:"contributor_level"`
	Num              float32 `protobuf:"fixed32,8,opt,name=num,proto3" json:"num"`
	Remark           string  `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark"`
	ToId             uint64  `protobuf:"varint,10,opt,name=to_id,json=toId,proto3" json:"to_id"`
}

func (x *CreateRewardReq) Reset() {
	*x = CreateRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRewardReq) ProtoMessage() {}

func (x *CreateRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRewardReq.ProtoReflect.Descriptor instead.
func (*CreateRewardReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{14}
}

func (x *CreateRewardReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateRewardReq) GetContributorId() uint64 {
	if x != nil {
		return x.ContributorId
	}
	return 0
}

func (x *CreateRewardReq) GetContributorEmail() string {
	if x != nil {
		return x.ContributorEmail
	}
	return ""
}

func (x *CreateRewardReq) GetContributorLevel() uint32 {
	if x != nil {
		return x.ContributorLevel
	}
	return 0
}

func (x *CreateRewardReq) GetNum() float32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CreateRewardReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateRewardReq) GetToId() uint64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

type CreateRoundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt int64 `protobuf:"varint,5,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	OpenAt  int64 `protobuf:"varint,6,opt,name=open_at,json=openAt,proto3" json:"open_at"`
	EndAt   int64 `protobuf:"varint,7,opt,name=end_at,json=endAt,proto3" json:"end_at"`
}

func (x *CreateRoundReq) Reset() {
	*x = CreateRoundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoundReq) ProtoMessage() {}

func (x *CreateRoundReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoundReq.ProtoReflect.Descriptor instead.
func (*CreateRoundReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{15}
}

func (x *CreateRoundReq) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *CreateRoundReq) GetOpenAt() int64 {
	if x != nil {
		return x.OpenAt
	}
	return 0
}

func (x *CreateRoundReq) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

type DeleteBannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteBannerReq) Reset() {
	*x = DeleteBannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBannerReq) ProtoMessage() {}

func (x *DeleteBannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBannerReq.ProtoReflect.Descriptor instead.
func (*DeleteBannerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteBannerReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteExchangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteExchangeReq) Reset() {
	*x = DeleteExchangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExchangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExchangeReq) ProtoMessage() {}

func (x *DeleteExchangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExchangeReq.ProtoReflect.Descriptor instead.
func (*DeleteExchangeReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteExchangeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteOrderReq) Reset() {
	*x = DeleteOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderReq) ProtoMessage() {}

func (x *DeleteOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderReq.ProtoReflect.Descriptor instead.
func (*DeleteOrderReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteOrderReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeletePlayerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *DeletePlayerReq) Reset() {
	*x = DeletePlayerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlayerReq) ProtoMessage() {}

func (x *DeletePlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlayerReq.ProtoReflect.Descriptor instead.
func (*DeletePlayerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{19}
}

func (x *DeletePlayerReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteRewardReq) Reset() {
	*x = DeleteRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRewardReq) ProtoMessage() {}

func (x *DeleteRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRewardReq.ProtoReflect.Descriptor instead.
func (*DeleteRewardReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteRewardReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// base message
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{21}
}

type ExchangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CreatedAt     int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt     int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Status        uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	PlayerId      uint64 `protobuf:"varint,5,opt,name=player_id,json=playerId,proto3" json:"player_id"`
	TransactionId string `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id"`
	Type          uint32 `protobuf:"varint,7,opt,name=type,proto3" json:"type"`
	CoinNum       uint32 `protobuf:"varint,8,opt,name=coin_num,json=coinNum,proto3" json:"coin_num"`
	LampNum       uint32 `protobuf:"varint,9,opt,name=lamp_num,json=lampNum,proto3" json:"lamp_num"`
}

func (x *ExchangeInfo) Reset() {
	*x = ExchangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeInfo) ProtoMessage() {}

func (x *ExchangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeInfo.ProtoReflect.Descriptor instead.
func (*ExchangeInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{22}
}

func (x *ExchangeInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ExchangeInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ExchangeInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExchangeInfo) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *ExchangeInfo) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ExchangeInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExchangeInfo) GetCoinNum() uint32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

func (x *ExchangeInfo) GetLampNum() uint32 {
	if x != nil {
		return x.LampNum
	}
	return 0
}

type ExchangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	CoinAmount uint32 `protobuf:"varint,2,opt,name=coin_amount,json=coinAmount,proto3" json:"coin_amount"`
	LampAmount uint32 `protobuf:"varint,3,opt,name=lamp_amount,json=lampAmount,proto3" json:"lamp_amount"`
	PlayerId   uint64 `protobuf:"varint,4,opt,name=player_id,json=playerId,proto3" json:"player_id"`
}

func (x *ExchangeReq) Reset() {
	*x = ExchangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeReq) ProtoMessage() {}

func (x *ExchangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeReq.ProtoReflect.Descriptor instead.
func (*ExchangeReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{23}
}

func (x *ExchangeReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExchangeReq) GetCoinAmount() uint32 {
	if x != nil {
		return x.CoinAmount
	}
	return 0
}

func (x *ExchangeReq) GetLampAmount() uint32 {
	if x != nil {
		return x.LampAmount
	}
	return 0
}

func (x *ExchangeReq) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	FileType uint32 `protobuf:"varint,4,opt,name=file_type,json=fileType,proto3" json:"file_type"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{24}
}

func (x *FileInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileInfo) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

type FindBannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *FindBannerReq) Reset() {
	*x = FindBannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBannerReq) ProtoMessage() {}

func (x *FindBannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBannerReq.ProtoReflect.Descriptor instead.
func (*FindBannerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{25}
}

func (x *FindBannerReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindExchangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PlayerId *uint64 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3,oneof" json:"player_id"`
}

func (x *FindExchangeReq) Reset() {
	*x = FindExchangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindExchangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindExchangeReq) ProtoMessage() {}

func (x *FindExchangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindExchangeReq.ProtoReflect.Descriptor instead.
func (*FindExchangeReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{26}
}

func (x *FindExchangeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindExchangeReq) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type FindOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PlayerId *uint64 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3,oneof" json:"player_id"`
}

func (x *FindOrderReq) Reset() {
	*x = FindOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOrderReq) ProtoMessage() {}

func (x *FindOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOrderReq.ProtoReflect.Descriptor instead.
func (*FindOrderReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{27}
}

func (x *FindOrderReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindOrderReq) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type FindPlayerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *FindPlayerReq) Reset() {
	*x = FindPlayerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPlayerReq) ProtoMessage() {}

func (x *FindPlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPlayerReq.ProtoReflect.Descriptor instead.
func (*FindPlayerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{28}
}

func (x *FindPlayerReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ToId *uint64 `protobuf:"varint,2,opt,name=to_id,json=toId,proto3,oneof" json:"to_id"`
}

func (x *FindRewardReq) Reset() {
	*x = FindRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRewardReq) ProtoMessage() {}

func (x *FindRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRewardReq.ProtoReflect.Descriptor instead.
func (*FindRewardReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{29}
}

func (x *FindRewardReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindRewardReq) GetToId() uint64 {
	if x != nil && x.ToId != nil {
		return *x.ToId
	}
	return 0
}

type FindRoundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id"`
}

func (x *FindRoundReq) Reset() {
	*x = FindRoundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRoundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRoundReq) ProtoMessage() {}

func (x *FindRoundReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRoundReq.ProtoReflect.Descriptor instead.
func (*FindRoundReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{30}
}

func (x *FindRoundReq) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type FindSettingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module"`
}

func (x *FindSettingReq) Reset() {
	*x = FindSettingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSettingReq) ProtoMessage() {}

func (x *FindSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSettingReq.ProtoReflect.Descriptor instead.
func (*FindSettingReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{31}
}

func (x *FindSettingReq) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type FindSettingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonString string `protobuf:"bytes,2,opt,name=jsonString,proto3" json:"jsonString"`
}

func (x *FindSettingResp) Reset() {
	*x = FindSettingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSettingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSettingResp) ProtoMessage() {}

func (x *FindSettingResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSettingResp.ProtoReflect.Descriptor instead.
func (*FindSettingResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{32}
}

func (x *FindSettingResp) GetJsonString() string {
	if x != nil {
		return x.JsonString
	}
	return ""
}

// FOLD
type FoldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CreatedAt       int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt       int64   `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	FoldNo          uint32  `protobuf:"varint,4,opt,name=fold_no,json=foldNo,proto3" json:"fold_no"`
	LambNum         uint32  `protobuf:"varint,5,opt,name=lamb_num,json=lambNum,proto3" json:"lamb_num"`
	RoundId         uint64  `protobuf:"varint,6,opt,name=round_id,json=roundId,proto3" json:"round_id"`
	RoundCount      uint32  `protobuf:"varint,7,opt,name=round_count,json=roundCount,proto3" json:"round_count"`
	TotalRoundCount uint64  `protobuf:"varint,8,opt,name=total_round_count,json=totalRoundCount,proto3" json:"total_round_count"`
	ProfitAndLoss   float32 `protobuf:"fixed32,9,opt,name=profit_and_loss,json=profitAndLoss,proto3" json:"profit_and_loss"`
}

func (x *FoldInfo) Reset() {
	*x = FoldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldInfo) ProtoMessage() {}

func (x *FoldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldInfo.ProtoReflect.Descriptor instead.
func (*FoldInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{33}
}

func (x *FoldInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FoldInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FoldInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *FoldInfo) GetFoldNo() uint32 {
	if x != nil {
		return x.FoldNo
	}
	return 0
}

func (x *FoldInfo) GetLambNum() uint32 {
	if x != nil {
		return x.LambNum
	}
	return 0
}

func (x *FoldInfo) GetRoundId() uint64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *FoldInfo) GetRoundCount() uint32 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *FoldInfo) GetTotalRoundCount() uint64 {
	if x != nil {
		return x.TotalRoundCount
	}
	return 0
}

func (x *FoldInfo) GetProfitAndLoss() float32 {
	if x != nil {
		return x.ProfitAndLoss
	}
	return 0
}

type GameRuleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
}

func (x *GameRuleResp) Reset() {
	*x = GameRuleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRuleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRuleResp) ProtoMessage() {}

func (x *GameRuleResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRuleResp.ProtoReflect.Descriptor instead.
func (*GameRuleResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{34}
}

func (x *GameRuleResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GameRuleResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GetByEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
}

func (x *GetByEmailReq) Reset() {
	*x = GetByEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByEmailReq) ProtoMessage() {}

func (x *GetByEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByEmailReq.ProtoReflect.Descriptor instead.
func (*GetByEmailReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{35}
}

func (x *GetByEmailReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetByInviteCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteCode string `protobuf:"bytes,1,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code"`
}

func (x *GetByInviteCodeReq) Reset() {
	*x = GetByInviteCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByInviteCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByInviteCodeReq) ProtoMessage() {}

func (x *GetByInviteCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByInviteCodeReq.ProtoReflect.Descriptor instead.
func (*GetByInviteCodeReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{36}
}

func (x *GetByInviteCodeReq) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

type GetInvestInfoByPlayerIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint64  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id"`
	RoundId  *uint64 `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3,oneof" json:"round_id"`
}

func (x *GetInvestInfoByPlayerIdReq) Reset() {
	*x = GetInvestInfoByPlayerIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvestInfoByPlayerIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvestInfoByPlayerIdReq) ProtoMessage() {}

func (x *GetInvestInfoByPlayerIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvestInfoByPlayerIdReq.ProtoReflect.Descriptor instead.
func (*GetInvestInfoByPlayerIdReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{37}
}

func (x *GetInvestInfoByPlayerIdReq) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *GetInvestInfoByPlayerIdReq) GetRoundId() uint64 {
	if x != nil && x.RoundId != nil {
		return *x.RoundId
	}
	return 0
}

type GetInvestInfoByPlayerIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*InvestInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
}

func (x *GetInvestInfoByPlayerIdResp) Reset() {
	*x = GetInvestInfoByPlayerIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvestInfoByPlayerIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvestInfoByPlayerIdResp) ProtoMessage() {}

func (x *GetInvestInfoByPlayerIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvestInfoByPlayerIdResp.ProtoReflect.Descriptor instead.
func (*GetInvestInfoByPlayerIdResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{38}
}

func (x *GetInvestInfoByPlayerIdResp) GetData() []*InvestInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetLambFoldAggregateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRoundCountMin uint64 `protobuf:"varint,1,opt,name=total_round_count_min,json=totalRoundCountMin,proto3" json:"total_round_count_min"`
	TotalRoundCountMax uint64 `protobuf:"varint,2,opt,name=total_round_count_max,json=totalRoundCountMax,proto3" json:"total_round_count_max"`
}

func (x *GetLambFoldAggregateReq) Reset() {
	*x = GetLambFoldAggregateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLambFoldAggregateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLambFoldAggregateReq) ProtoMessage() {}

func (x *GetLambFoldAggregateReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLambFoldAggregateReq.ProtoReflect.Descriptor instead.
func (*GetLambFoldAggregateReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{39}
}

func (x *GetLambFoldAggregateReq) GetTotalRoundCountMin() uint64 {
	if x != nil {
		return x.TotalRoundCountMin
	}
	return 0
}

func (x *GetLambFoldAggregateReq) GetTotalRoundCountMax() uint64 {
	if x != nil {
		return x.TotalRoundCountMax
	}
	return 0
}

type GetLambFoldAggregateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*LambFoldAggregateInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
}

func (x *GetLambFoldAggregateResp) Reset() {
	*x = GetLambFoldAggregateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLambFoldAggregateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLambFoldAggregateResp) ProtoMessage() {}

func (x *GetLambFoldAggregateResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLambFoldAggregateResp.ProtoReflect.Descriptor instead.
func (*GetLambFoldAggregateResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{40}
}

func (x *GetLambFoldAggregateResp) GetData() []*LambFoldAggregateInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type IDInt32Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *IDInt32Req) Reset() {
	*x = IDInt32Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDInt32Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDInt32Req) ProtoMessage() {}

func (x *IDInt32Req) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDInt32Req.ProtoReflect.Descriptor instead.
func (*IDInt32Req) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{41}
}

func (x *IDInt32Req) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IDInt64Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *IDInt64Req) Reset() {
	*x = IDInt64Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDInt64Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDInt64Req) ProtoMessage() {}

func (x *IDInt64Req) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDInt64Req.ProtoReflect.Descriptor instead.
func (*IDInt64Req) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{42}
}

func (x *IDInt64Req) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{43}
}

func (x *IDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IDUint32Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *IDUint32Req) Reset() {
	*x = IDUint32Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDUint32Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDUint32Req) ProtoMessage() {}

func (x *IDUint32Req) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDUint32Req.ProtoReflect.Descriptor instead.
func (*IDUint32Req) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{44}
}

func (x *IDUint32Req) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IDsInt32Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids"`
}

func (x *IDsInt32Req) Reset() {
	*x = IDsInt32Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDsInt32Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsInt32Req) ProtoMessage() {}

func (x *IDsInt32Req) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsInt32Req.ProtoReflect.Descriptor instead.
func (*IDsInt32Req) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{45}
}

func (x *IDsInt32Req) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type IDsInt64Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids"`
}

func (x *IDsInt64Req) Reset() {
	*x = IDsInt64Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDsInt64Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsInt64Req) ProtoMessage() {}

func (x *IDsInt64Req) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsInt64Req.ProtoReflect.Descriptor instead.
func (*IDsInt64Req) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{46}
}

func (x *IDsInt64Req) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type IDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids"`
}

func (x *IDsReq) Reset() {
	*x = IDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsReq) ProtoMessage() {}

func (x *IDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsReq.ProtoReflect.Descriptor instead.
func (*IDsReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{47}
}

func (x *IDsReq) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type IDsUint32Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids"`
}

func (x *IDsUint32Req) Reset() {
	*x = IDsUint32Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDsUint32Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsUint32Req) ProtoMessage() {}

func (x *IDsUint32Req) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsUint32Req.ProtoReflect.Descriptor instead.
func (*IDsUint32Req) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{48}
}

func (x *IDsUint32Req) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type IdleTimeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdleTime uint32 `protobuf:"varint,1,opt,name=idleTime,proto3" json:"idleTime"`
}

func (x *IdleTimeResp) Reset() {
	*x = IdleTimeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdleTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdleTimeResp) ProtoMessage() {}

func (x *IdleTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdleTimeResp.ProtoReflect.Descriptor instead.
func (*IdleTimeResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{49}
}

func (x *IdleTimeResp) GetIdleTime() uint32 {
	if x != nil {
		return x.IdleTime
	}
	return 0
}

// INVEST
type InvestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CreatedAt     int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt     int64   `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	PlayerId      uint64  `protobuf:"varint,5,opt,name=player_id,json=playerId,proto3" json:"player_id"`
	PlayerEmail   string  `protobuf:"bytes,6,opt,name=player_email,json=playerEmail,proto3" json:"player_email"`
	FoldNo        uint32  `protobuf:"varint,7,opt,name=fold_no,json=foldNo,proto3" json:"fold_no"`
	LambNum       uint32  `protobuf:"varint,8,opt,name=lamb_num,json=lambNum,proto3" json:"lamb_num"`
	ProfitAndLoss float32 `protobuf:"fixed32,9,opt,name=profit_and_loss,json=profitAndLoss,proto3" json:"profit_and_loss"`
	RoundId       uint64  `protobuf:"varint,10,opt,name=round_id,json=roundId,proto3" json:"round_id"`
}

func (x *InvestInfo) Reset() {
	*x = InvestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestInfo) ProtoMessage() {}

func (x *InvestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestInfo.ProtoReflect.Descriptor instead.
func (*InvestInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{50}
}

func (x *InvestInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvestInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *InvestInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *InvestInfo) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *InvestInfo) GetPlayerEmail() string {
	if x != nil {
		return x.PlayerEmail
	}
	return ""
}

func (x *InvestInfo) GetFoldNo() uint32 {
	if x != nil {
		return x.FoldNo
	}
	return 0
}

func (x *InvestInfo) GetLambNum() uint32 {
	if x != nil {
		return x.LambNum
	}
	return 0
}

func (x *InvestInfo) GetProfitAndLoss() float32 {
	if x != nil {
		return x.ProfitAndLoss
	}
	return 0
}

func (x *InvestInfo) GetRoundId() uint64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

type LambFoldAggregateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LambFoldNo         uint32  `protobuf:"varint,1,opt,name=lamb_fold_no,json=lambFoldNo,proto3" json:"lamb_fold_no"`
	ProfitAndLossCount float32 `protobuf:"fixed32,2,opt,name=profit_and_loss_count,json=profitAndLossCount,proto3" json:"profit_and_loss_count"`
	TotalRoundCount    uint32  `protobuf:"varint,3,opt,name=total_round_count,json=totalRoundCount,proto3" json:"total_round_count"`
	WinCount           uint32  `protobuf:"varint,4,opt,name=win_count,json=winCount,proto3" json:"win_count"`
	AvgWinRate         float32 `protobuf:"fixed32,5,opt,name=avg_win_rate,json=avgWinRate,proto3" json:"avg_win_rate"`
}

func (x *LambFoldAggregateInfo) Reset() {
	*x = LambFoldAggregateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LambFoldAggregateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LambFoldAggregateInfo) ProtoMessage() {}

func (x *LambFoldAggregateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LambFoldAggregateInfo.ProtoReflect.Descriptor instead.
func (*LambFoldAggregateInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{51}
}

func (x *LambFoldAggregateInfo) GetLambFoldNo() uint32 {
	if x != nil {
		return x.LambFoldNo
	}
	return 0
}

func (x *LambFoldAggregateInfo) GetProfitAndLossCount() float32 {
	if x != nil {
		return x.ProfitAndLossCount
	}
	return 0
}

func (x *LambFoldAggregateInfo) GetTotalRoundCount() uint32 {
	if x != nil {
		return x.TotalRoundCount
	}
	return 0
}

func (x *LambFoldAggregateInfo) GetWinCount() uint32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

func (x *LambFoldAggregateInfo) GetAvgWinRate() float32 {
	if x != nil {
		return x.AvgWinRate
	}
	return 0
}

type ListBannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Status   *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	Endpoint *string `protobuf:"bytes,5,opt,name=endpoint,proto3,oneof" json:"endpoint"`
	Module   *string `protobuf:"bytes,6,opt,name=module,proto3,oneof" json:"module"`
	FileType *uint32 `protobuf:"varint,7,opt,name=file_type,json=fileType,proto3,oneof" json:"file_type"`
	Path     *string `protobuf:"bytes,8,opt,name=path,proto3,oneof" json:"path"`
	JumpUrl  *string `protobuf:"bytes,9,opt,name=jump_url,json=jumpUrl,proto3,oneof" json:"jump_url"`
}

func (x *ListBannerReq) Reset() {
	*x = ListBannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBannerReq) ProtoMessage() {}

func (x *ListBannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBannerReq.ProtoReflect.Descriptor instead.
func (*ListBannerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{52}
}

func (x *ListBannerReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListBannerReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBannerReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ListBannerReq) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *ListBannerReq) GetModule() string {
	if x != nil && x.Module != nil {
		return *x.Module
	}
	return ""
}

func (x *ListBannerReq) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *ListBannerReq) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ListBannerReq) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

type ListBannerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64        `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Data  []*BannerInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *ListBannerResp) Reset() {
	*x = ListBannerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBannerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBannerResp) ProtoMessage() {}

func (x *ListBannerResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBannerResp.ProtoReflect.Descriptor instead.
func (*ListBannerResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{53}
}

func (x *ListBannerResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBannerResp) GetData() []*BannerInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListExchangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	PageSize      uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	PlayerId      *uint64 `protobuf:"varint,5,opt,name=player_id,json=playerId,proto3,oneof" json:"player_id"`
	TransactionId *string `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id"`
	Type          *uint32 `protobuf:"varint,7,opt,name=type,proto3,oneof" json:"type"`
}

func (x *ListExchangeReq) Reset() {
	*x = ListExchangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExchangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExchangeReq) ProtoMessage() {}

func (x *ListExchangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExchangeReq.ProtoReflect.Descriptor instead.
func (*ListExchangeReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{54}
}

func (x *ListExchangeReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListExchangeReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListExchangeReq) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *ListExchangeReq) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *ListExchangeReq) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type ListExchangeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64          `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Data  []*ExchangeInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *ListExchangeResp) Reset() {
	*x = ListExchangeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExchangeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExchangeResp) ProtoMessage() {}

func (x *ListExchangeResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExchangeResp.ProtoReflect.Descriptor instead.
func (*ListExchangeResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{55}
}

func (x *ListExchangeResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListExchangeResp) GetData() []*ExchangeInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListFoldReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page               uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	PageSize           uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	RoundId            *uint64 `protobuf:"varint,3,opt,name=round_id,json=roundId,proto3,oneof" json:"round_id"`
	TotalRoundCount    *uint64 `protobuf:"varint,4,opt,name=total_round_count,json=totalRoundCount,proto3,oneof" json:"total_round_count"`
	TotalRoundCoundMin *uint64 `protobuf:"varint,5,opt,name=total_round_cound_min,json=totalRoundCoundMin,proto3,oneof" json:"total_round_cound_min"`
	TotalRoundCoundMax *uint64 `protobuf:"varint,6,opt,name=total_round_cound_max,json=totalRoundCoundMax,proto3,oneof" json:"total_round_cound_max"`
}

func (x *ListFoldReq) Reset() {
	*x = ListFoldReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFoldReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFoldReq) ProtoMessage() {}

func (x *ListFoldReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFoldReq.ProtoReflect.Descriptor instead.
func (*ListFoldReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{56}
}

func (x *ListFoldReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListFoldReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFoldReq) GetRoundId() uint64 {
	if x != nil && x.RoundId != nil {
		return *x.RoundId
	}
	return 0
}

func (x *ListFoldReq) GetTotalRoundCount() uint64 {
	if x != nil && x.TotalRoundCount != nil {
		return *x.TotalRoundCount
	}
	return 0
}

func (x *ListFoldReq) GetTotalRoundCoundMin() uint64 {
	if x != nil && x.TotalRoundCoundMin != nil {
		return *x.TotalRoundCoundMin
	}
	return 0
}

func (x *ListFoldReq) GetTotalRoundCoundMax() uint64 {
	if x != nil && x.TotalRoundCoundMax != nil {
		return *x.TotalRoundCoundMax
	}
	return 0
}

type ListFoldResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64      `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Data  []*FoldInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *ListFoldResp) Reset() {
	*x = ListFoldResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFoldResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFoldResp) ProtoMessage() {}

func (x *ListFoldResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFoldResp.ProtoReflect.Descriptor instead.
func (*ListFoldResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{57}
}

func (x *ListFoldResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFoldResp) GetData() []*FoldInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        uint64   `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	PageSize    uint64   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	PlayerId    *uint64  `protobuf:"varint,3,opt,name=player_id,json=playerId,proto3,oneof" json:"player_id"`
	Status      *uint32  `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	Type        *string  `protobuf:"bytes,5,opt,name=type,proto3,oneof" json:"type"`
	Code        *string  `protobuf:"bytes,6,opt,name=code,proto3,oneof" json:"code"`
	Num         *float64 `protobuf:"fixed64,7,opt,name=num,proto3,oneof" json:"num"`
	ToAddress   *string  `protobuf:"bytes,8,opt,name=to_address,json=toAddress,proto3,oneof" json:"to_address"`
	FromAddress *string  `protobuf:"bytes,9,opt,name=from_address,json=fromAddress,proto3,oneof" json:"from_address"`
}

func (x *ListOrderReq) Reset() {
	*x = ListOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrderReq) ProtoMessage() {}

func (x *ListOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrderReq.ProtoReflect.Descriptor instead.
func (*ListOrderReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{58}
}

func (x *ListOrderReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListOrderReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrderReq) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *ListOrderReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ListOrderReq) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ListOrderReq) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *ListOrderReq) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *ListOrderReq) GetToAddress() string {
	if x != nil && x.ToAddress != nil {
		return *x.ToAddress
	}
	return ""
}

func (x *ListOrderReq) GetFromAddress() string {
	if x != nil && x.FromAddress != nil {
		return *x.FromAddress
	}
	return ""
}

type ListOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64       `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Data  []*OrderInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *ListOrderResp) Reset() {
	*x = ListOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrderResp) ProtoMessage() {}

func (x *ListOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrderResp.ProtoReflect.Descriptor instead.
func (*ListOrderResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{59}
}

func (x *ListOrderResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListOrderResp) GetData() []*OrderInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListPlayerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page                 uint64   `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	PageSize             uint64   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Email                *string  `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email"`
	Status               *uint32  `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	Name                 *string  `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name"`
	Lamp                 *float32 `protobuf:"fixed32,6,opt,name=lamp,proto3,oneof" json:"lamp"`
	Rank                 *uint32  `protobuf:"varint,7,opt,name=rank,proto3,oneof" json:"rank"`
	Amount               *float64 `protobuf:"fixed64,8,opt,name=amount,proto3,oneof" json:"amount"`
	InvitedNum           *uint32  `protobuf:"varint,10,opt,name=invited_num,json=invitedNum,proto3,oneof" json:"invited_num"`
	TotalIncome          *float64 `protobuf:"fixed64,11,opt,name=total_income,json=totalIncome,proto3,oneof" json:"total_income"`
	ProfitAndLoss        *float32 `protobuf:"fixed32,12,opt,name=profit_and_loss,json=profitAndLoss,proto3,oneof" json:"profit_and_loss"`
	Recent_100WinPercent *float32 `protobuf:"fixed32,13,opt,name=recent_100_win_percent,json=recent100WinPercent,proto3,oneof" json:"recent_100_win_percent"`
	InviteCode           *string  `protobuf:"bytes,14,opt,name=invite_code,json=inviteCode,proto3,oneof" json:"invite_code"`
	InviterId            *uint64  `protobuf:"varint,15,opt,name=inviter_id,json=inviterId,proto3,oneof" json:"inviter_id"`
	InvitedCode          *string  `protobuf:"bytes,16,opt,name=invited_code,json=invitedCode,proto3,oneof" json:"invited_code"`
}

func (x *ListPlayerReq) Reset() {
	*x = ListPlayerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlayerReq) ProtoMessage() {}

func (x *ListPlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlayerReq.ProtoReflect.Descriptor instead.
func (*ListPlayerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{60}
}

func (x *ListPlayerReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPlayerReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPlayerReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *ListPlayerReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ListPlayerReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListPlayerReq) GetLamp() float32 {
	if x != nil && x.Lamp != nil {
		return *x.Lamp
	}
	return 0
}

func (x *ListPlayerReq) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *ListPlayerReq) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *ListPlayerReq) GetInvitedNum() uint32 {
	if x != nil && x.InvitedNum != nil {
		return *x.InvitedNum
	}
	return 0
}

func (x *ListPlayerReq) GetTotalIncome() float64 {
	if x != nil && x.TotalIncome != nil {
		return *x.TotalIncome
	}
	return 0
}

func (x *ListPlayerReq) GetProfitAndLoss() float32 {
	if x != nil && x.ProfitAndLoss != nil {
		return *x.ProfitAndLoss
	}
	return 0
}

func (x *ListPlayerReq) GetRecent_100WinPercent() float32 {
	if x != nil && x.Recent_100WinPercent != nil {
		return *x.Recent_100WinPercent
	}
	return 0
}

func (x *ListPlayerReq) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

func (x *ListPlayerReq) GetInviterId() uint64 {
	if x != nil && x.InviterId != nil {
		return *x.InviterId
	}
	return 0
}

func (x *ListPlayerReq) GetInvitedCode() string {
	if x != nil && x.InvitedCode != nil {
		return *x.InvitedCode
	}
	return ""
}

type ListPlayerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64        `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Data  []*PlayerInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *ListPlayerResp) Reset() {
	*x = ListPlayerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlayerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlayerResp) ProtoMessage() {}

func (x *ListPlayerResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlayerResp.ProtoReflect.Descriptor instead.
func (*ListPlayerResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{61}
}

func (x *ListPlayerResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListPlayerResp) GetData() []*PlayerInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page             uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	PageSize         uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	ToId             *uint64 `protobuf:"varint,3,opt,name=to_id,json=toId,proto3,oneof" json:"to_id"`
	Status           *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	ContributorLevel *uint32 `protobuf:"varint,5,opt,name=contributor_level,json=contributorLevel,proto3,oneof" json:"contributor_level"`
}

func (x *ListRewardReq) Reset() {
	*x = ListRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardReq) ProtoMessage() {}

func (x *ListRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardReq.ProtoReflect.Descriptor instead.
func (*ListRewardReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{62}
}

func (x *ListRewardReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRewardReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRewardReq) GetToId() uint64 {
	if x != nil && x.ToId != nil {
		return *x.ToId
	}
	return 0
}

func (x *ListRewardReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ListRewardReq) GetContributorLevel() uint32 {
	if x != nil && x.ContributorLevel != nil {
		return *x.ContributorLevel
	}
	return 0
}

type ListRewardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64        `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Data  []*RewardInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *ListRewardResp) Reset() {
	*x = ListRewardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardResp) ProtoMessage() {}

func (x *ListRewardResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardResp.ProtoReflect.Descriptor instead.
func (*ListRewardResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{63}
}

func (x *ListRewardResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRewardResp) GetData() []*RewardInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type MinWithdrawNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinWithdrawNum float32 `protobuf:"fixed32,1,opt,name=minWithdrawNum,proto3" json:"minWithdrawNum"`
}

func (x *MinWithdrawNumResp) Reset() {
	*x = MinWithdrawNumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinWithdrawNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinWithdrawNumResp) ProtoMessage() {}

func (x *MinWithdrawNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinWithdrawNumResp.ProtoReflect.Descriptor instead.
func (*MinWithdrawNumResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{64}
}

func (x *MinWithdrawNumResp) GetMinWithdrawNum() float32 {
	if x != nil {
		return x.MinWithdrawNum
	}
	return 0
}

type OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CreatedAt     int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt     int64   `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Status        uint32  `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	Type          string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`
	Code          string  `protobuf:"bytes,6,opt,name=code,proto3" json:"code"`
	Num           float64 `protobuf:"fixed64,7,opt,name=num,proto3" json:"num"`
	ToAddress     string  `protobuf:"bytes,8,opt,name=to_address,json=toAddress,proto3" json:"to_address"`
	FromAddress   string  `protobuf:"bytes,9,opt,name=from_address,json=fromAddress,proto3" json:"from_address"`
	TransactionId string  `protobuf:"bytes,10,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id"`
	PlayerId      uint64  `protobuf:"varint,11,opt,name=player_id,json=playerId,proto3" json:"player_id"`
	HandlingFee   float64 `protobuf:"fixed64,12,opt,name=handling_fee,json=handlingFee,proto3" json:"handling_fee"`
	Network       string  `protobuf:"bytes,13,opt,name=network,proto3" json:"network"`
	Remark        string  `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark"`
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{65}
}

func (x *OrderInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OrderInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *OrderInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OrderInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OrderInfo) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *OrderInfo) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *OrderInfo) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *OrderInfo) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *OrderInfo) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *OrderInfo) GetHandlingFee() float64 {
	if x != nil {
		return x.HandlingFee
	}
	return 0
}

func (x *OrderInfo) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *OrderInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type PageInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	PageSize uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
}

func (x *PageInfoReq) Reset() {
	*x = PageInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfoReq) ProtoMessage() {}

func (x *PageInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfoReq.ProtoReflect.Descriptor instead.
func (*PageInfoReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{66}
}

func (x *PageInfoReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfoReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CreatedAt            int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            int64   `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Status               uint32  `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	Name                 string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Lamp                 float32 `protobuf:"fixed32,6,opt,name=lamp,proto3" json:"lamp"`
	Rank                 uint32  `protobuf:"varint,7,opt,name=rank,proto3" json:"rank"`
	Amount               float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount"`
	InvitedNum           uint32  `protobuf:"varint,10,opt,name=invited_num,json=invitedNum,proto3" json:"invited_num"`
	TotalIncome          float64 `protobuf:"fixed64,11,opt,name=total_income,json=totalIncome,proto3" json:"total_income"`
	ProfitAndLoss        float32 `protobuf:"fixed32,12,opt,name=profit_and_loss,json=profitAndLoss,proto3" json:"profit_and_loss"`
	Recent_100WinPercent float32 `protobuf:"fixed32,13,opt,name=recent_100_win_percent,json=recent100WinPercent,proto3" json:"recent_100_win_percent"`
	InviteCode           string  `protobuf:"bytes,14,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code"`
	InviterId            uint64  `protobuf:"varint,15,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id"`
	InvitedCode          string  `protobuf:"bytes,16,opt,name=invited_code,json=invitedCode,proto3" json:"invited_code"`
	SystemCommission     float32 `protobuf:"fixed32,17,opt,name=system_commission,json=systemCommission,proto3" json:"system_commission"`
	Email                string  `protobuf:"bytes,18,opt,name=email,proto3" json:"email"`
	Password             string  `protobuf:"bytes,19,opt,name=password,proto3" json:"password"`
	TransactionPassword  string  `protobuf:"bytes,20,opt,name=transaction_password,json=transactionPassword,proto3" json:"transaction_password"`
	DepositAddress       string  `protobuf:"bytes,21,opt,name=deposit_address,json=depositAddress,proto3" json:"deposit_address"`
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{67}
}

func (x *PlayerInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlayerInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PlayerInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PlayerInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerInfo) GetLamp() float32 {
	if x != nil {
		return x.Lamp
	}
	return 0
}

func (x *PlayerInfo) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PlayerInfo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PlayerInfo) GetInvitedNum() uint32 {
	if x != nil {
		return x.InvitedNum
	}
	return 0
}

func (x *PlayerInfo) GetTotalIncome() float64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *PlayerInfo) GetProfitAndLoss() float32 {
	if x != nil {
		return x.ProfitAndLoss
	}
	return 0
}

func (x *PlayerInfo) GetRecent_100WinPercent() float32 {
	if x != nil {
		return x.Recent_100WinPercent
	}
	return 0
}

func (x *PlayerInfo) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

func (x *PlayerInfo) GetInviterId() uint64 {
	if x != nil {
		return x.InviterId
	}
	return 0
}

func (x *PlayerInfo) GetInvitedCode() string {
	if x != nil {
		return x.InvitedCode
	}
	return ""
}

func (x *PlayerInfo) GetSystemCommission() float32 {
	if x != nil {
		return x.SystemCommission
	}
	return 0
}

func (x *PlayerInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PlayerInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PlayerInfo) GetTransactionPassword() string {
	if x != nil {
		return x.TransactionPassword
	}
	return ""
}

func (x *PlayerInfo) GetDepositAddress() string {
	if x != nil {
		return x.DepositAddress
	}
	return ""
}

type RewardAggregateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToId     uint64 `protobuf:"varint,1,opt,name=to_id,json=toId,proto3" json:"to_id"`
	GetTotal bool   `protobuf:"varint,2,opt,name=get_total,json=getTotal,proto3" json:"get_total"`
	GetToday bool   `protobuf:"varint,3,opt,name=get_today,json=getToday,proto3" json:"get_today"`
}

func (x *RewardAggregateReq) Reset() {
	*x = RewardAggregateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardAggregateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardAggregateReq) ProtoMessage() {}

func (x *RewardAggregateReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardAggregateReq.ProtoReflect.Descriptor instead.
func (*RewardAggregateReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{68}
}

func (x *RewardAggregateReq) GetToId() uint64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *RewardAggregateReq) GetGetTotal() bool {
	if x != nil {
		return x.GetTotal
	}
	return false
}

func (x *RewardAggregateReq) GetGetToday() bool {
	if x != nil {
		return x.GetToday
	}
	return false
}

type RewardAggregateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total *float64 `protobuf:"fixed64,1,opt,name=total,proto3,oneof" json:"total"`
	Today *float64 `protobuf:"fixed64,2,opt,name=today,proto3,oneof" json:"today"`
}

func (x *RewardAggregateResp) Reset() {
	*x = RewardAggregateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardAggregateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardAggregateResp) ProtoMessage() {}

func (x *RewardAggregateResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardAggregateResp.ProtoReflect.Descriptor instead.
func (*RewardAggregateResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{69}
}

func (x *RewardAggregateResp) GetTotal() float64 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *RewardAggregateResp) GetToday() float64 {
	if x != nil && x.Today != nil {
		return *x.Today
	}
	return 0
}

type RewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CreatedAt        int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt        int64   `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Status           uint32  `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	ContributorId    uint64  `protobuf:"varint,5,opt,name=contributor_id,json=contributorId,proto3" json:"contributor_id"`
	ContributorEmail string  `protobuf:"bytes,6,opt,name=contributor_email,json=contributorEmail,proto3" json:"contributor_email"`
	ContributorLevel uint32  `protobuf:"varint,7,opt,name=contributor_level,json=contributorLevel,proto3" json:"contributor_level"`
	Num              float32 `protobuf:"fixed32,8,opt,name=num,proto3" json:"num"`
	Remark           string  `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark"`
	ToId             uint64  `protobuf:"varint,10,opt,name=to_id,json=toId,proto3" json:"to_id"`
}

func (x *RewardInfo) Reset() {
	*x = RewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfo) ProtoMessage() {}

func (x *RewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfo.ProtoReflect.Descriptor instead.
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{70}
}

func (x *RewardInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RewardInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RewardInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RewardInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RewardInfo) GetContributorId() uint64 {
	if x != nil {
		return x.ContributorId
	}
	return 0
}

func (x *RewardInfo) GetContributorEmail() string {
	if x != nil {
		return x.ContributorEmail
	}
	return ""
}

func (x *RewardInfo) GetContributorLevel() uint32 {
	if x != nil {
		return x.ContributorLevel
	}
	return 0
}

func (x *RewardInfo) GetNum() float32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RewardInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RewardInfo) GetToId() uint64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

type RobotLampNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min"`
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max"`
}

func (x *RobotLampNumResp) Reset() {
	*x = RobotLampNumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotLampNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotLampNumResp) ProtoMessage() {}

func (x *RobotLampNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotLampNumResp.ProtoReflect.Descriptor instead.
func (*RobotLampNumResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{71}
}

func (x *RobotLampNumResp) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RobotLampNumResp) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type RobotNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min"`
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max"`
}

func (x *RobotNumResp) Reset() {
	*x = RobotNumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotNumResp) ProtoMessage() {}

func (x *RobotNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotNumResp.ProtoReflect.Descriptor instead.
func (*RobotNumResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{72}
}

func (x *RobotNumResp) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RobotNumResp) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// ROUND
type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CreatedAt       int64       `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt       int64       `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Status          uint32      `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	StartAt         int64       `protobuf:"varint,5,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	OpenAt          int64       `protobuf:"varint,6,opt,name=open_at,json=openAt,proto3" json:"open_at"`
	EndAt           int64       `protobuf:"varint,7,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	SelectedFold    uint32      `protobuf:"varint,8,opt,name=selected_fold,json=selectedFold,proto3" json:"selected_fold"`
	Folds           []*FoldInfo `protobuf:"bytes,9,rep,name=folds,proto3" json:"folds"`
	RoundCount      uint32      `protobuf:"varint,10,opt,name=round_count,json=roundCount,proto3" json:"round_count"`
	TotalRoundCount uint64      `protobuf:"varint,11,opt,name=total_round_count,json=totalRoundCount,proto3" json:"total_round_count"`
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{73}
}

func (x *RoundInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoundInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RoundInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RoundInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RoundInfo) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *RoundInfo) GetOpenAt() int64 {
	if x != nil {
		return x.OpenAt
	}
	return 0
}

func (x *RoundInfo) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *RoundInfo) GetSelectedFold() uint32 {
	if x != nil {
		return x.SelectedFold
	}
	return 0
}

func (x *RoundInfo) GetFolds() []*FoldInfo {
	if x != nil {
		return x.Folds
	}
	return nil
}

func (x *RoundInfo) GetRoundCount() uint32 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *RoundInfo) GetTotalRoundCount() uint64 {
	if x != nil {
		return x.TotalRoundCount
	}
	return 0
}

type UUIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *UUIDReq) Reset() {
	*x = UUIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDReq) ProtoMessage() {}

func (x *UUIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDReq.ProtoReflect.Descriptor instead.
func (*UUIDReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{74}
}

func (x *UUIDReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UUIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids"`
}

func (x *UUIDsReq) Reset() {
	*x = UUIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDsReq) ProtoMessage() {}

func (x *UUIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDsReq.ProtoReflect.Descriptor instead.
func (*UUIDsReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{75}
}

func (x *UUIDsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UpdateBannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Status   *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	Endpoint *string `protobuf:"bytes,5,opt,name=endpoint,proto3,oneof" json:"endpoint"`
	Module   *string `protobuf:"bytes,6,opt,name=module,proto3,oneof" json:"module"`
	FileType *uint32 `protobuf:"varint,7,opt,name=file_type,json=fileType,proto3,oneof" json:"file_type"`
	Path     *string `protobuf:"bytes,8,opt,name=path,proto3,oneof" json:"path"`
	JumpUrl  *string `protobuf:"bytes,9,opt,name=jump_url,json=jumpUrl,proto3,oneof" json:"jump_url"`
	FileId   *string `protobuf:"bytes,10,opt,name=file_id,json=fileId,proto3,oneof" json:"file_id"`
}

func (x *UpdateBannerReq) Reset() {
	*x = UpdateBannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBannerReq) ProtoMessage() {}

func (x *UpdateBannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBannerReq.ProtoReflect.Descriptor instead.
func (*UpdateBannerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{76}
}

func (x *UpdateBannerReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBannerReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateBannerReq) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *UpdateBannerReq) GetModule() string {
	if x != nil && x.Module != nil {
		return *x.Module
	}
	return ""
}

func (x *UpdateBannerReq) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *UpdateBannerReq) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *UpdateBannerReq) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

func (x *UpdateBannerReq) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

type UpdateExchangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Status        *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	PlayerId      *uint64 `protobuf:"varint,5,opt,name=player_id,json=playerId,proto3,oneof" json:"player_id"`
	TransactionId *string `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id"`
	Type          *uint32 `protobuf:"varint,7,opt,name=type,proto3,oneof" json:"type"`
	CoinNum       *uint32 `protobuf:"varint,8,opt,name=coin_num,json=coinNum,proto3,oneof" json:"coin_num"`
	LampNum       *uint32 `protobuf:"varint,9,opt,name=lamp_num,json=lampNum,proto3,oneof" json:"lamp_num"`
}

func (x *UpdateExchangeReq) Reset() {
	*x = UpdateExchangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExchangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExchangeReq) ProtoMessage() {}

func (x *UpdateExchangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExchangeReq.ProtoReflect.Descriptor instead.
func (*UpdateExchangeReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateExchangeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateExchangeReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateExchangeReq) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *UpdateExchangeReq) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *UpdateExchangeReq) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *UpdateExchangeReq) GetCoinNum() uint32 {
	if x != nil && x.CoinNum != nil {
		return *x.CoinNum
	}
	return 0
}

func (x *UpdateExchangeReq) GetLampNum() uint32 {
	if x != nil && x.LampNum != nil {
		return *x.LampNum
	}
	return 0
}

type UpdateInvestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProfitAndLoss *float32 `protobuf:"fixed32,2,opt,name=profit_and_loss,json=profitAndLoss,proto3,oneof" json:"profit_and_loss"`
}

func (x *UpdateInvestReq) Reset() {
	*x = UpdateInvestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvestReq) ProtoMessage() {}

func (x *UpdateInvestReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvestReq.ProtoReflect.Descriptor instead.
func (*UpdateInvestReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{78}
}

func (x *UpdateInvestReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateInvestReq) GetProfitAndLoss() float32 {
	if x != nil && x.ProfitAndLoss != nil {
		return *x.ProfitAndLoss
	}
	return 0
}

type UpdateOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Status        *uint32  `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	Type          *string  `protobuf:"bytes,5,opt,name=type,proto3,oneof" json:"type"`
	Num           *float64 `protobuf:"fixed64,6,opt,name=num,proto3,oneof" json:"num"`
	ToAddress     *string  `protobuf:"bytes,8,opt,name=to_address,json=toAddress,proto3,oneof" json:"to_address"`
	FromAddress   *string  `protobuf:"bytes,9,opt,name=from_address,json=fromAddress,proto3,oneof" json:"from_address"`
	TransactionId *string  `protobuf:"bytes,10,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id"`
}

func (x *UpdateOrderReq) Reset() {
	*x = UpdateOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderReq) ProtoMessage() {}

func (x *UpdateOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderReq.ProtoReflect.Descriptor instead.
func (*UpdateOrderReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateOrderReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrderReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateOrderReq) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UpdateOrderReq) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *UpdateOrderReq) GetToAddress() string {
	if x != nil && x.ToAddress != nil {
		return *x.ToAddress
	}
	return ""
}

func (x *UpdateOrderReq) GetFromAddress() string {
	if x != nil && x.FromAddress != nil {
		return *x.FromAddress
	}
	return ""
}

func (x *UpdateOrderReq) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

type UpdatePlayerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Email                *string  `protobuf:"bytes,2,opt,name=email,proto3,oneof" json:"email"`
	Password             *string  `protobuf:"bytes,3,opt,name=password,proto3,oneof" json:"password"`
	Status               *uint32  `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	Name                 *string  `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name"`
	Lamp                 *float32 `protobuf:"fixed32,6,opt,name=lamp,proto3,oneof" json:"lamp"`
	Rank                 *uint32  `protobuf:"varint,7,opt,name=rank,proto3,oneof" json:"rank"`
	Amount               *float64 `protobuf:"fixed64,8,opt,name=amount,proto3,oneof" json:"amount"`
	InvitedNum           *uint32  `protobuf:"varint,10,opt,name=invited_num,json=invitedNum,proto3,oneof" json:"invited_num"`
	TotalIncome          *float64 `protobuf:"fixed64,11,opt,name=total_income,json=totalIncome,proto3,oneof" json:"total_income"`
	ProfitAndLoss        *float32 `protobuf:"fixed32,12,opt,name=profit_and_loss,json=profitAndLoss,proto3,oneof" json:"profit_and_loss"`
	Recent_100WinPercent *float32 `protobuf:"fixed32,13,opt,name=recent_100_win_percent,json=recent100WinPercent,proto3,oneof" json:"recent_100_win_percent"`
	InviteCode           *string  `protobuf:"bytes,14,opt,name=invite_code,json=inviteCode,proto3,oneof" json:"invite_code"`
	InvitedCode          *string  `protobuf:"bytes,15,opt,name=invited_code,json=invitedCode,proto3,oneof" json:"invited_code"`
	SystemCommission     *float32 `protobuf:"fixed32,16,opt,name=system_commission,json=systemCommission,proto3,oneof" json:"system_commission"`
	TransactionPassword  *string  `protobuf:"bytes,17,opt,name=transaction_password,json=transactionPassword,proto3,oneof" json:"transaction_password"`
}

func (x *UpdatePlayerReq) Reset() {
	*x = UpdatePlayerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlayerReq) ProtoMessage() {}

func (x *UpdatePlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlayerReq.ProtoReflect.Descriptor instead.
func (*UpdatePlayerReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{80}
}

func (x *UpdatePlayerReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePlayerReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UpdatePlayerReq) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *UpdatePlayerReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdatePlayerReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePlayerReq) GetLamp() float32 {
	if x != nil && x.Lamp != nil {
		return *x.Lamp
	}
	return 0
}

func (x *UpdatePlayerReq) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *UpdatePlayerReq) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *UpdatePlayerReq) GetInvitedNum() uint32 {
	if x != nil && x.InvitedNum != nil {
		return *x.InvitedNum
	}
	return 0
}

func (x *UpdatePlayerReq) GetTotalIncome() float64 {
	if x != nil && x.TotalIncome != nil {
		return *x.TotalIncome
	}
	return 0
}

func (x *UpdatePlayerReq) GetProfitAndLoss() float32 {
	if x != nil && x.ProfitAndLoss != nil {
		return *x.ProfitAndLoss
	}
	return 0
}

func (x *UpdatePlayerReq) GetRecent_100WinPercent() float32 {
	if x != nil && x.Recent_100WinPercent != nil {
		return *x.Recent_100WinPercent
	}
	return 0
}

func (x *UpdatePlayerReq) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

func (x *UpdatePlayerReq) GetInvitedCode() string {
	if x != nil && x.InvitedCode != nil {
		return *x.InvitedCode
	}
	return ""
}

func (x *UpdatePlayerReq) GetSystemCommission() float32 {
	if x != nil && x.SystemCommission != nil {
		return *x.SystemCommission
	}
	return 0
}

func (x *UpdatePlayerReq) GetTransactionPassword() string {
	if x != nil && x.TransactionPassword != nil {
		return *x.TransactionPassword
	}
	return ""
}

type UpdateRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Status           *uint32  `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	ContributorId    *uint64  `protobuf:"varint,5,opt,name=contributor_id,json=contributorId,proto3,oneof" json:"contributor_id"`
	ContributorEmail *string  `protobuf:"bytes,6,opt,name=contributor_email,json=contributorEmail,proto3,oneof" json:"contributor_email"`
	ContributorLevel *uint32  `protobuf:"varint,7,opt,name=contributor_level,json=contributorLevel,proto3,oneof" json:"contributor_level"`
	Num              *float32 `protobuf:"fixed32,8,opt,name=num,proto3,oneof" json:"num"`
	Remark           *string  `protobuf:"bytes,9,opt,name=remark,proto3,oneof" json:"remark"`
	ToId             *uint64  `protobuf:"varint,10,opt,name=to_id,json=toId,proto3,oneof" json:"to_id"`
}

func (x *UpdateRewardReq) Reset() {
	*x = UpdateRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRewardReq) ProtoMessage() {}

func (x *UpdateRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRewardReq.ProtoReflect.Descriptor instead.
func (*UpdateRewardReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateRewardReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRewardReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateRewardReq) GetContributorId() uint64 {
	if x != nil && x.ContributorId != nil {
		return *x.ContributorId
	}
	return 0
}

func (x *UpdateRewardReq) GetContributorEmail() string {
	if x != nil && x.ContributorEmail != nil {
		return *x.ContributorEmail
	}
	return ""
}

func (x *UpdateRewardReq) GetContributorLevel() uint32 {
	if x != nil && x.ContributorLevel != nil {
		return *x.ContributorLevel
	}
	return 0
}

func (x *UpdateRewardReq) GetNum() float32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *UpdateRewardReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *UpdateRewardReq) GetToId() uint64 {
	if x != nil && x.ToId != nil {
		return *x.ToId
	}
	return 0
}

type UpdateSettingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module     string `protobuf:"bytes,1,opt,name=module,proto3" json:"module"`
	JsonString string `protobuf:"bytes,2,opt,name=jsonString,proto3" json:"jsonString"`
}

func (x *UpdateSettingReq) Reset() {
	*x = UpdateSettingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingReq) ProtoMessage() {}

func (x *UpdateSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingReq.ProtoReflect.Descriptor instead.
func (*UpdateSettingReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateSettingReq) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *UpdateSettingReq) GetJsonString() string {
	if x != nil {
		return x.JsonString
	}
	return ""
}

type WithdrawCommissionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawCommission float32 `protobuf:"fixed32,1,opt,name=withdrawCommission,proto3" json:"withdrawCommission"`
}

func (x *WithdrawCommissionResp) Reset() {
	*x = WithdrawCommissionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawCommissionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawCommissionResp) ProtoMessage() {}

func (x *WithdrawCommissionResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawCommissionResp.ProtoReflect.Descriptor instead.
func (*WithdrawCommissionResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{83}
}

func (x *WithdrawCommissionResp) GetWithdrawCommission() float32 {
	if x != nil {
		return x.WithdrawCommission
	}
	return 0
}

type WithdrawThresholdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawThreshold float32 `protobuf:"fixed32,1,opt,name=withdrawThreshold,proto3" json:"withdrawThreshold"`
}

func (x *WithdrawThresholdResp) Reset() {
	*x = WithdrawThresholdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawThresholdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawThresholdResp) ProtoMessage() {}

func (x *WithdrawThresholdResp) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawThresholdResp.ProtoReflect.Descriptor instead.
func (*WithdrawThresholdResp) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{84}
}

func (x *WithdrawThresholdResp) GetWithdrawThreshold() float32 {
	if x != nil {
		return x.WithdrawThreshold
	}
	return 0
}

type DealOpenGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LambFoldNo uint32 `protobuf:"varint,1,opt,name=lambFoldNo,proto3" json:"lambFoldNo"`
}

func (x *DealOpenGameReq) Reset() {
	*x = DealOpenGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolflamp_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealOpenGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealOpenGameReq) ProtoMessage() {}

func (x *DealOpenGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_wolflamp_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealOpenGameReq.ProtoReflect.Descriptor instead.
func (*DealOpenGameReq) Descriptor() ([]byte, []int) {
	return file_wolflamp_proto_rawDescGZIP(), []int{85}
}

func (x *DealOpenGameReq) GetLambFoldNo() uint32 {
	if x != nil {
		return x.LambFoldNo
	}
	return 0
}

var File_wolflamp_proto protoreflect.FileDescriptor

var file_wolflamp_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x33, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x33, 0x0a, 0x0f,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x2e, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x34, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1c, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x30, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x4b, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f,
	0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6f, 0x6c,
	0x64, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x6d, 0x62, 0x4e, 0x75, 0x6d, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41,
	0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x22, 0xea, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xa0,
	0x03, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6c, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x57, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x22, 0x5b, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x21, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x6d, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x0d,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a,
	0x0f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x22, 0x4e, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x22, 0x1f, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x43, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x0f,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x9c, 0x02, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f,
	0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6f, 0x6c,
	0x64, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x6d, 0x62, 0x4e, 0x75, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0x3e,
	0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x25,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x22, 0x4f,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c,
	0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x1c, 0x0a, 0x0a, 0x49, 0x44, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a,
	0x0a, 0x49, 0x44, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x05, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x0b, 0x49, 0x44, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x0b, 0x49, 0x44, 0x73, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x0b, 0x49, 0x44, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x20, 0x0a, 0x0c, 0x49, 0x44, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x0c, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x91, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66,
	0x6f, 0x6c, 0x64, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x6d, 0x62, 0x4e, 0x75, 0x6d,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x4c, 0x61, 0x6d, 0x62, 0x46, 0x6f, 0x6c, 0x64,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0c, 0x6c, 0x61, 0x6d, 0x62, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x6d, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x4e, 0x6f, 0x12,
	0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61,
	0x76, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0xbd, 0x02,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x50, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd3, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd6, 0x02, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x64, 0x4d,
	0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6d, 0x61, 0x78, 0x22, 0x4c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c,
	0x61, 0x6d, 0x70, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xe6, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x05, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6c, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52,
	0x04, 0x6c, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41,
	0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x57, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0b, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x31, 0x30, 0x30, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x50, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d,
	0x70, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xd4, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x50, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x12, 0x4d,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x22, 0x86, 0x03, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0x3e, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x85, 0x05, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x31,
	0x30, 0x30, 0x57, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x31,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x63, 0x0a, 0x12, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x22,
	0x5f, 0x0a, 0x13, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79,
	0x22, 0xb2, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x6f, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x10, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x61,
	0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x32, 0x0a,
	0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x22, 0xd8, 0x02, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x19, 0x0a, 0x07,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x08, 0x55, 0x55, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x75, 0x6d, 0x70,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0xb6, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x07,
	0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x61,
	0x6d, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x07,
	0x6c, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x22, 0x62, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41,
	0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x22, 0xb4, 0x02,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75,
	0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x22, 0xb7, 0x06, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x04, 0x6c, 0x61, 0x6d, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x31,
	0x30, 0x30, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x31, 0x30,
	0x30, 0x57, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0d, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x31,
	0x30, 0x30, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x83,
	0x03, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x06, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x6f, 0x5f, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x48, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x15, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0x31, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x6d, 0x62, 0x46, 0x6f, 0x6c, 0x64,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x6d, 0x62, 0x46, 0x6f,
	0x6c, 0x64, 0x4e, 0x6f, 0x32, 0xbc, 0x18, 0x0a, 0x08, 0x57, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d,
	0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77,
	0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f,
	0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c,
	0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x77, 0x6f, 0x6c, 0x66,
	0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d,
	0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b,
	0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f,
	0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d,
	0x70, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66,
	0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x37, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x77,
	0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c,
	0x61, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e,
	0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x12, 0x15,
	0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x06, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61,
	0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x77, 0x6f, 0x6c, 0x66,
	0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5d, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c,
	0x61, 0x6d, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x77, 0x6f,
	0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x62, 0x46, 0x6f,
	0x6c, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3f, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c,
	0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x18, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66,
	0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18,
	0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c,
	0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e,
	0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61,
	0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a,
	0x09, 0x66, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x77, 0x6f, 0x6c,
	0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x77,
	0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x12, 0x21, 0x2e,
	0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d,
	0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x77, 0x6f,
	0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77,
	0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66,
	0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6c,
	0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x77, 0x6f,
	0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d,
	0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a,
	0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x77, 0x6f, 0x6c,
	0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61,
	0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e,
	0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x77, 0x6f,
	0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x77, 0x6f,
	0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61,
	0x6d, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x77,
	0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d,
	0x70, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x48, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x6c, 0x66,
	0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x77, 0x6f, 0x6c,
	0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d,
	0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x4d, 0x69, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4a, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c,
	0x61, 0x6d, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x77, 0x6f, 0x6c, 0x66,
	0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x6c,
	0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x77, 0x6f,
	0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4c,
	0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d,
	0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61,
	0x6d, 0x70, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x6c,
	0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x77, 0x6f,
	0x6c, 0x66, 0x6c, 0x61, 0x6d, 0x70, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x77, 0x6f, 0x6c, 0x66, 0x6c, 0x61, 0x6d,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wolflamp_proto_rawDescOnce sync.Once
	file_wolflamp_proto_rawDescData = file_wolflamp_proto_rawDesc
)

func file_wolflamp_proto_rawDescGZIP() []byte {
	file_wolflamp_proto_rawDescOnce.Do(func() {
		file_wolflamp_proto_rawDescData = protoimpl.X.CompressGZIP(file_wolflamp_proto_rawDescData)
	})
	return file_wolflamp_proto_rawDescData
}

var file_wolflamp_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_wolflamp_proto_goTypes = []interface{}{
	(*BannerInfo)(nil),                  // 0: wolflamp.BannerInfo
	(*BaseIDInt32Resp)(nil),             // 1: wolflamp.BaseIDInt32Resp
	(*BaseIDInt64Resp)(nil),             // 2: wolflamp.BaseIDInt64Resp
	(*BaseIDResp)(nil),                  // 3: wolflamp.BaseIDResp
	(*BaseIDUint32Resp)(nil),            // 4: wolflamp.BaseIDUint32Resp
	(*BaseResp)(nil),                    // 5: wolflamp.BaseResp
	(*BaseUUIDResp)(nil),                // 6: wolflamp.BaseUUIDResp
	(*CalculateWithdrawFeeReq)(nil),     // 7: wolflamp.CalculateWithdrawFeeReq
	(*CalculateWithdrawFeeResp)(nil),    // 8: wolflamp.CalculateWithdrawFeeResp
	(*CreateBannerReq)(nil),             // 9: wolflamp.CreateBannerReq
	(*CreateExchangeReq)(nil),           // 10: wolflamp.CreateExchangeReq
	(*CreateInvestReq)(nil),             // 11: wolflamp.CreateInvestReq
	(*CreateOrderReq)(nil),              // 12: wolflamp.CreateOrderReq
	(*CreatePlayerReq)(nil),             // 13: wolflamp.CreatePlayerReq
	(*CreateRewardReq)(nil),             // 14: wolflamp.CreateRewardReq
	(*CreateRoundReq)(nil),              // 15: wolflamp.CreateRoundReq
	(*DeleteBannerReq)(nil),             // 16: wolflamp.DeleteBannerReq
	(*DeleteExchangeReq)(nil),           // 17: wolflamp.DeleteExchangeReq
	(*DeleteOrderReq)(nil),              // 18: wolflamp.DeleteOrderReq
	(*DeletePlayerReq)(nil),             // 19: wolflamp.DeletePlayerReq
	(*DeleteRewardReq)(nil),             // 20: wolflamp.DeleteRewardReq
	(*Empty)(nil),                       // 21: wolflamp.Empty
	(*ExchangeInfo)(nil),                // 22: wolflamp.ExchangeInfo
	(*ExchangeReq)(nil),                 // 23: wolflamp.ExchangeReq
	(*FileInfo)(nil),                    // 24: wolflamp.FileInfo
	(*FindBannerReq)(nil),               // 25: wolflamp.FindBannerReq
	(*FindExchangeReq)(nil),             // 26: wolflamp.FindExchangeReq
	(*FindOrderReq)(nil),                // 27: wolflamp.FindOrderReq
	(*FindPlayerReq)(nil),               // 28: wolflamp.FindPlayerReq
	(*FindRewardReq)(nil),               // 29: wolflamp.FindRewardReq
	(*FindRoundReq)(nil),                // 30: wolflamp.FindRoundReq
	(*FindSettingReq)(nil),              // 31: wolflamp.FindSettingReq
	(*FindSettingResp)(nil),             // 32: wolflamp.FindSettingResp
	(*FoldInfo)(nil),                    // 33: wolflamp.FoldInfo
	(*GameRuleResp)(nil),                // 34: wolflamp.GameRuleResp
	(*GetByEmailReq)(nil),               // 35: wolflamp.GetByEmailReq
	(*GetByInviteCodeReq)(nil),          // 36: wolflamp.GetByInviteCodeReq
	(*GetInvestInfoByPlayerIdReq)(nil),  // 37: wolflamp.GetInvestInfoByPlayerIdReq
	(*GetInvestInfoByPlayerIdResp)(nil), // 38: wolflamp.GetInvestInfoByPlayerIdResp
	(*GetLambFoldAggregateReq)(nil),     // 39: wolflamp.GetLambFoldAggregateReq
	(*GetLambFoldAggregateResp)(nil),    // 40: wolflamp.GetLambFoldAggregateResp
	(*IDInt32Req)(nil),                  // 41: wolflamp.IDInt32Req
	(*IDInt64Req)(nil),                  // 42: wolflamp.IDInt64Req
	(*IDReq)(nil),                       // 43: wolflamp.IDReq
	(*IDUint32Req)(nil),                 // 44: wolflamp.IDUint32Req
	(*IDsInt32Req)(nil),                 // 45: wolflamp.IDsInt32Req
	(*IDsInt64Req)(nil),                 // 46: wolflamp.IDsInt64Req
	(*IDsReq)(nil),                      // 47: wolflamp.IDsReq
	(*IDsUint32Req)(nil),                // 48: wolflamp.IDsUint32Req
	(*IdleTimeResp)(nil),                // 49: wolflamp.IdleTimeResp
	(*InvestInfo)(nil),                  // 50: wolflamp.InvestInfo
	(*LambFoldAggregateInfo)(nil),       // 51: wolflamp.LambFoldAggregateInfo
	(*ListBannerReq)(nil),               // 52: wolflamp.ListBannerReq
	(*ListBannerResp)(nil),              // 53: wolflamp.ListBannerResp
	(*ListExchangeReq)(nil),             // 54: wolflamp.ListExchangeReq
	(*ListExchangeResp)(nil),            // 55: wolflamp.ListExchangeResp
	(*ListFoldReq)(nil),                 // 56: wolflamp.ListFoldReq
	(*ListFoldResp)(nil),                // 57: wolflamp.ListFoldResp
	(*ListOrderReq)(nil),                // 58: wolflamp.ListOrderReq
	(*ListOrderResp)(nil),               // 59: wolflamp.ListOrderResp
	(*ListPlayerReq)(nil),               // 60: wolflamp.ListPlayerReq
	(*ListPlayerResp)(nil),              // 61: wolflamp.ListPlayerResp
	(*ListRewardReq)(nil),               // 62: wolflamp.ListRewardReq
	(*ListRewardResp)(nil),              // 63: wolflamp.ListRewardResp
	(*MinWithdrawNumResp)(nil),          // 64: wolflamp.MinWithdrawNumResp
	(*OrderInfo)(nil),                   // 65: wolflamp.OrderInfo
	(*PageInfoReq)(nil),                 // 66: wolflamp.PageInfoReq
	(*PlayerInfo)(nil),                  // 67: wolflamp.PlayerInfo
	(*RewardAggregateReq)(nil),          // 68: wolflamp.RewardAggregateReq
	(*RewardAggregateResp)(nil),         // 69: wolflamp.RewardAggregateResp
	(*RewardInfo)(nil),                  // 70: wolflamp.RewardInfo
	(*RobotLampNumResp)(nil),            // 71: wolflamp.RobotLampNumResp
	(*RobotNumResp)(nil),                // 72: wolflamp.RobotNumResp
	(*RoundInfo)(nil),                   // 73: wolflamp.RoundInfo
	(*UUIDReq)(nil),                     // 74: wolflamp.UUIDReq
	(*UUIDsReq)(nil),                    // 75: wolflamp.UUIDsReq
	(*UpdateBannerReq)(nil),             // 76: wolflamp.UpdateBannerReq
	(*UpdateExchangeReq)(nil),           // 77: wolflamp.UpdateExchangeReq
	(*UpdateInvestReq)(nil),             // 78: wolflamp.UpdateInvestReq
	(*UpdateOrderReq)(nil),              // 79: wolflamp.UpdateOrderReq
	(*UpdatePlayerReq)(nil),             // 80: wolflamp.UpdatePlayerReq
	(*UpdateRewardReq)(nil),             // 81: wolflamp.UpdateRewardReq
	(*UpdateSettingReq)(nil),            // 82: wolflamp.UpdateSettingReq
	(*WithdrawCommissionResp)(nil),      // 83: wolflamp.WithdrawCommissionResp
	(*WithdrawThresholdResp)(nil),       // 84: wolflamp.WithdrawThresholdResp
	(*DealOpenGameReq)(nil),             // 85: wolflamp.dealOpenGameReq
}
var file_wolflamp_proto_depIdxs = []int32{
	24, // 0: wolflamp.BannerInfo.file:type_name -> wolflamp.FileInfo
	50, // 1: wolflamp.GetInvestInfoByPlayerIdResp.data:type_name -> wolflamp.InvestInfo
	51, // 2: wolflamp.GetLambFoldAggregateResp.data:type_name -> wolflamp.LambFoldAggregateInfo
	0,  // 3: wolflamp.ListBannerResp.data:type_name -> wolflamp.BannerInfo
	22, // 4: wolflamp.ListExchangeResp.data:type_name -> wolflamp.ExchangeInfo
	33, // 5: wolflamp.ListFoldResp.data:type_name -> wolflamp.FoldInfo
	65, // 6: wolflamp.ListOrderResp.data:type_name -> wolflamp.OrderInfo
	67, // 7: wolflamp.ListPlayerResp.data:type_name -> wolflamp.PlayerInfo
	70, // 8: wolflamp.ListRewardResp.data:type_name -> wolflamp.RewardInfo
	33, // 9: wolflamp.RoundInfo.folds:type_name -> wolflamp.FoldInfo
	9,  // 10: wolflamp.Wolflamp.createBanner:input_type -> wolflamp.CreateBannerReq
	76, // 11: wolflamp.Wolflamp.updateBanner:input_type -> wolflamp.UpdateBannerReq
	16, // 12: wolflamp.Wolflamp.deleteBanner:input_type -> wolflamp.DeleteBannerReq
	25, // 13: wolflamp.Wolflamp.findBanner:input_type -> wolflamp.FindBannerReq
	52, // 14: wolflamp.Wolflamp.listBanner:input_type -> wolflamp.ListBannerReq
	21, // 15: wolflamp.Wolflamp.initDatabase:input_type -> wolflamp.Empty
	10, // 16: wolflamp.Wolflamp.createExchange:input_type -> wolflamp.CreateExchangeReq
	77, // 17: wolflamp.Wolflamp.updateExchange:input_type -> wolflamp.UpdateExchangeReq
	17, // 18: wolflamp.Wolflamp.deleteExchange:input_type -> wolflamp.DeleteExchangeReq
	26, // 19: wolflamp.Wolflamp.findExchange:input_type -> wolflamp.FindExchangeReq
	54, // 20: wolflamp.Wolflamp.listExchange:input_type -> wolflamp.ListExchangeReq
	23, // 21: wolflamp.Wolflamp.exchange:input_type -> wolflamp.ExchangeReq
	15, // 22: wolflamp.Wolflamp.createRound:input_type -> wolflamp.CreateRoundReq
	30, // 23: wolflamp.Wolflamp.findRound:input_type -> wolflamp.FindRoundReq
	56, // 24: wolflamp.Wolflamp.listFold:input_type -> wolflamp.ListFoldReq
	11, // 25: wolflamp.Wolflamp.invest:input_type -> wolflamp.CreateInvestReq
	37, // 26: wolflamp.Wolflamp.getInvestInfoByPlayerId:input_type -> wolflamp.GetInvestInfoByPlayerIdReq
	39, // 27: wolflamp.Wolflamp.getLambFoldAggregate:input_type -> wolflamp.GetLambFoldAggregateReq
	85, // 28: wolflamp.Wolflamp.dealOpenGame:input_type -> wolflamp.dealOpenGameReq
	12, // 29: wolflamp.Wolflamp.createOrder:input_type -> wolflamp.CreateOrderReq
	79, // 30: wolflamp.Wolflamp.updateOrder:input_type -> wolflamp.UpdateOrderReq
	18, // 31: wolflamp.Wolflamp.deleteOrder:input_type -> wolflamp.DeleteOrderReq
	27, // 32: wolflamp.Wolflamp.findOrder:input_type -> wolflamp.FindOrderReq
	58, // 33: wolflamp.Wolflamp.listOrder:input_type -> wolflamp.ListOrderReq
	7,  // 34: wolflamp.Wolflamp.calculateWithdrawFee:input_type -> wolflamp.CalculateWithdrawFeeReq
	13, // 35: wolflamp.Wolflamp.createPlayer:input_type -> wolflamp.CreatePlayerReq
	80, // 36: wolflamp.Wolflamp.updatePlayer:input_type -> wolflamp.UpdatePlayerReq
	19, // 37: wolflamp.Wolflamp.deletePlayer:input_type -> wolflamp.DeletePlayerReq
	28, // 38: wolflamp.Wolflamp.findPlayer:input_type -> wolflamp.FindPlayerReq
	60, // 39: wolflamp.Wolflamp.listPlayer:input_type -> wolflamp.ListPlayerReq
	35, // 40: wolflamp.Wolflamp.getByEmail:input_type -> wolflamp.GetByEmailReq
	36, // 41: wolflamp.Wolflamp.getByInviteCode:input_type -> wolflamp.GetByInviteCodeReq
	14, // 42: wolflamp.Wolflamp.createReward:input_type -> wolflamp.CreateRewardReq
	81, // 43: wolflamp.Wolflamp.updateReward:input_type -> wolflamp.UpdateRewardReq
	20, // 44: wolflamp.Wolflamp.deleteReward:input_type -> wolflamp.DeleteRewardReq
	29, // 45: wolflamp.Wolflamp.findReward:input_type -> wolflamp.FindRewardReq
	62, // 46: wolflamp.Wolflamp.listReward:input_type -> wolflamp.ListRewardReq
	68, // 47: wolflamp.Wolflamp.rewardAggregate:input_type -> wolflamp.RewardAggregateReq
	82, // 48: wolflamp.Wolflamp.updateSetting:input_type -> wolflamp.UpdateSettingReq
	31, // 49: wolflamp.Wolflamp.findSetting:input_type -> wolflamp.FindSettingReq
	21, // 50: wolflamp.Wolflamp.getWithdrawThreshold:input_type -> wolflamp.Empty
	21, // 51: wolflamp.Wolflamp.getMinWithdrawNum:input_type -> wolflamp.Empty
	21, // 52: wolflamp.Wolflamp.getWithdrawCommission:input_type -> wolflamp.Empty
	21, // 53: wolflamp.Wolflamp.getIdleTime:input_type -> wolflamp.Empty
	21, // 54: wolflamp.Wolflamp.getRobotLampNum:input_type -> wolflamp.Empty
	21, // 55: wolflamp.Wolflamp.getGameRule:input_type -> wolflamp.Empty
	21, // 56: wolflamp.Wolflamp.getRobotNum:input_type -> wolflamp.Empty
	3,  // 57: wolflamp.Wolflamp.createBanner:output_type -> wolflamp.BaseIDResp
	3,  // 58: wolflamp.Wolflamp.updateBanner:output_type -> wolflamp.BaseIDResp
	3,  // 59: wolflamp.Wolflamp.deleteBanner:output_type -> wolflamp.BaseIDResp
	0,  // 60: wolflamp.Wolflamp.findBanner:output_type -> wolflamp.BannerInfo
	53, // 61: wolflamp.Wolflamp.listBanner:output_type -> wolflamp.ListBannerResp
	5,  // 62: wolflamp.Wolflamp.initDatabase:output_type -> wolflamp.BaseResp
	3,  // 63: wolflamp.Wolflamp.createExchange:output_type -> wolflamp.BaseIDResp
	3,  // 64: wolflamp.Wolflamp.updateExchange:output_type -> wolflamp.BaseIDResp
	3,  // 65: wolflamp.Wolflamp.deleteExchange:output_type -> wolflamp.BaseIDResp
	22, // 66: wolflamp.Wolflamp.findExchange:output_type -> wolflamp.ExchangeInfo
	55, // 67: wolflamp.Wolflamp.listExchange:output_type -> wolflamp.ListExchangeResp
	3,  // 68: wolflamp.Wolflamp.exchange:output_type -> wolflamp.BaseIDResp
	3,  // 69: wolflamp.Wolflamp.createRound:output_type -> wolflamp.BaseIDResp
	73, // 70: wolflamp.Wolflamp.findRound:output_type -> wolflamp.RoundInfo
	57, // 71: wolflamp.Wolflamp.listFold:output_type -> wolflamp.ListFoldResp
	3,  // 72: wolflamp.Wolflamp.invest:output_type -> wolflamp.BaseIDResp
	38, // 73: wolflamp.Wolflamp.getInvestInfoByPlayerId:output_type -> wolflamp.GetInvestInfoByPlayerIdResp
	40, // 74: wolflamp.Wolflamp.getLambFoldAggregate:output_type -> wolflamp.GetLambFoldAggregateResp
	3,  // 75: wolflamp.Wolflamp.dealOpenGame:output_type -> wolflamp.BaseIDResp
	3,  // 76: wolflamp.Wolflamp.createOrder:output_type -> wolflamp.BaseIDResp
	3,  // 77: wolflamp.Wolflamp.updateOrder:output_type -> wolflamp.BaseIDResp
	3,  // 78: wolflamp.Wolflamp.deleteOrder:output_type -> wolflamp.BaseIDResp
	65, // 79: wolflamp.Wolflamp.findOrder:output_type -> wolflamp.OrderInfo
	59, // 80: wolflamp.Wolflamp.listOrder:output_type -> wolflamp.ListOrderResp
	8,  // 81: wolflamp.Wolflamp.calculateWithdrawFee:output_type -> wolflamp.CalculateWithdrawFeeResp
	3,  // 82: wolflamp.Wolflamp.createPlayer:output_type -> wolflamp.BaseIDResp
	3,  // 83: wolflamp.Wolflamp.updatePlayer:output_type -> wolflamp.BaseIDResp
	3,  // 84: wolflamp.Wolflamp.deletePlayer:output_type -> wolflamp.BaseIDResp
	67, // 85: wolflamp.Wolflamp.findPlayer:output_type -> wolflamp.PlayerInfo
	61, // 86: wolflamp.Wolflamp.listPlayer:output_type -> wolflamp.ListPlayerResp
	67, // 87: wolflamp.Wolflamp.getByEmail:output_type -> wolflamp.PlayerInfo
	67, // 88: wolflamp.Wolflamp.getByInviteCode:output_type -> wolflamp.PlayerInfo
	3,  // 89: wolflamp.Wolflamp.createReward:output_type -> wolflamp.BaseIDResp
	3,  // 90: wolflamp.Wolflamp.updateReward:output_type -> wolflamp.BaseIDResp
	3,  // 91: wolflamp.Wolflamp.deleteReward:output_type -> wolflamp.BaseIDResp
	70, // 92: wolflamp.Wolflamp.findReward:output_type -> wolflamp.RewardInfo
	63, // 93: wolflamp.Wolflamp.listReward:output_type -> wolflamp.ListRewardResp
	69, // 94: wolflamp.Wolflamp.rewardAggregate:output_type -> wolflamp.RewardAggregateResp
	3,  // 95: wolflamp.Wolflamp.updateSetting:output_type -> wolflamp.BaseIDResp
	32, // 96: wolflamp.Wolflamp.findSetting:output_type -> wolflamp.FindSettingResp
	84, // 97: wolflamp.Wolflamp.getWithdrawThreshold:output_type -> wolflamp.WithdrawThresholdResp
	64, // 98: wolflamp.Wolflamp.getMinWithdrawNum:output_type -> wolflamp.MinWithdrawNumResp
	83, // 99: wolflamp.Wolflamp.getWithdrawCommission:output_type -> wolflamp.WithdrawCommissionResp
	49, // 100: wolflamp.Wolflamp.getIdleTime:output_type -> wolflamp.IdleTimeResp
	71, // 101: wolflamp.Wolflamp.getRobotLampNum:output_type -> wolflamp.RobotLampNumResp
	34, // 102: wolflamp.Wolflamp.getGameRule:output_type -> wolflamp.GameRuleResp
	72, // 103: wolflamp.Wolflamp.getRobotNum:output_type -> wolflamp.RobotNumResp
	57, // [57:104] is the sub-list for method output_type
	10, // [10:57] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_wolflamp_proto_init() }
func file_wolflamp_proto_init() {
	if File_wolflamp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wolflamp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseIDInt32Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseIDInt64Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseIDUint32Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUUIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateWithdrawFeeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateWithdrawFeeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExchangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlayerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExchangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlayerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindBannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindExchangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPlayerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRoundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSettingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSettingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRuleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByInviteCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvestInfoByPlayerIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvestInfoByPlayerIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLambFoldAggregateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLambFoldAggregateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDInt32Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDInt64Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDUint32Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDsInt32Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDsInt64Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDsUint32Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdleTimeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LambFoldAggregateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBannerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExchangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExchangeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFoldReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFoldResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlayerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlayerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRewardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinWithdrawNumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardAggregateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardAggregateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotLampNumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotNumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExchangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInvestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlayerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawCommissionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawThresholdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolflamp_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealOpenGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wolflamp_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_wolflamp_proto_msgTypes[81].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wolflamp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wolflamp_proto_goTypes,
		DependencyIndexes: file_wolflamp_proto_depIdxs,
		MessageInfos:      file_wolflamp_proto_msgTypes,
	}.Build()
	File_wolflamp_proto = out.File
	file_wolflamp_proto_rawDesc = nil
	file_wolflamp_proto_goTypes = nil
	file_wolflamp_proto_depIdxs = nil
}
