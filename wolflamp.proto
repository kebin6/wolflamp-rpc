syntax = "proto3";

package wolflamp;
option go_package = "./wolflamp";

message BannerInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint32 status = 4;
  string endpoint = 5;
  string module = 6;
  uint32 file_type = 7;
  string path = 8;
  string jump_url = 9;
  FileInfo file = 11;
}

message BaseIDInt32Resp {
  int32 id = 1;
  string msg = 2;
}

message BaseIDInt64Resp {
  int64 id = 1;
  string msg = 2;
}

message BaseIDResp {
  uint64 id = 1;
  string msg = 2;
}

message BaseIDUint32Resp {
  uint32 id = 1;
  string msg = 2;
}

message BaseResp {
  string msg = 1;
}

message BaseUUIDResp {
  string id = 1;
  string msg = 2;
}

//  计算提币相关费用
message CalculateWithdrawFeeReq {
  double balance = 1;
  double amount = 2;
}

message CalculateWithdrawFeeResp {
  double handling_fee = 1;
  double received_amount = 2;
  double total_amount = 3;
}

message ChangeInvestFoldReq {
  uint64 player_id = 1;
  uint32 fold_no = 2;
  string mode = 3;
}

message CommissionResp {
  float commission = 1;
}

message CreateBannerReq {
  uint32 status = 4;
  string endpoint = 5;
  string module = 6;
  uint32 file_type = 7;
  string path = 8;
  string jump_url = 9;
  string file_id = 10;
}

message CreateExchangeReq {
  uint64 player_id = 5;
  string transaction_id = 6;
  uint32 type = 7;
  uint32 coin_num = 8;
  uint32 lamp_num = 9;
}

message CreateInvestReq {
  uint64 player_id = 5;
  uint32 fold_no = 7;
  uint32 lamb_num = 8;
  float profit_and_loss = 9;
  uint64 round_id = 10;
  string mode = 11;
}

message CreateOrderReq {
  uint64 player_id = 3;
  uint32 status = 4;
  string type = 5;
  double num = 6;
  string to_address = 8;
  string from_address = 9;
  double handling_fee = 10;
  string network = 11;
}

message CreatePlayerReq {
  string email = 1;
  string password = 2;
  uint32 status = 4;
  string name = 5;
  float coin_lamb = 6;
  float token_lamb = 17;
  uint32 rank = 7;
  double amount = 8;
  uint32 invited_num = 10;
  double total_income = 11;
  float profit_and_loss = 12;
  string invited_code = 14;
  float system_commission = 15;
  string deposit_address = 16;
  uint64 gcics_user_id = 18;
  string gcics_token = 19;
  string return_url = 20;
}

message CreateRewardReq {
  uint32 status = 4;
  uint64 contributor_id = 5;
  string contributor_email = 6;
  uint32 contributor_level = 7;
  float num = 8;
  string remark = 9;
  uint64 to_id = 10;
}

message CreateRoundReq {
  string mode = 2;
  int64 start_at = 5;
  int64 open_at = 6;
  int64 end_at = 7;
}

message CreateStatementReq {
  uint32 status = 4;
  uint64 player_id = 5;
  uint32 module = 6;
  uint32 inout_type = 9;
  double amount = 10;
  string refer_id = 11;
  optional string remark = 12;
  optional string prefix = 13;
  string mode = 14;
}

message DeleteBannerReq {
  uint64 id = 1;
}

message DeleteExchangeReq {
  uint64 id = 1;
}

message DeleteOrderReq {
  uint64 id = 1;
}

message DeletePlayerReq {
  uint64 id = 1;
}

message DeleteRewardReq {
  uint64 id = 1;
}

message DeleteStatementReq {
  uint64 id = 1;
}

//  base message
message Empty {}

message ExchangeInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint32 status = 4;
  uint64 player_id = 5;
  string transaction_id = 6;
  uint32 type = 7;
  uint32 coin_num = 8;
  uint32 lamp_num = 9;
  string mode = 10;
}

message ExchangeReq {
  string mode = 5;
  uint32 type = 1;
  uint32 coin_amount = 2;
  uint32 lamp_amount = 3;
  uint64 player_id = 4;
}

message ExchangeResp {
  uint64 id = 1;
  optional string link = 2;
}

message FileInfo {
  string id = 1;
  string name = 2;
  string path = 3;
  uint32 file_type = 4;
}

message FindBannerReq {
  uint64 id = 1;
}

message FindExchangeReq {
  uint64 id = 1;
  optional uint64 player_id = 2;
}

message FindOrderReq {
  uint64 id = 1;
  optional uint64 player_id = 2;
}

message FindPlayerReq {
  optional uint64 id = 1;
  optional uint64 gcics_user_id = 2;
}

message FindRewardReq {
  uint64 id = 1;
  optional uint64 to_id = 2;
}

message FindRoundReq {
  optional uint64 id = 1;
  string mode = 2;
}

message FindSettingReq {
  string module = 1;
}

message FindSettingResp {
  string jsonString = 2;
}

message FindStatementReq {
  uint64 id = 1;
  optional uint64 player_id = 2;
}

//  FOLD
message FoldInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint32 fold_no = 4;
  uint32 lamb_num = 5;
  uint64 round_id = 6;
  uint32 round_count = 7;
  uint64 total_round_count = 8;
  float profit_and_loss = 9;
  string mode = 10;
}

message GameCommissionResp {
  float gameCommission = 1;
}

message GameRuleResp {
  string title = 1;
  string content = 2;
}

message GetByEmailReq {
  string email = 1;
}

message GetByInviteCodeReq {
  string invite_code = 1;
}

message GetGcicsBalanceReq {
  uint64 player_id = 1;
}

message GetGcicsBalanceResp {
  double token = 1;
  double coin = 2;
}

message GetInvestByRoundIdResp {
  repeated InvestInfo data = 1;
}

message GetInvestInfoByPlayerIdReq {
  uint64 player_id = 1;
  optional uint64 round_id = 2;
  repeated uint64 round_ids = 3;
  string mode = 4;
}

message GetInvestInfoByPlayerIdResp {
  repeated InvestInfo data = 1;
}

message GetInvestsByRoundIdReq {
  uint64 round_id = 1;
  string mode = 2;
}

message GetInvitorListByIdsReq {
  repeated uint64 player_ids = 1;
}

message GetInvitorListByIdsResp {
  repeated InvitorInfo data = 1;
}

message GetLambFoldAggregateReq {
  uint64 total_round_count_min = 1;
  uint64 total_round_count_max = 2;
  string mode = 3;
}

message GetLambFoldAggregateResp {
  repeated LambFoldAggregateInfo data = 1;
}

message GetLambFoldAggregateV2Req {
  string mode = 3;
}

message GetOverviewReq {
  optional int64 start_time = 1;
  optional int64 end_time = 2;
}

message GetOverviewResp {
  OverviewInfo data = 1;
}

message GetSumReq {
  string mode = 1;
  uint32 status = 2;
  uint32 type = 3;
}

message GetSumResp {
  double amount = 1;
}

message HourTimeRangeResp {
  string startTime = 1;
  string endTime = 2;
}

message IDInt32Req {
  int32 id = 1;
}

message IDInt64Req {
  int64 id = 1;
}

message IDReq {
  uint64 id = 1;
}

message IDUint32Req {
  uint32 id = 1;
}

message IDsInt32Req {
  repeated int32 ids = 1;
}

message IDsInt64Req {
  repeated int64 ids = 1;
}

message IDsReq {
  repeated uint64 ids = 1;
}

message IDsUint32Req {
  repeated uint32 ids = 1;
}

message IdleTimeResp {
  uint32 idleTime = 1;
}

//  INVEST
message InvestInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint64 player_id = 5;
  string player_email = 6;
  uint32 fold_no = 7;
  uint32 lamb_num = 8;
  float profit_and_loss = 9;
  uint64 round_id = 10;
  string mode = 11;
}

message InvitorInfo {
  uint64 invitorId = 1;
  uint32 rank = 2;
  float system_commission = 3;
  uint64 playerId = 4;
  string playerEmail = 5;
  uint32 playerLevel = 6;
}

message LambFoldAggregateInfo {
  uint32 lamb_fold_no = 1;
  float profit_and_loss_count = 2;
  uint32 total_round_count = 3;
  uint32 win_count = 4;
  float avg_win_rate = 5;
}

message ListBannerReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional uint32 status = 4;
  optional string endpoint = 5;
  optional string module = 6;
  optional uint32 file_type = 7;
  optional string path = 8;
  optional string jump_url = 9;
}

message ListBannerResp {
  uint64 total = 1;
  repeated BannerInfo data = 2;
}

message ListExchangeReq {
  uint64 page = 1;
  uint64 page_size = 2;
  string mode = 3;
  optional uint64 player_id = 5;
  optional string transaction_id = 6;
  optional uint32 type = 7;
}

message ListExchangeResp {
  uint64 total = 1;
  repeated ExchangeInfo data = 2;
}

message ListFoldReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional uint64 round_id = 3;
  optional uint64 total_round_count = 4;
  optional uint64 total_round_cound_min = 5;
  optional uint64 total_round_cound_max = 6;
  string mode = 7;
}

message ListFoldResp {
  uint64 total = 1;
  repeated FoldInfo data = 2;
}

message ListHistoryInvestReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional uint64 player_id = 3;
  string mode = 4;
}

message ListHistoryInvestResp {
  uint64 total = 1;
  repeated InvestInfo data = 2;
}

message ListOrderReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional uint64 player_id = 3;
  optional uint32 status = 4;
  optional string type = 5;
  optional string code = 6;
  optional double num = 7;
  optional string to_address = 8;
  optional string from_address = 9;
}

message ListOrderResp {
  uint64 total = 1;
  repeated OrderInfo data = 2;
}

message ListPlayerReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string email = 3;
  optional uint32 status = 4;
  optional string name = 5;
  optional uint32 rank = 7;
  optional double amount = 8;
  optional uint32 invited_num = 10;
  optional double total_income = 11;
  optional float profit_and_loss = 12;
  optional string invite_code = 14;
  optional uint64 inviter_id = 15;
  optional string invited_code = 16;
  optional uint64 gcics_user_id = 18;
  optional string gcics_token = 19;
}

message ListPlayerResp {
  uint64 total = 1;
  repeated PlayerInfo data = 2;
}

message ListRewardReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional uint64 to_id = 3;
  optional uint32 status = 4;
  optional uint32 contributor_level = 5;
}

message ListRewardResp {
  uint64 total = 1;
  repeated RewardInfo data = 2;
}

message ListStatementReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional uint32 status = 4;
  optional uint64 player_id = 5;
  optional uint32 module = 6;
  optional string code = 7;
  optional uint32 inout_type = 9;
  optional double amount = 10;
  optional string refer_id = 11;
  optional string remark = 12;
  string mode = 13;
}

message ListStatementResp {
  uint64 total = 1;
  repeated StatementInfo data = 2;
}

message MinWithdrawNumResp {
  float minWithdrawNum = 1;
}

message NotifyExchangeReq {
  uint64 id = 1;
  bool isPaid = 2;
  double amount = 3;
}

message NumRangeResp {
  uint32 min = 1;
  uint32 max = 2;
}

message OrderInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint32 status = 4;
  string type = 5;
  string code = 6;
  double num = 7;
  string to_address = 8;
  string from_address = 9;
  string transaction_id = 10;
  uint64 player_id = 11;
  double handling_fee = 12;
  string network = 13;
  string remark = 14;
}

message OverviewInfo {
  uint64 today_participate_count = 1;
  uint64 today_new_player_count = 2;
  uint64 today_round_count = 3;
  uint64 today_eat_count = 4;
  uint64 today_platform_profit = 5;
  uint64 total_platform_profit = 6;
  uint64 total_player_count = 7;
  //  coin机器人池剩余数量
  float coin_robot_pool_rest_num = 8;
  //  coin奖金池剩余数量
  float coin_reward_pool_rest_num = 9;
  //  token机器人池剩余数量
  float token_robot_pool_rest_num = 10;
  //  token奖金池剩余数量
  float token_reward_pool_rest_num = 11;
}

message PageInfoReq {
  uint64 page = 1;
  uint64 page_size = 2;
}

message PercentResp {
  float percent = 1;
}

message PlayerInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint32 status = 4;
  string name = 5;
  float coin_lamb = 6;
  float token_lamb = 7;
  uint32 rank = 8;
  uint32 invited_num = 10;
  double total_income = 11;
  float profit_and_loss = 12;
  float recent_100_win_percent = 13;
  string invite_code = 14;
  uint64 inviter_id = 15;
  string invited_code = 16;
  float system_commission = 17;
  string email = 18;
  string password = 19;
  string transaction_password = 20;
  string deposit_address = 21;
  uint64 gcics_user_id = 22;
  string gcics_token = 23;
  string return_url = 24;
  double coin_amount = 25;
  double token_amount = 26;
  float coin_win_percent = 27;
  uint32 coin_total_lose_count = 28;
  uint32 coin_total_win_count = 29;
  double coin_total_win_amount = 30;
  double coin_total_lose_amount = 31;
  float token_win_percent = 32;
  uint32 token_total_lose_count = 33;
  uint32 token_total_win_count = 34;
  double token_total_win_amount = 35;
  double token_total_lose_amount = 36;
}

message PoolMinNumThenSilverResp {
  uint32 min = 1;
}

message PreviousRoundReq {
  string mode = 1;
}

message PreviousRoundResp {
  uint32 selected_fold_no = 1;
}

message RewardAggregateReq {
  uint64 to_id = 1;
  bool get_total = 2;
  bool get_today = 3;
}

message RewardAggregateResp {
  optional double total = 1;
  optional double today = 2;
}

message RewardInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint32 status = 4;
  uint64 contributor_id = 5;
  string contributor_email = 6;
  uint32 contributor_level = 7;
  float num = 8;
  string remark = 9;
  uint64 to_id = 10;
}

message RobotLampNumResp {
  uint32 min = 1;
  uint32 max = 2;
}

message RobotNumResp {
  uint32 min = 1;
  uint32 max = 2;
}

//  ROUND
message RoundInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint32 status = 4;
  int64 start_at = 5;
  int64 open_at = 6;
  int64 end_at = 7;
  uint32 selected_fold = 8;
  repeated FoldInfo folds = 9;
  uint32 round_count = 10;
  uint64 total_round_count = 11;
  repeated InvestInfo invests = 12;
  string mode = 13;
  uint32 openType = 14;
}

message StatementInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint32 status = 4;
  uint64 player_id = 5;
  uint32 module = 6;
  string code = 7;
  uint32 inout_type = 9;
  double amount = 10;
  string refer_id = 11;
  string remark = 12;
  string mode = 13;
}

message UUIDReq {
  string id = 1;
}

message UUIDsReq {
  repeated string ids = 1;
}

message UpdateBannerReq {
  uint64 id = 1;
  optional uint32 status = 4;
  optional string endpoint = 5;
  optional string module = 6;
  optional uint32 file_type = 7;
  optional string path = 8;
  optional string jump_url = 9;
  optional string file_id = 10;
}

message UpdateExchangeReq {
  uint64 id = 1;
  optional uint32 status = 4;
  optional uint64 player_id = 5;
  optional string transaction_id = 6;
  optional uint32 type = 7;
  optional uint32 coin_num = 8;
  optional uint32 lamp_num = 9;
}

message UpdateInvestReq {
  uint64 id = 1;
  optional float profit_and_loss = 2;
}

message UpdateOrderReq {
  uint64 id = 1;
  optional uint32 status = 4;
  optional string type = 5;
  optional double num = 6;
  optional string to_address = 8;
  optional string from_address = 9;
  optional string transaction_id = 10;
}

message UpdatePlayerReq {
  uint64 id = 1;
  optional string email = 2;
  optional string password = 3;
  optional uint32 status = 4;
  optional string name = 5;
  optional float coin_lamb = 6;
  optional float token_lamb = 19;
  optional uint32 rank = 7;
  optional double amount = 8;
  optional uint32 invited_num = 10;
  optional double total_income = 11;
  optional float profit_and_loss = 12;
  optional float recent_100_win_percent = 13;
  optional string invite_code = 14;
  optional string invited_code = 15;
  optional float system_commission = 16;
  optional string transaction_password = 17;
  optional string deposit_address = 18;
  optional string gcics_token = 21;
  optional string return_url = 22;
}

message UpdateRewardReq {
  uint64 id = 1;
  optional uint32 status = 4;
  optional uint64 contributor_id = 5;
  optional string contributor_email = 6;
  optional uint32 contributor_level = 7;
  optional float num = 8;
  optional string remark = 9;
  optional uint64 to_id = 10;
}

message UpdateSettingReq {
  string module = 1;
  string jsonString = 2;
}

message UpdateStatementReq {
  uint64 id = 1;
  optional uint32 status = 4;
  optional uint64 player_id = 5;
  optional uint32 module = 6;
  optional string code = 7;
  optional uint32 inout_type = 9;
  optional double amount = 10;
  optional string refer_id = 11;
  optional string remark = 12;
}

message ValidateGcicsSignReq {
  int64 timestamp = 1;
  string sign = 2;
}

message ValidateGcicsSignResp {
  bool isValid = 1;
}

message WithdrawCommissionResp {
  float withdrawCommission = 1;
}

message WithdrawThresholdResp {
  float withdrawThreshold = 1;
}

message dealOpenGameReq {
  uint32 lambFoldNo = 1;
  string mode = 2;
}

message syncGcicsReq {
  uint32 chunkSize = 1;
}

service Wolflamp {
  //  group: banner
  rpc createBanner(CreateBannerReq) returns (BaseIDResp);
  //  group: banner
  rpc updateBanner(UpdateBannerReq) returns (BaseIDResp);
  //  group: banner
  rpc deleteBanner(DeleteBannerReq) returns (BaseIDResp);
  //  group: banner
  rpc findBanner(FindBannerReq) returns (BannerInfo);
  //  group: banner
  rpc listBanner(ListBannerReq) returns (ListBannerResp);
  //  group: base
  rpc initDatabase(Empty) returns (BaseResp);
  //  group: exchange
  rpc createExchange(CreateExchangeReq) returns (BaseIDResp);
  //  group: exchange
  rpc updateExchange(UpdateExchangeReq) returns (BaseIDResp);
  //  group: exchange
  rpc deleteExchange(DeleteExchangeReq) returns (BaseIDResp);
  //  group: exchange
  rpc findExchange(FindExchangeReq) returns (ExchangeInfo);
  //  group: exchange
  rpc listExchange(ListExchangeReq) returns (ListExchangeResp);
  //  group: exchange
  rpc exchange(ExchangeReq) returns (ExchangeResp);
  //  group: exchange
  rpc notify(NotifyExchangeReq) returns (BaseIDResp);
  //  group: game
  rpc createRound(CreateRoundReq) returns (BaseIDResp);
  //  group: game
  rpc findRound(FindRoundReq) returns (RoundInfo);
  //  group: game
  rpc previousRound(PreviousRoundReq) returns (PreviousRoundResp);
  //  group: game
  rpc listHistoryInvest(ListHistoryInvestReq) returns (ListHistoryInvestResp);
  //  group: game
  rpc listFold(ListFoldReq) returns (ListFoldResp);
  //  group: game
  rpc invest(CreateInvestReq) returns (BaseIDResp);
  //  group: game
  rpc changeInvestFold(ChangeInvestFoldReq) returns (BaseIDResp);
  //  group: game
  rpc getInvestInfoByPlayerId(GetInvestInfoByPlayerIdReq) returns (GetInvestInfoByPlayerIdResp);
  //  group: game
  rpc getInvestByRoundId(GetInvestsByRoundIdReq) returns (GetInvestByRoundIdResp);
  //  group: game
  rpc getLambFoldAggregate(GetLambFoldAggregateReq) returns (GetLambFoldAggregateResp);
  //  group: game
  rpc getLambFoldAggregateV2(GetLambFoldAggregateV2Req) returns (GetLambFoldAggregateResp);
  //  group: game
  rpc dealOpenGame(dealOpenGameReq) returns (BaseIDResp);
  //  group: game
  rpc syncGcics(syncGcicsReq) returns (BaseIDResp);
  //  group: order
  rpc createOrder(CreateOrderReq) returns (BaseIDResp);
  //  group: order
  rpc updateOrder(UpdateOrderReq) returns (BaseIDResp);
  //  group: order
  rpc deleteOrder(DeleteOrderReq) returns (BaseIDResp);
  //  group: order
  rpc findOrder(FindOrderReq) returns (OrderInfo);
  //  group: order
  rpc listOrder(ListOrderReq) returns (ListOrderResp);
  //  group: order
  rpc calculateWithdrawFee(CalculateWithdrawFeeReq) returns (CalculateWithdrawFeeResp);
  //  group: overview
  rpc getOverview(GetOverviewReq) returns (GetOverviewResp);
  //  group: player
  rpc createPlayer(CreatePlayerReq) returns (BaseIDResp);
  //  group: player
  rpc updatePlayer(UpdatePlayerReq) returns (BaseIDResp);
  //  group: player
  rpc deletePlayer(DeletePlayerReq) returns (BaseIDResp);
  //  group: player
  rpc findPlayer(FindPlayerReq) returns (PlayerInfo);
  //  group: player
  rpc listPlayer(ListPlayerReq) returns (ListPlayerResp);
  //  group: player
  rpc getByEmail(GetByEmailReq) returns (PlayerInfo);
  //  group: player
  rpc getByInviteCode(GetByInviteCodeReq) returns (PlayerInfo);
  //  group: player
  rpc getInvitorListByIds(GetInvitorListByIdsReq) returns (GetInvitorListByIdsResp);
  //  group: player
  rpc validateGcicsSign(ValidateGcicsSignReq) returns (ValidateGcicsSignResp);
  //  group: player
  rpc getGcicsBalance(GetGcicsBalanceReq) returns (GetGcicsBalanceResp);
  //  group: pool
  rpc getSum(GetSumReq) returns (GetSumResp);
  //  group: reward
  rpc createReward(CreateRewardReq) returns (BaseIDResp);
  //  group: reward
  rpc updateReward(UpdateRewardReq) returns (BaseIDResp);
  //  group: reward
  rpc deleteReward(DeleteRewardReq) returns (BaseIDResp);
  //  group: reward
  rpc findReward(FindRewardReq) returns (RewardInfo);
  //  group: reward
  rpc listReward(ListRewardReq) returns (ListRewardResp);
  //  group: reward
  rpc rewardAggregate(RewardAggregateReq) returns (RewardAggregateResp);
  //  group: setting
  rpc updateSetting(UpdateSettingReq) returns (BaseIDResp);
  //  group: setting
  rpc findSetting(FindSettingReq) returns (FindSettingResp);
  //  group: setting
  rpc getWithdrawThreshold(Empty) returns (WithdrawThresholdResp);
  //  group: setting
  rpc getMinWithdrawNum(Empty) returns (MinWithdrawNumResp);
  //  group: setting
  rpc getWithdrawCommission(Empty) returns (WithdrawCommissionResp);
  //  group: setting
  rpc getIdleTime(Empty) returns (IdleTimeResp);
  //  group: setting
  rpc getRobotLampNum(Empty) returns (RobotLampNumResp);
  //  group: setting
  rpc getGameRule(Empty) returns (GameRuleResp);
  //  group: setting
  rpc getRobotNum(Empty) returns (RobotNumResp);
  //  group: setting
  rpc getGameCommission(Empty) returns (GameCommissionResp);
  //  group: setting
  rpc getPoolCommission(Empty) returns (CommissionResp);
  //  group: setting
  rpc getRobPoolCommission(Empty) returns (CommissionResp);
  //  group: setting
  rpc getRewardPoolCommission(Empty) returns (CommissionResp);
  //  group: setting
  rpc getGoldenLambAllowTime(Empty) returns (HourTimeRangeResp);
  //  group: setting
  rpc getGoldenLambNumRange(Empty) returns (NumRangeResp);
  //  group: setting
  rpc getSliverLambNumRange(Empty) returns (NumRangeResp);
  //  group: setting
  rpc getPoolMinNumThenSilver(Empty) returns (PoolMinNumThenSilverResp);
  //  group: setting
  rpc getSliverOccurPercent(Empty) returns (PercentResp);
  //  group: statement
  rpc createStatement(CreateStatementReq) returns (BaseIDResp);
  //  group: statement
  rpc updateStatement(UpdateStatementReq) returns (BaseIDResp);
  //  group: statement
  rpc deleteStatement(DeleteStatementReq) returns (BaseIDResp);
  //  group: statement
  rpc findStatement(FindStatementReq) returns (StatementInfo);
  //  group: statement
  rpc listStatement(ListStatementReq) returns (ListStatementResp);
}

